// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package completo.create_fact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Create_fact Purpose: Create_fact<br>
 * Description: Create_fact <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Create_fact implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Create_fact";
	private final String projectName = "COMPLETO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Create_fact.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Create_fact.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_estado_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_portafolio_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_contraparte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_trader_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sistema_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_producto_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_moneda_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_moneda2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_fecha_carga_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idOperacion;

				public String getIdOperacion () {
					return this.idOperacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public String idEstado;

				public String getIdEstado () {
					return this.idEstado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String idMonedaFuerte;

				public String getIdMonedaFuerte () {
					return this.idMonedaFuerte;
				}
				
			    public String idMonedaDebil;

				public String getIdMonedaDebil () {
					return this.idMonedaDebil;
				}
				
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String idSistema;

				public String getIdSistema () {
					return this.idSistema;
				}
				
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double precio_cambio_par;

				public Double getPrecio_cambio_par () {
					return this.precio_cambio_par;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idOperacion == null) ? 0 : this.idOperacion.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.idOperacion == null) {
							if (other.idOperacion != null)
								return false;
						
						} else if (!this.idOperacion.equals(other.idOperacion))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.idOperacion = this.idOperacion;
	            other.contraparte = this.contraparte;
	            other.idEstado = this.idEstado;
	            other.fecha_carga = this.fecha_carga;
	            other.fecha_finalizacion = this.fecha_finalizacion;
	            other.fecha_insercion = this.fecha_insercion;
	            other.fecha_pago = this.fecha_pago;
	            other.idMonedaFuerte = this.idMonedaFuerte;
	            other.idMonedaDebil = this.idMonedaDebil;
	            other.idPortafolio = this.idPortafolio;
	            other.idProducto = this.idProducto;
	            other.idSistema = this.idSistema;
	            other.idTrader = this.idTrader;
	            other.cant_contratos = this.cant_contratos;
	            other.monto_operacion = this.monto_operacion;
	            other.precio_cambio_par = this.precio_cambio_par;
	            other.P_L = this.P_L;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.idOperacion = this.idOperacion;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idOperacion = readString(dis);
					
					this.contraparte = readString(dis);
					
					this.idEstado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.idMonedaFuerte = readString(dis);
					
					this.idMonedaDebil = readString(dis);
					
					this.idPortafolio = readString(dis);
					
					this.idProducto = readString(dis);
					
					this.idSistema = readString(dis);
					
					this.idTrader = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio_cambio_par = null;
           				} else {
           			    	this.precio_cambio_par = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idOperacion,dos);
					
					// String
				
						writeString(this.contraparte,dos);
					
					// String
				
						writeString(this.idEstado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.idMonedaFuerte,dos);
					
					// String
				
						writeString(this.idMonedaDebil,dos);
					
					// String
				
						writeString(this.idPortafolio,dos);
					
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.idSistema,dos);
					
					// String
				
						writeString(this.idTrader,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.precio_cambio_par == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio_cambio_par);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idOperacion="+idOperacion);
		sb.append(",contraparte="+contraparte);
		sb.append(",idEstado="+idEstado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",idMonedaFuerte="+idMonedaFuerte);
		sb.append(",idMonedaDebil="+idMonedaDebil);
		sb.append(",idPortafolio="+idPortafolio);
		sb.append(",idProducto="+idProducto);
		sb.append(",idSistema="+idSistema);
		sb.append(",idTrader="+idTrader);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",precio_cambio_par="+String.valueOf(precio_cambio_par));
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idOperacion, other.idOperacion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class stageStruct implements routines.system.IPersistableRow<stageStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMysqlInput_9Struct implements routines.system.IPersistableRow<after_tMysqlInput_9Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMysqlInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tMysqlInput_1Process(globalMap);
		tMysqlInput_4Process(globalMap);
		tMysqlInput_8Process(globalMap);
		tMysqlInput_2Process(globalMap);
		tMysqlInput_6Process(globalMap);
		tMysqlInput_3Process(globalMap);
		tMysqlInput_5Process(globalMap);
		tMysqlInput_10Process(globalMap);
		tMysqlInput_7Process(globalMap);

		stageStruct stage = new stageStruct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_1 = 1;
        if(updateKeyCount_tMysqlOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "factoperacion";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_1 = false;
                                while(rsTable_tMysqlOutput_1.next()) {
                                    String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_1.equalsIgnoreCase("factoperacion")) {
                                        whetherExist_tMysqlOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_1.close();
                                if(!whetherExist_tMysqlOutput_1) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
                                        stmtCreate_tMysqlOutput_1.execute("CREATE TABLE `" + tableName_tMysqlOutput_1 + "`(`idOperacion` VARCHAR(2)   not null ,`contraparte` VARCHAR(30)  ,`idEstado` VARCHAR(7)  ,`fecha_carga` VARCHAR(28)  ,`fecha_finalizacion` VARCHAR(28)  ,`fecha_insercion` VARCHAR(15)  ,`fecha_pago` VARCHAR(28)  ,`idMonedaFuerte` VARCHAR(3)  ,`idMonedaDebil` VARCHAR(3)  ,`idPortafolio` VARCHAR(18)  ,`idProducto` VARCHAR(5)  ,`idSistema` VARCHAR(13)  ,`idTrader` VARCHAR(16)  ,`cant_contratos` INT(4)  ,`monto_operacion` FLOAT(10,0)  ,`precio_cambio_par` DOUBLE ,`P_L` DOUBLE ,primary key(`idOperacion`))");
                                    stmtCreate_tMysqlOutput_1.close();
                                }
	    java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement("SELECT COUNT(1) FROM `" + "factoperacion" + "` WHERE `idOperacion` = ?");
	    String insert_tMysqlOutput_1 = "INSERT INTO `" + "factoperacion" + "` (`idOperacion`,`contraparte`,`idEstado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`idMonedaFuerte`,`idMonedaDebil`,`idPortafolio`,`idProducto`,`idSistema`,`idTrader`,`cant_contratos`,`monto_operacion`,`precio_cambio_par`,`P_L`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);
	    String update_tMysqlOutput_1 = "UPDATE `" + "factoperacion" + "` SET `contraparte` = ?,`idEstado` = ?,`fecha_carga` = ?,`fecha_finalizacion` = ?,`fecha_insercion` = ?,`fecha_pago` = ?,`idMonedaFuerte` = ?,`idMonedaDebil` = ?,`idPortafolio` = ?,`idProducto` = ?,`idSistema` = ?,`idTrader` = ?,`cant_contratos` = ?,`monto_operacion` = ?,`precio_cambio_par` = ?,`P_L` = ? WHERE `idOperacion` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(update_tMysqlOutput_1);
	    

 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stage" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoStruct> tHash_Lookup_estado = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoStruct>) 
					globalMap.get( "tHash_Lookup_estado" ))
					;					
					
	

estadoStruct estadoHashKey = new estadoStruct();
estadoStruct estadoDefault = new estadoStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioStruct> tHash_Lookup_portafolio = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioStruct>) 
					globalMap.get( "tHash_Lookup_portafolio" ))
					;					
					
	

portafolioStruct portafolioHashKey = new portafolioStruct();
portafolioStruct portafolioDefault = new portafolioStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteStruct> tHash_Lookup_contraparte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteStruct>) 
					globalMap.get( "tHash_Lookup_contraparte" ))
					;					
					
	

contraparteStruct contraparteHashKey = new contraparteStruct();
contraparteStruct contraparteDefault = new contraparteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderStruct> tHash_Lookup_trader = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderStruct>) 
					globalMap.get( "tHash_Lookup_trader" ))
					;					
					
	

traderStruct traderHashKey = new traderStruct();
traderStruct traderDefault = new traderStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaStruct> tHash_Lookup_sistema = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaStruct>) 
					globalMap.get( "tHash_Lookup_sistema" ))
					;					
					
	

sistemaStruct sistemaHashKey = new sistemaStruct();
sistemaStruct sistemaDefault = new sistemaStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoStruct> tHash_Lookup_producto = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoStruct>) 
					globalMap.get( "tHash_Lookup_producto" ))
					;					
					
	

productoStruct productoHashKey = new productoStruct();
productoStruct productoDefault = new productoStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaStruct> tHash_Lookup_moneda = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaStruct>) 
					globalMap.get( "tHash_Lookup_moneda" ))
					;					
					
	

monedaStruct monedaHashKey = new monedaStruct();
monedaStruct monedaDefault = new monedaStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2Struct> tHash_Lookup_moneda2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2Struct>) 
					globalMap.get( "tHash_Lookup_moneda2" ))
					;					
					
	

moneda2Struct moneda2HashKey = new moneda2Struct();
moneda2Struct moneda2Default = new moneda2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fecha_cargaStruct> tHash_Lookup_fecha_carga = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fecha_cargaStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fecha_cargaStruct>) 
					globalMap.get( "tHash_Lookup_fecha_carga" ))
					;					
					
	

fecha_cargaStruct fecha_cargaHashKey = new fecha_cargaStruct();
fecha_cargaStruct fecha_cargaDefault = new fecha_cargaStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_9", false);
		start_Hash.put("tMysqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_9";

	
		int tos_count_tMysqlInput_9 = 0;
		
    	class BytesLimit65535_tMysqlInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_9().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_9 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_9.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_9 = calendar_tMysqlInput_9.getTime();
		    int nb_line_tMysqlInput_9 = 0;
		    java.sql.Connection conn_tMysqlInput_9 = null;
				String driverClass_tMysqlInput_9 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_9);
			   	String dbUser_tMysqlInput_9 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_9 = decryptedPassword_tMysqlInput_9;
		        
				
				String url_tMysqlInput_9 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_9 = java.sql.DriverManager.getConnection(url_tMysqlInput_9,dbUser_tMysqlInput_9,dbPwd_tMysqlInput_9);
		        
		    
			java.sql.Statement stmt_tMysqlInput_9 = conn_tMysqlInput_9.createStatement();

		    String dbquery_tMysqlInput_9 = "SELECT * FROM stage.`stage`;";
			

            	globalMap.put("tMysqlInput_9_QUERY",dbquery_tMysqlInput_9);
		    java.sql.ResultSet rs_tMysqlInput_9 = null;

		    try {
		    	rs_tMysqlInput_9 = stmt_tMysqlInput_9.executeQuery(dbquery_tMysqlInput_9);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_9 = rs_tMysqlInput_9.getMetaData();
		    	int colQtyInRs_tMysqlInput_9 = rsmd_tMysqlInput_9.getColumnCount();

		    String tmpContent_tMysqlInput_9 = null;
		    
		    
		    while (rs_tMysqlInput_9.next()) {
		        nb_line_tMysqlInput_9++;
		        
							if(colQtyInRs_tMysqlInput_9 < 1) {
								stage.id_operacion = null;
							} else {
	                         		
        	stage.id_operacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 2) {
								stage.estado = null;
							} else {
	                         		
        	stage.estado = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 3) {
								stage.fecha_carga = null;
							} else {
	                         		
        	stage.fecha_carga = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 4) {
								stage.fecha_finalizacion = null;
							} else {
	                         		
        	stage.fecha_finalizacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 5) {
								stage.fecha_insercion = null;
							} else {
	                         		
        	stage.fecha_insercion = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 6) {
								stage.fecha_pago = null;
							} else {
	                         		
        	stage.fecha_pago = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 7) {
								stage.portafolio_nombre = null;
							} else {
	                         		
        	stage.portafolio_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 8) {
								stage.sistema_nombre = null;
							} else {
	                         		
        	stage.sistema_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 9) {
								stage.cant_contratos = null;
							} else {
		                          
            if(rs_tMysqlInput_9.getObject(9) != null) {
                stage.cant_contratos = rs_tMysqlInput_9.getInt(9);
            } else {
                    stage.cant_contratos = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_9 < 10) {
								stage.trader_nombre = null;
							} else {
	                         		
        	stage.trader_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 11) {
								stage.producto_nombre = null;
							} else {
	                         		
        	stage.producto_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 12) {
								stage.tipo_operacion_nombre = null;
							} else {
	                         		
        	stage.tipo_operacion_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 13) {
								stage.moneda1 = null;
							} else {
	                         		
        	stage.moneda1 = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 14) {
								stage.moneda2 = null;
							} else {
	                         		
        	stage.moneda2 = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 15) {
								stage.monto_operacion = null;
							} else {
	                         		
            if(rs_tMysqlInput_9.getObject(15) != null) {
                stage.monto_operacion = rs_tMysqlInput_9.getDouble(15);
            } else {
                    stage.monto_operacion = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_9 < 16) {
								stage.contraparte = null;
							} else {
	                         		
        	stage.contraparte = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 16, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 17) {
								stage.precio = null;
							} else {
	                         		
            if(rs_tMysqlInput_9.getObject(17) != null) {
                stage.precio = rs_tMysqlInput_9.getDouble(17);
            } else {
                    stage.precio = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_9 < 18) {
								stage.P_L = null;
							} else {
	                         		
            if(rs_tMysqlInput_9.getObject(18) != null) {
                stage.P_L = rs_tMysqlInput_9.getDouble(18);
            } else {
                    stage.P_L = null;
            }
		                    }
					

 



/**
 * [tMysqlInput_9 begin ] stop
 */
	
	/**
	 * [tMysqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 


	tos_count_tMysqlInput_9++;

/**
 * [tMysqlInput_9 main ] stop
 */
	
	/**
	 * [tMysqlInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//stage
			//stage


			
				if(execStat){
					runStat.updateStatOnConnection("stage"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "estado" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopestado = false;
       		  	    	
       		  	    	
 							estadoStruct estadoObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		estadoHashKey.idestado = stage.estado ;
                        		    		

								
		                        	estadoHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_estado.lookup( estadoHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_estado.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_estado != null && tHash_Lookup_estado.getCount(estadoHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'estado' and it contains more one result from keys :  estado.idestado = '" + estadoHashKey.idestado + "'");
								} // G 071
							

							estadoStruct estado = null;
                    		  	 
							   
                    		  	 
	       		  	    	estadoStruct fromLookup_estado = null;
							estado = estadoDefault;
										 
							
								 
							
							
								if (tHash_Lookup_estado !=null && tHash_Lookup_estado.hasNext()) { // G 099
								
							
								
								fromLookup_estado = tHash_Lookup_estado.next();

							
							
								} // G 099
							
							

							if(fromLookup_estado != null) {
								estado = fromLookup_estado;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "portafolio" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopportafolio = false;
       		  	    	
       		  	    	
 							portafolioStruct portafolioObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		portafolioHashKey.idPortafolio = stage.portafolio_nombre ;
                        		    		

								
		                        	portafolioHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_portafolio.lookup( portafolioHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_portafolio.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_portafolio != null && tHash_Lookup_portafolio.getCount(portafolioHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'portafolio' and it contains more one result from keys :  portafolio.idPortafolio = '" + portafolioHashKey.idPortafolio + "'");
								} // G 071
							

							portafolioStruct portafolio = null;
                    		  	 
							   
                    		  	 
	       		  	    	portafolioStruct fromLookup_portafolio = null;
							portafolio = portafolioDefault;
										 
							
								 
							
							
								if (tHash_Lookup_portafolio !=null && tHash_Lookup_portafolio.hasNext()) { // G 099
								
							
								
								fromLookup_portafolio = tHash_Lookup_portafolio.next();

							
							
								} // G 099
							
							

							if(fromLookup_portafolio != null) {
								portafolio = fromLookup_portafolio;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "contraparte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcontraparte = false;
       		  	    	
       		  	    	
 							contraparteStruct contraparteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		contraparteHashKey.idContraparte = stage.contraparte;
                        		    		

								
		                        	contraparteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_contraparte.lookup( contraparteHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_contraparte.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_contraparte != null && tHash_Lookup_contraparte.getCount(contraparteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'contraparte' and it contains more one result from keys :  contraparte.idContraparte = '" + contraparteHashKey.idContraparte + "'");
								} // G 071
							

							contraparteStruct contraparte = null;
                    		  	 
							   
                    		  	 
	       		  	    	contraparteStruct fromLookup_contraparte = null;
							contraparte = contraparteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_contraparte !=null && tHash_Lookup_contraparte.hasNext()) { // G 099
								
							
								
								fromLookup_contraparte = tHash_Lookup_contraparte.next();

							
							
								} // G 099
							
							

							if(fromLookup_contraparte != null) {
								contraparte = fromLookup_contraparte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "trader" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptrader = false;
       		  	    	
       		  	    	
 							traderStruct traderObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		traderHashKey.idTrader = stage.trader_nombre ;
                        		    		

								
		                        	traderHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_trader.lookup( traderHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_trader.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_trader != null && tHash_Lookup_trader.getCount(traderHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'trader' and it contains more one result from keys :  trader.idTrader = '" + traderHashKey.idTrader + "'");
								} // G 071
							

							traderStruct trader = null;
                    		  	 
							   
                    		  	 
	       		  	    	traderStruct fromLookup_trader = null;
							trader = traderDefault;
										 
							
								 
							
							
								if (tHash_Lookup_trader !=null && tHash_Lookup_trader.hasNext()) { // G 099
								
							
								
								fromLookup_trader = tHash_Lookup_trader.next();

							
							
								} // G 099
							
							

							if(fromLookup_trader != null) {
								trader = fromLookup_trader;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "sistema" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsistema = false;
       		  	    	
       		  	    	
 							sistemaStruct sistemaObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		sistemaHashKey.idSistema = stage.sistema_nombre ;
                        		    		

								
		                        	sistemaHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sistema.lookup( sistemaHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_sistema.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sistema != null && tHash_Lookup_sistema.getCount(sistemaHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sistema' and it contains more one result from keys :  sistema.idSistema = '" + sistemaHashKey.idSistema + "'");
								} // G 071
							

							sistemaStruct sistema = null;
                    		  	 
							   
                    		  	 
	       		  	    	sistemaStruct fromLookup_sistema = null;
							sistema = sistemaDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sistema !=null && tHash_Lookup_sistema.hasNext()) { // G 099
								
							
								
								fromLookup_sistema = tHash_Lookup_sistema.next();

							
							
								} // G 099
							
							

							if(fromLookup_sistema != null) {
								sistema = fromLookup_sistema;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "producto" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopproducto = false;
       		  	    	
       		  	    	
 							productoStruct productoObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		productoHashKey.idProducto = stage.producto_nombre ;
                        		    		
                        		    		productoHashKey.tipo_operacion = stage.tipo_operacion_nombre ;
                        		    		

								
		                        	productoHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_producto.lookup( productoHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_producto.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLoopproducto = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopproducto = true;
			           		  	} // G 21
                    		  	
                    		

							productoStruct producto = null;
                    		  	 
							

								while ((tHash_Lookup_producto != null && tHash_Lookup_producto.hasNext()) || forceLoopproducto) { // G_TM_M_043

								
									 // CALL close loop of lookup 'producto'
									
                    		  	 
							   
                    		  	 
	       		  	    	productoStruct fromLookup_producto = null;
							producto = productoDefault;
										 
							
								
								if(!forceLoopproducto) { // G 46
								
							
								 
							
								
								fromLookup_producto = tHash_Lookup_producto.next();

							

							if(fromLookup_producto != null) {
								producto = fromLookup_producto;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopproducto = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "moneda" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopmoneda = false;
       		  	    	
       		  	    	
 							monedaStruct monedaObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		monedaHashKey.idmoneda = stage.moneda1 ;
                        		    		

								
		                        	monedaHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_moneda.lookup( monedaHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_moneda.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_moneda != null && tHash_Lookup_moneda.getCount(monedaHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'moneda' and it contains more one result from keys :  moneda.idmoneda = '" + monedaHashKey.idmoneda + "'");
								} // G 071
							

							monedaStruct moneda = null;
                    		  	 
							   
                    		  	 
	       		  	    	monedaStruct fromLookup_moneda = null;
							moneda = monedaDefault;
										 
							
								 
							
							
								if (tHash_Lookup_moneda !=null && tHash_Lookup_moneda.hasNext()) { // G 099
								
							
								
								fromLookup_moneda = tHash_Lookup_moneda.next();

							
							
								} // G 099
							
							

							if(fromLookup_moneda != null) {
								moneda = fromLookup_moneda;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "moneda2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopmoneda2 = false;
       		  	    	
       		  	    	
 							moneda2Struct moneda2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		moneda2HashKey.idmoneda = stage.moneda2 ;
                        		    		

								
		                        	moneda2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_moneda2.lookup( moneda2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_moneda2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_moneda2 != null && tHash_Lookup_moneda2.getCount(moneda2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'moneda2' and it contains more one result from keys :  moneda2.idmoneda = '" + moneda2HashKey.idmoneda + "'");
								} // G 071
							

							moneda2Struct moneda2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	moneda2Struct fromLookup_moneda2 = null;
							moneda2 = moneda2Default;
										 
							
								 
							
							
								if (tHash_Lookup_moneda2 !=null && tHash_Lookup_moneda2.hasNext()) { // G 099
								
							
								
								fromLookup_moneda2 = tHash_Lookup_moneda2.next();

							
							
								} // G 099
							
							

							if(fromLookup_moneda2 != null) {
								moneda2 = fromLookup_moneda2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "fecha_carga" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfecha_carga = false;
       		  	    	
       		  	    	
 							fecha_cargaStruct fecha_cargaObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		fecha_cargaHashKey.idfecha = stage.fecha_carga ;
                        		    		

								
		                        	fecha_cargaHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_fecha_carga.lookup( fecha_cargaHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_fecha_carga.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_fecha_carga != null && tHash_Lookup_fecha_carga.getCount(fecha_cargaHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fecha_carga' and it contains more one result from keys :  fecha_carga.idfecha = '" + fecha_cargaHashKey.idfecha + "'");
								} // G 071
							

							fecha_cargaStruct fecha_carga = null;
                    		  	 
							   
                    		  	 
	       		  	    	fecha_cargaStruct fromLookup_fecha_carga = null;
							fecha_carga = fecha_cargaDefault;
										 
							
								 
							
							
								if (tHash_Lookup_fecha_carga !=null && tHash_Lookup_fecha_carga.hasNext()) { // G 099
								
							
								
								fromLookup_fecha_carga = tHash_Lookup_fecha_carga.next();

							
							
								} // G 099
							
							

							if(fromLookup_fecha_carga != null) {
								fecha_carga = fromLookup_fecha_carga;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.idOperacion = stage.id_operacion ;
out1_tmp.contraparte = stage.contraparte;
out1_tmp.idEstado = stage.estado ;
out1_tmp.fecha_carga = stage.fecha_carga ;
out1_tmp.fecha_finalizacion = stage.fecha_finalizacion ;
out1_tmp.fecha_insercion = stage.fecha_insercion ;
out1_tmp.fecha_pago = stage.fecha_pago ;
out1_tmp.idMonedaFuerte = stage.moneda1 ;
out1_tmp.idMonedaDebil = stage.moneda2 ;
out1_tmp.idPortafolio = stage.portafolio_nombre ;
out1_tmp.idProducto = stage.producto_nombre ;
out1_tmp.idSistema = stage.sistema_nombre ;
out1_tmp.idTrader = StringHandling.EREPLACE(stage.trader_nombre," ","_")  ;
out1_tmp.cant_contratos = stage.cant_contratos ;
out1_tmp.monto_operacion = stage.monto_operacion ;
out1_tmp.precio_cambio_par =  stage.precio ;
out1_tmp.P_L = stage.P_L ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                    if(out1.idOperacion == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, out1.idOperacion);
}


            java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1.executeQuery();
            int checkCount_tMysqlOutput_1 = -1;
            while(rs_tMysqlOutput_1.next()) {
                checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1.getInt(1);
            }
            if(checkCount_tMysqlOutput_1 > 0) {
                        if(out1.contraparte == null) {
pstmtUpdate_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(1, out1.contraparte);
}

                        if(out1.idEstado == null) {
pstmtUpdate_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(2, out1.idEstado);
}

                        if(out1.fecha_carga == null) {
pstmtUpdate_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(3, out1.fecha_carga);
}

                        if(out1.fecha_finalizacion == null) {
pstmtUpdate_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(4, out1.fecha_finalizacion);
}

                        if(out1.fecha_insercion == null) {
pstmtUpdate_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(5, out1.fecha_insercion);
}

                        if(out1.fecha_pago == null) {
pstmtUpdate_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(6, out1.fecha_pago);
}

                        if(out1.idMonedaFuerte == null) {
pstmtUpdate_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(7, out1.idMonedaFuerte);
}

                        if(out1.idMonedaDebil == null) {
pstmtUpdate_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(8, out1.idMonedaDebil);
}

                        if(out1.idPortafolio == null) {
pstmtUpdate_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(9, out1.idPortafolio);
}

                        if(out1.idProducto == null) {
pstmtUpdate_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(10, out1.idProducto);
}

                        if(out1.idSistema == null) {
pstmtUpdate_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(11, out1.idSistema);
}

                        if(out1.idTrader == null) {
pstmtUpdate_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(12, out1.idTrader);
}

                        if(out1.cant_contratos == null) {
pstmtUpdate_tMysqlOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setInt(13, out1.cant_contratos);
}

                        if(out1.monto_operacion == null) {
pstmtUpdate_tMysqlOutput_1.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tMysqlOutput_1.setDouble(14, out1.monto_operacion);
}

                        if(out1.precio_cambio_par == null) {
pstmtUpdate_tMysqlOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tMysqlOutput_1.setDouble(15, out1.precio_cambio_par);
}

                        if(out1.P_L == null) {
pstmtUpdate_tMysqlOutput_1.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tMysqlOutput_1.setDouble(16, out1.P_L);
}

                        if(out1.idOperacion == null) {
pstmtUpdate_tMysqlOutput_1.setNull(17 + count_tMysqlOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(17 + count_tMysqlOutput_1, out1.idOperacion);
}

                try {
                    updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1 + pstmtUpdate_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                        nb_line_tMysqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(out1.idOperacion == null) {
pstmtInsert_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(1, out1.idOperacion);
}

                        if(out1.contraparte == null) {
pstmtInsert_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(2, out1.contraparte);
}

                        if(out1.idEstado == null) {
pstmtInsert_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(3, out1.idEstado);
}

                        if(out1.fecha_carga == null) {
pstmtInsert_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(4, out1.fecha_carga);
}

                        if(out1.fecha_finalizacion == null) {
pstmtInsert_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(5, out1.fecha_finalizacion);
}

                        if(out1.fecha_insercion == null) {
pstmtInsert_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(6, out1.fecha_insercion);
}

                        if(out1.fecha_pago == null) {
pstmtInsert_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(7, out1.fecha_pago);
}

                        if(out1.idMonedaFuerte == null) {
pstmtInsert_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(8, out1.idMonedaFuerte);
}

                        if(out1.idMonedaDebil == null) {
pstmtInsert_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(9, out1.idMonedaDebil);
}

                        if(out1.idPortafolio == null) {
pstmtInsert_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(10, out1.idPortafolio);
}

                        if(out1.idProducto == null) {
pstmtInsert_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(11, out1.idProducto);
}

                        if(out1.idSistema == null) {
pstmtInsert_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(12, out1.idSistema);
}

                        if(out1.idTrader == null) {
pstmtInsert_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(13, out1.idTrader);
}

                        if(out1.cant_contratos == null) {
pstmtInsert_tMysqlOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setInt(14, out1.cant_contratos);
}

                        if(out1.monto_operacion == null) {
pstmtInsert_tMysqlOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtInsert_tMysqlOutput_1.setDouble(15, out1.monto_operacion);
}

                        if(out1.precio_cambio_par == null) {
pstmtInsert_tMysqlOutput_1.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtInsert_tMysqlOutput_1.setDouble(16, out1.precio_cambio_par);
}

                        if(out1.P_L == null) {
pstmtInsert_tMysqlOutput_1.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtInsert_tMysqlOutput_1.setDouble(17, out1.P_L);
}

                try {
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmtInsert_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                        nb_line_tMysqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'producto' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

	}
}finally{
	if(rs_tMysqlInput_9 !=null){
		rs_tMysqlInput_9.close();
	}
	stmt_tMysqlInput_9.close();
		if(conn_tMysqlInput_9 != null && !conn_tMysqlInput_9.isClosed()) {
			
			conn_tMysqlInput_9.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_9_NB_LINE",nb_line_tMysqlInput_9);
		


 

ok_Hash.put("tMysqlInput_9", true);
end_Hash.put("tMysqlInput_9", System.currentTimeMillis());




/**
 * [tMysqlInput_9 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_estado != null) {
						tHash_Lookup_estado.endGet();
					}
					globalMap.remove( "tHash_Lookup_estado" );

					
					
				
					if(tHash_Lookup_portafolio != null) {
						tHash_Lookup_portafolio.endGet();
					}
					globalMap.remove( "tHash_Lookup_portafolio" );

					
					
				
					if(tHash_Lookup_contraparte != null) {
						tHash_Lookup_contraparte.endGet();
					}
					globalMap.remove( "tHash_Lookup_contraparte" );

					
					
				
					if(tHash_Lookup_trader != null) {
						tHash_Lookup_trader.endGet();
					}
					globalMap.remove( "tHash_Lookup_trader" );

					
					
				
					if(tHash_Lookup_sistema != null) {
						tHash_Lookup_sistema.endGet();
					}
					globalMap.remove( "tHash_Lookup_sistema" );

					
					
				
					if(tHash_Lookup_producto != null) {
						tHash_Lookup_producto.endGet();
					}
					globalMap.remove( "tHash_Lookup_producto" );

					
					
				
					if(tHash_Lookup_moneda != null) {
						tHash_Lookup_moneda.endGet();
					}
					globalMap.remove( "tHash_Lookup_moneda" );

					
					
				
					if(tHash_Lookup_moneda2 != null) {
						tHash_Lookup_moneda2.endGet();
					}
					globalMap.remove( "tHash_Lookup_moneda2" );

					
					
				
					if(tHash_Lookup_fecha_carga != null) {
						tHash_Lookup_fecha_carga.endGet();
					}
					globalMap.remove( "tHash_Lookup_fecha_carga" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stage"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



        if(pstmtUpdate_tMysqlOutput_1 != null){

            pstmtUpdate_tMysqlOutput_1.close();

        }
        if(pstmtInsert_tMysqlOutput_1 != null){

            pstmtInsert_tMysqlOutput_1.close();

        }
        if(pstmt_tMysqlOutput_1 != null) {

            pstmt_tMysqlOutput_1.close();

        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_estado"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_portafolio"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_contraparte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_trader"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_sistema"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_producto"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_moneda"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_moneda2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_fecha_carga"); 
				     			
				try{
					
	
	/**
	 * [tMysqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class estadoStruct implements routines.system.IPersistableComparableLookupRow<estadoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idestado;

				public String getIdestado () {
					return this.idestado;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idestado == null) ? 0 : this.idestado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final estadoStruct other = (estadoStruct) obj;
		
						if (this.idestado == null) {
							if (other.idestado != null)
								return false;
						
						} else if (!this.idestado.equals(other.idestado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(estadoStruct other) {

		other.idestado = this.idestado;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(estadoStruct other) {

		other.idestado = this.idestado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idestado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idestado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idestado="+idestado);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(estadoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idestado, other.idestado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		estadoStruct estado = new estadoStruct();




	
	/**
	 * [tAdvancedHash_estado begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_estado", false);
		start_Hash.put("tAdvancedHash_estado", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_estado";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("estado" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_estado = 0;
		
    	class BytesLimit65535_tAdvancedHash_estado{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_estado().limitLog4jByte();

			   		// connection name:estado
			   		// source node:tMysqlInput_1 - inputs:(after_tMysqlInput_9) outputs:(estado,estado) | target node:tAdvancedHash_estado - inputs:(estado) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_estado = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoStruct> tHash_Lookup_estado =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<estadoStruct>getLookup(matchingModeEnum_estado);
	   						   
		   	   	   globalMap.put("tHash_Lookup_estado", tHash_Lookup_estado);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_estado begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT * FROM datamart.`dimestado`;";
			

            	globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);
		    java.sql.ResultSet rs_tMysqlInput_1 = null;

		    try {
		    	rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    	int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								estado.idestado = null;
							} else {
	                         		
        	estado.idestado = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								estado.nombre = null;
							} else {
	                         		
        	estado.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */
	
	/**
	 * [tMysqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_estado main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estado";

	

			//estado
			//estado


			
				if(execStat){
					runStat.updateStatOnConnection("estado"+iterateId,1, 1);
				} 
			

		


			   
			   

					estadoStruct estado_HashRow = new estadoStruct();
		   	   	   
				
				estado_HashRow.idestado = estado.idestado;
				
				estado_HashRow.nombre = estado.nombre;
				
			tHash_Lookup_estado.put(estado_HashRow);
			
            




 


	tos_count_tAdvancedHash_estado++;

/**
 * [tAdvancedHash_estado main ] stop
 */
	
	/**
	 * [tAdvancedHash_estado process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estado";

	

 



/**
 * [tAdvancedHash_estado process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_estado process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estado";

	

 



/**
 * [tAdvancedHash_estado process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_estado end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estado";

	

tHash_Lookup_estado.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("estado"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_estado", true);
end_Hash.put("tAdvancedHash_estado", System.currentTimeMillis());




/**
 * [tAdvancedHash_estado end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_estado finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estado";

	

 



/**
 * [tAdvancedHash_estado finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class portafolioStruct implements routines.system.IPersistableComparableLookupRow<portafolioStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idPortafolio == null) ? 0 : this.idPortafolio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final portafolioStruct other = (portafolioStruct) obj;
		
						if (this.idPortafolio == null) {
							if (other.idPortafolio != null)
								return false;
						
						} else if (!this.idPortafolio.equals(other.idPortafolio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(portafolioStruct other) {

		other.idPortafolio = this.idPortafolio;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(portafolioStruct other) {

		other.idPortafolio = this.idPortafolio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idPortafolio = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idPortafolio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idPortafolio="+idPortafolio);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(portafolioStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idPortafolio, other.idPortafolio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		portafolioStruct portafolio = new portafolioStruct();




	
	/**
	 * [tAdvancedHash_portafolio begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_portafolio", false);
		start_Hash.put("tAdvancedHash_portafolio", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_portafolio";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("portafolio" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_portafolio = 0;
		
    	class BytesLimit65535_tAdvancedHash_portafolio{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_portafolio().limitLog4jByte();

			   		// connection name:portafolio
			   		// source node:tMysqlInput_4 - inputs:(after_tMysqlInput_9) outputs:(portafolio,portafolio) | target node:tAdvancedHash_portafolio - inputs:(portafolio) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_portafolio = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioStruct> tHash_Lookup_portafolio =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<portafolioStruct>getLookup(matchingModeEnum_portafolio);
	   						   
		   	   	   globalMap.put("tHash_Lookup_portafolio", tHash_Lookup_portafolio);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_portafolio begin ] stop
 */



	
	/**
	 * [tMysqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_4", false);
		start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_4";

	
		int tos_count_tMysqlInput_4 = 0;
		
    	class BytesLimit65535_tMysqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_4().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
		    int nb_line_tMysqlInput_4 = 0;
		    java.sql.Connection conn_tMysqlInput_4 = null;
				String driverClass_tMysqlInput_4 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_4);
			   	String dbUser_tMysqlInput_4 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;
		        
				
				String url_tMysqlInput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(url_tMysqlInput_4,dbUser_tMysqlInput_4,dbPwd_tMysqlInput_4);
		        
		    
			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

		    String dbquery_tMysqlInput_4 = "SELECT * FROM datamart.`dimportafolio`;";
			

            	globalMap.put("tMysqlInput_4_QUERY",dbquery_tMysqlInput_4);
		    java.sql.ResultSet rs_tMysqlInput_4 = null;

		    try {
		    	rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
		    	int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

		    String tmpContent_tMysqlInput_4 = null;
		    
		    
		    while (rs_tMysqlInput_4.next()) {
		        nb_line_tMysqlInput_4++;
		        
							if(colQtyInRs_tMysqlInput_4 < 1) {
								portafolio.idPortafolio = null;
							} else {
	                         		
        	portafolio.idPortafolio = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 2) {
								portafolio.nombre = null;
							} else {
	                         		
        	portafolio.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 3) {
								portafolio.descripcion = null;
							} else {
	                         		
        	portafolio.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_4 begin ] stop
 */
	
	/**
	 * [tMysqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 


	tos_count_tMysqlInput_4++;

/**
 * [tMysqlInput_4 main ] stop
 */
	
	/**
	 * [tMysqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolio main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolio";

	

			//portafolio
			//portafolio


			
				if(execStat){
					runStat.updateStatOnConnection("portafolio"+iterateId,1, 1);
				} 
			

		


			   
			   

					portafolioStruct portafolio_HashRow = new portafolioStruct();
		   	   	   
				
				portafolio_HashRow.idPortafolio = portafolio.idPortafolio;
				
				portafolio_HashRow.nombre = portafolio.nombre;
				
				portafolio_HashRow.descripcion = portafolio.descripcion;
				
			tHash_Lookup_portafolio.put(portafolio_HashRow);
			
            




 


	tos_count_tAdvancedHash_portafolio++;

/**
 * [tAdvancedHash_portafolio main ] stop
 */
	
	/**
	 * [tAdvancedHash_portafolio process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolio";

	

 



/**
 * [tAdvancedHash_portafolio process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_portafolio process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolio";

	

 



/**
 * [tAdvancedHash_portafolio process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

	}
}finally{
	if(rs_tMysqlInput_4 !=null){
		rs_tMysqlInput_4.close();
	}
	stmt_tMysqlInput_4.close();
		if(conn_tMysqlInput_4 != null && !conn_tMysqlInput_4.isClosed()) {
			
			conn_tMysqlInput_4.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_4_NB_LINE",nb_line_tMysqlInput_4);
		


 

ok_Hash.put("tMysqlInput_4", true);
end_Hash.put("tMysqlInput_4", System.currentTimeMillis());




/**
 * [tMysqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolio end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolio";

	

tHash_Lookup_portafolio.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("portafolio"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_portafolio", true);
end_Hash.put("tAdvancedHash_portafolio", System.currentTimeMillis());




/**
 * [tAdvancedHash_portafolio end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolio finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolio";

	

 



/**
 * [tAdvancedHash_portafolio finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class contraparteStruct implements routines.system.IPersistableComparableLookupRow<contraparteStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idContraparte;

				public String getIdContraparte () {
					return this.idContraparte;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idContraparte == null) ? 0 : this.idContraparte.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final contraparteStruct other = (contraparteStruct) obj;
		
						if (this.idContraparte == null) {
							if (other.idContraparte != null)
								return false;
						
						} else if (!this.idContraparte.equals(other.idContraparte))
						
							return false;
					

		return true;
    }

	public void copyDataTo(contraparteStruct other) {

		other.idContraparte = this.idContraparte;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(contraparteStruct other) {

		other.idContraparte = this.idContraparte;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idContraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idContraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idContraparte="+idContraparte);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(contraparteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idContraparte, other.idContraparte);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		contraparteStruct contraparte = new contraparteStruct();




	
	/**
	 * [tAdvancedHash_contraparte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_contraparte", false);
		start_Hash.put("tAdvancedHash_contraparte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_contraparte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("contraparte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_contraparte = 0;
		
    	class BytesLimit65535_tAdvancedHash_contraparte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_contraparte().limitLog4jByte();

			   		// connection name:contraparte
			   		// source node:tMysqlInput_8 - inputs:(after_tMysqlInput_9) outputs:(contraparte,contraparte) | target node:tAdvancedHash_contraparte - inputs:(contraparte) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_contraparte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteStruct> tHash_Lookup_contraparte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<contraparteStruct>getLookup(matchingModeEnum_contraparte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_contraparte", tHash_Lookup_contraparte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_contraparte begin ] stop
 */



	
	/**
	 * [tMysqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_8", false);
		start_Hash.put("tMysqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_8";

	
		int tos_count_tMysqlInput_8 = 0;
		
    	class BytesLimit65535_tMysqlInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_8().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_8 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_8.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_8 = calendar_tMysqlInput_8.getTime();
		    int nb_line_tMysqlInput_8 = 0;
		    java.sql.Connection conn_tMysqlInput_8 = null;
				String driverClass_tMysqlInput_8 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_8);
			   	String dbUser_tMysqlInput_8 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_8 = decryptedPassword_tMysqlInput_8;
		        
				
				String url_tMysqlInput_8 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_8 = java.sql.DriverManager.getConnection(url_tMysqlInput_8,dbUser_tMysqlInput_8,dbPwd_tMysqlInput_8);
		        
		    
			java.sql.Statement stmt_tMysqlInput_8 = conn_tMysqlInput_8.createStatement();

		    String dbquery_tMysqlInput_8 = "SELECT * FROM datamart.`dimcontraparte`;";
			

            	globalMap.put("tMysqlInput_8_QUERY",dbquery_tMysqlInput_8);
		    java.sql.ResultSet rs_tMysqlInput_8 = null;

		    try {
		    	rs_tMysqlInput_8 = stmt_tMysqlInput_8.executeQuery(dbquery_tMysqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_8 = rs_tMysqlInput_8.getMetaData();
		    	int colQtyInRs_tMysqlInput_8 = rsmd_tMysqlInput_8.getColumnCount();

		    String tmpContent_tMysqlInput_8 = null;
		    
		    
		    while (rs_tMysqlInput_8.next()) {
		        nb_line_tMysqlInput_8++;
		        
							if(colQtyInRs_tMysqlInput_8 < 1) {
								contraparte.idContraparte = null;
							} else {
	                         		
        	contraparte.idContraparte = routines.system.JDBCUtil.getString(rs_tMysqlInput_8, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_8 < 2) {
								contraparte.nombre = null;
							} else {
	                         		
        	contraparte.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_8, 2, false);
		                    }
					

 



/**
 * [tMysqlInput_8 begin ] stop
 */
	
	/**
	 * [tMysqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 


	tos_count_tMysqlInput_8++;

/**
 * [tMysqlInput_8 main ] stop
 */
	
	/**
	 * [tMysqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparte";

	

			//contraparte
			//contraparte


			
				if(execStat){
					runStat.updateStatOnConnection("contraparte"+iterateId,1, 1);
				} 
			

		


			   
			   

					contraparteStruct contraparte_HashRow = new contraparteStruct();
		   	   	   
				
				contraparte_HashRow.idContraparte = contraparte.idContraparte;
				
				contraparte_HashRow.nombre = contraparte.nombre;
				
			tHash_Lookup_contraparte.put(contraparte_HashRow);
			
            




 


	tos_count_tAdvancedHash_contraparte++;

/**
 * [tAdvancedHash_contraparte main ] stop
 */
	
	/**
	 * [tAdvancedHash_contraparte process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparte";

	

 



/**
 * [tAdvancedHash_contraparte process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_contraparte process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparte";

	

 



/**
 * [tAdvancedHash_contraparte process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

	}
}finally{
	if(rs_tMysqlInput_8 !=null){
		rs_tMysqlInput_8.close();
	}
	stmt_tMysqlInput_8.close();
		if(conn_tMysqlInput_8 != null && !conn_tMysqlInput_8.isClosed()) {
			
			conn_tMysqlInput_8.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_8_NB_LINE",nb_line_tMysqlInput_8);
		


 

ok_Hash.put("tMysqlInput_8", true);
end_Hash.put("tMysqlInput_8", System.currentTimeMillis());




/**
 * [tMysqlInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparte";

	

tHash_Lookup_contraparte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("contraparte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_contraparte", true);
end_Hash.put("tAdvancedHash_contraparte", System.currentTimeMillis());




/**
 * [tAdvancedHash_contraparte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparte";

	

 



/**
 * [tAdvancedHash_contraparte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class traderStruct implements routines.system.IPersistableComparableLookupRow<traderStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String apellido;

				public String getApellido () {
					return this.apellido;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idTrader == null) ? 0 : this.idTrader.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final traderStruct other = (traderStruct) obj;
		
						if (this.idTrader == null) {
							if (other.idTrader != null)
								return false;
						
						} else if (!this.idTrader.equals(other.idTrader))
						
							return false;
					

		return true;
    }

	public void copyDataTo(traderStruct other) {

		other.idTrader = this.idTrader;
	            other.nombre = this.nombre;
	            other.apellido = this.apellido;
	            
	}

	public void copyKeysDataTo(traderStruct other) {

		other.idTrader = this.idTrader;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idTrader = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idTrader,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.apellido = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.apellido, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idTrader="+idTrader);
		sb.append(",nombre="+nombre);
		sb.append(",apellido="+apellido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(traderStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idTrader, other.idTrader);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		traderStruct trader = new traderStruct();




	
	/**
	 * [tAdvancedHash_trader begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_trader", false);
		start_Hash.put("tAdvancedHash_trader", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_trader";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("trader" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_trader = 0;
		
    	class BytesLimit65535_tAdvancedHash_trader{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_trader().limitLog4jByte();

			   		// connection name:trader
			   		// source node:tMysqlInput_2 - inputs:(after_tMysqlInput_9) outputs:(trader,trader) | target node:tAdvancedHash_trader - inputs:(trader) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_trader = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderStruct> tHash_Lookup_trader =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<traderStruct>getLookup(matchingModeEnum_trader);
	   						   
		   	   	   globalMap.put("tHash_Lookup_trader", tHash_Lookup_trader);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_trader begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
    	class BytesLimit65535_tMysqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_2);
			   	String dbUser_tMysqlInput_2 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
		        
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT * FROM datamart.`dimtrader`;";
			

            	globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);
		    java.sql.ResultSet rs_tMysqlInput_2 = null;

		    try {
		    	rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    	int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								trader.idTrader = null;
							} else {
	                         		
        	trader.idTrader = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 2) {
								trader.nombre = null;
							} else {
	                         		
        	trader.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 3) {
								trader.apellido = null;
							} else {
	                         		
        	trader.apellido = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */
	
	/**
	 * [tMysqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_trader main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_trader";

	

			//trader
			//trader


			
				if(execStat){
					runStat.updateStatOnConnection("trader"+iterateId,1, 1);
				} 
			

		


			   
			   

					traderStruct trader_HashRow = new traderStruct();
		   	   	   
				
				trader_HashRow.idTrader = trader.idTrader;
				
				trader_HashRow.nombre = trader.nombre;
				
				trader_HashRow.apellido = trader.apellido;
				
			tHash_Lookup_trader.put(trader_HashRow);
			
            




 


	tos_count_tAdvancedHash_trader++;

/**
 * [tAdvancedHash_trader main ] stop
 */
	
	/**
	 * [tAdvancedHash_trader process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_trader";

	

 



/**
 * [tAdvancedHash_trader process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_trader process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_trader";

	

 



/**
 * [tAdvancedHash_trader process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if(rs_tMysqlInput_2 !=null){
		rs_tMysqlInput_2.close();
	}
	stmt_tMysqlInput_2.close();
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_trader end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_trader";

	

tHash_Lookup_trader.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("trader"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_trader", true);
end_Hash.put("tAdvancedHash_trader", System.currentTimeMillis());




/**
 * [tAdvancedHash_trader end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_trader finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_trader";

	

 



/**
 * [tAdvancedHash_trader finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class sistemaStruct implements routines.system.IPersistableComparableLookupRow<sistemaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idSistema;

				public String getIdSistema () {
					return this.idSistema;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idSistema == null) ? 0 : this.idSistema.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sistemaStruct other = (sistemaStruct) obj;
		
						if (this.idSistema == null) {
							if (other.idSistema != null)
								return false;
						
						} else if (!this.idSistema.equals(other.idSistema))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sistemaStruct other) {

		other.idSistema = this.idSistema;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(sistemaStruct other) {

		other.idSistema = this.idSistema;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idSistema = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idSistema,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idSistema="+idSistema);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sistemaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idSistema, other.idSistema);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		sistemaStruct sistema = new sistemaStruct();




	
	/**
	 * [tAdvancedHash_sistema begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sistema", false);
		start_Hash.put("tAdvancedHash_sistema", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sistema";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("sistema" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_sistema = 0;
		
    	class BytesLimit65535_tAdvancedHash_sistema{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_sistema().limitLog4jByte();

			   		// connection name:sistema
			   		// source node:tMysqlInput_6 - inputs:(after_tMysqlInput_9) outputs:(sistema,sistema) | target node:tAdvancedHash_sistema - inputs:(sistema) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sistema = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaStruct> tHash_Lookup_sistema =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sistemaStruct>getLookup(matchingModeEnum_sistema);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sistema", tHash_Lookup_sistema);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sistema begin ] stop
 */



	
	/**
	 * [tMysqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_6", false);
		start_Hash.put("tMysqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_6";

	
		int tos_count_tMysqlInput_6 = 0;
		
    	class BytesLimit65535_tMysqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_6().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6.getTime();
		    int nb_line_tMysqlInput_6 = 0;
		    java.sql.Connection conn_tMysqlInput_6 = null;
				String driverClass_tMysqlInput_6 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_6);
			   	String dbUser_tMysqlInput_6 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;
		        
				
				String url_tMysqlInput_6 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(url_tMysqlInput_6,dbUser_tMysqlInput_6,dbPwd_tMysqlInput_6);
		        
		    
			java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6.createStatement();

		    String dbquery_tMysqlInput_6 = "SELECT * FROM datamart.`dimsistema`;";
			

            	globalMap.put("tMysqlInput_6_QUERY",dbquery_tMysqlInput_6);
		    java.sql.ResultSet rs_tMysqlInput_6 = null;

		    try {
		    	rs_tMysqlInput_6 = stmt_tMysqlInput_6.executeQuery(dbquery_tMysqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6.getMetaData();
		    	int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6.getColumnCount();

		    String tmpContent_tMysqlInput_6 = null;
		    
		    
		    while (rs_tMysqlInput_6.next()) {
		        nb_line_tMysqlInput_6++;
		        
							if(colQtyInRs_tMysqlInput_6 < 1) {
								sistema.idSistema = null;
							} else {
	                         		
        	sistema.idSistema = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 2) {
								sistema.nombre = null;
							} else {
	                         		
        	sistema.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 3) {
								sistema.descripcion = null;
							} else {
	                         		
        	sistema.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_6 begin ] stop
 */
	
	/**
	 * [tMysqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 


	tos_count_tMysqlInput_6++;

/**
 * [tMysqlInput_6 main ] stop
 */
	
	/**
	 * [tMysqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_sistema main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistema";

	

			//sistema
			//sistema


			
				if(execStat){
					runStat.updateStatOnConnection("sistema"+iterateId,1, 1);
				} 
			

		


			   
			   

					sistemaStruct sistema_HashRow = new sistemaStruct();
		   	   	   
				
				sistema_HashRow.idSistema = sistema.idSistema;
				
				sistema_HashRow.nombre = sistema.nombre;
				
				sistema_HashRow.descripcion = sistema.descripcion;
				
			tHash_Lookup_sistema.put(sistema_HashRow);
			
            




 


	tos_count_tAdvancedHash_sistema++;

/**
 * [tAdvancedHash_sistema main ] stop
 */
	
	/**
	 * [tAdvancedHash_sistema process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistema";

	

 



/**
 * [tAdvancedHash_sistema process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sistema process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistema";

	

 



/**
 * [tAdvancedHash_sistema process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

	}
}finally{
	if(rs_tMysqlInput_6 !=null){
		rs_tMysqlInput_6.close();
	}
	stmt_tMysqlInput_6.close();
		if(conn_tMysqlInput_6 != null && !conn_tMysqlInput_6.isClosed()) {
			
			conn_tMysqlInput_6.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_6_NB_LINE",nb_line_tMysqlInput_6);
		


 

ok_Hash.put("tMysqlInput_6", true);
end_Hash.put("tMysqlInput_6", System.currentTimeMillis());




/**
 * [tMysqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sistema end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistema";

	

tHash_Lookup_sistema.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("sistema"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_sistema", true);
end_Hash.put("tAdvancedHash_sistema", System.currentTimeMillis());




/**
 * [tAdvancedHash_sistema end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sistema finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistema";

	

 



/**
 * [tAdvancedHash_sistema finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class productoStruct implements routines.system.IPersistableComparableLookupRow<productoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String tipo_operacion;

				public String getTipo_operacion () {
					return this.tipo_operacion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idProducto == null) ? 0 : this.idProducto.hashCode());
					
						result = prime * result + ((this.tipo_operacion == null) ? 0 : this.tipo_operacion.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final productoStruct other = (productoStruct) obj;
		
						if (this.idProducto == null) {
							if (other.idProducto != null)
								return false;
						
						} else if (!this.idProducto.equals(other.idProducto))
						
							return false;
					
						if (this.tipo_operacion == null) {
							if (other.tipo_operacion != null)
								return false;
						
						} else if (!this.tipo_operacion.equals(other.tipo_operacion))
						
							return false;
					

		return true;
    }

	public void copyDataTo(productoStruct other) {

		other.idProducto = this.idProducto;
	            other.nombre = this.nombre;
	            other.tipo_operacion = this.tipo_operacion;
	            
	}

	public void copyKeysDataTo(productoStruct other) {

		other.idProducto = this.idProducto;
	            	other.tipo_operacion = this.tipo_operacion;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idProducto = readString(dis);
					
					this.tipo_operacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.tipo_operacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idProducto="+idProducto);
		sb.append(",nombre="+nombre);
		sb.append(",tipo_operacion="+tipo_operacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(productoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idProducto, other.idProducto);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tipo_operacion, other.tipo_operacion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		productoStruct producto = new productoStruct();




	
	/**
	 * [tAdvancedHash_producto begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_producto", false);
		start_Hash.put("tAdvancedHash_producto", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_producto";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("producto" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_producto = 0;
		
    	class BytesLimit65535_tAdvancedHash_producto{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_producto().limitLog4jByte();

			   		// connection name:producto
			   		// source node:tMysqlInput_3 - inputs:(after_tMysqlInput_9) outputs:(producto,producto) | target node:tAdvancedHash_producto - inputs:(producto) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_producto = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoStruct> tHash_Lookup_producto =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<productoStruct>getLookup(matchingModeEnum_producto);
	   						   
		   	   	   globalMap.put("tHash_Lookup_producto", tHash_Lookup_producto);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_producto begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
    	class BytesLimit65535_tMysqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_3);
			   	String dbUser_tMysqlInput_3 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
		        
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "SELECT * FROM datamart.`dimproducto`;";
			

            	globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);
		    java.sql.ResultSet rs_tMysqlInput_3 = null;

		    try {
		    	rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    	int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								producto.idProducto = null;
							} else {
	                         		
        	producto.idProducto = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								producto.nombre = null;
							} else {
	                         		
        	producto.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 3) {
								producto.tipo_operacion = null;
							} else {
	                         		
        	producto.tipo_operacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */
	
	/**
	 * [tMysqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_producto main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_producto";

	

			//producto
			//producto


			
				if(execStat){
					runStat.updateStatOnConnection("producto"+iterateId,1, 1);
				} 
			

		


			   
			   

					productoStruct producto_HashRow = new productoStruct();
		   	   	   
				
				producto_HashRow.idProducto = producto.idProducto;
				
				producto_HashRow.nombre = producto.nombre;
				
				producto_HashRow.tipo_operacion = producto.tipo_operacion;
				
			tHash_Lookup_producto.put(producto_HashRow);
			
            




 


	tos_count_tAdvancedHash_producto++;

/**
 * [tAdvancedHash_producto main ] stop
 */
	
	/**
	 * [tAdvancedHash_producto process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_producto";

	

 



/**
 * [tAdvancedHash_producto process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_producto process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_producto";

	

 



/**
 * [tAdvancedHash_producto process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if(rs_tMysqlInput_3 !=null){
		rs_tMysqlInput_3.close();
	}
	stmt_tMysqlInput_3.close();
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_producto end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_producto";

	

tHash_Lookup_producto.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("producto"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_producto", true);
end_Hash.put("tAdvancedHash_producto", System.currentTimeMillis());




/**
 * [tAdvancedHash_producto end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_producto finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_producto";

	

 



/**
 * [tAdvancedHash_producto finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class monedaStruct implements routines.system.IPersistableComparableLookupRow<monedaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idmoneda;

				public String getIdmoneda () {
					return this.idmoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idmoneda == null) ? 0 : this.idmoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final monedaStruct other = (monedaStruct) obj;
		
						if (this.idmoneda == null) {
							if (other.idmoneda != null)
								return false;
						
						} else if (!this.idmoneda.equals(other.idmoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(monedaStruct other) {

		other.idmoneda = this.idmoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(monedaStruct other) {

		other.idmoneda = this.idmoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idmoneda = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idmoneda,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idmoneda="+idmoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(monedaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idmoneda, other.idmoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		monedaStruct moneda = new monedaStruct();




	
	/**
	 * [tAdvancedHash_moneda begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_moneda", false);
		start_Hash.put("tAdvancedHash_moneda", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_moneda";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("moneda" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_moneda = 0;
		
    	class BytesLimit65535_tAdvancedHash_moneda{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_moneda().limitLog4jByte();

			   		// connection name:moneda
			   		// source node:tMysqlInput_5 - inputs:(after_tMysqlInput_9) outputs:(moneda,moneda) | target node:tAdvancedHash_moneda - inputs:(moneda) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_moneda = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaStruct> tHash_Lookup_moneda =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<monedaStruct>getLookup(matchingModeEnum_moneda);
	   						   
		   	   	   globalMap.put("tHash_Lookup_moneda", tHash_Lookup_moneda);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_moneda begin ] stop
 */



	
	/**
	 * [tMysqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_5", false);
		start_Hash.put("tMysqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_5";

	
		int tos_count_tMysqlInput_5 = 0;
		
    	class BytesLimit65535_tMysqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_5().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5.getTime();
		    int nb_line_tMysqlInput_5 = 0;
		    java.sql.Connection conn_tMysqlInput_5 = null;
				String driverClass_tMysqlInput_5 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_5);
			   	String dbUser_tMysqlInput_5 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;
		        
				
				String url_tMysqlInput_5 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(url_tMysqlInput_5,dbUser_tMysqlInput_5,dbPwd_tMysqlInput_5);
		        
		    
			java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5.createStatement();

		    String dbquery_tMysqlInput_5 = "SELECT * FROM datamart.`diminfomoneda`;";
			

            	globalMap.put("tMysqlInput_5_QUERY",dbquery_tMysqlInput_5);
		    java.sql.ResultSet rs_tMysqlInput_5 = null;

		    try {
		    	rs_tMysqlInput_5 = stmt_tMysqlInput_5.executeQuery(dbquery_tMysqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5.getMetaData();
		    	int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5.getColumnCount();

		    String tmpContent_tMysqlInput_5 = null;
		    
		    
		    while (rs_tMysqlInput_5.next()) {
		        nb_line_tMysqlInput_5++;
		        
							if(colQtyInRs_tMysqlInput_5 < 1) {
								moneda.idmoneda = null;
							} else {
	                         		
        	moneda.idmoneda = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 2) {
								moneda.nombre = null;
							} else {
	                         		
        	moneda.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_5 < 3) {
								moneda.descripcion = null;
							} else {
	                         		
        	moneda.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_5 begin ] stop
 */
	
	/**
	 * [tMysqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 


	tos_count_tMysqlInput_5++;

/**
 * [tMysqlInput_5 main ] stop
 */
	
	/**
	 * [tMysqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda";

	

			//moneda
			//moneda


			
				if(execStat){
					runStat.updateStatOnConnection("moneda"+iterateId,1, 1);
				} 
			

		


			   
			   

					monedaStruct moneda_HashRow = new monedaStruct();
		   	   	   
				
				moneda_HashRow.idmoneda = moneda.idmoneda;
				
				moneda_HashRow.nombre = moneda.nombre;
				
				moneda_HashRow.descripcion = moneda.descripcion;
				
			tHash_Lookup_moneda.put(moneda_HashRow);
			
            




 


	tos_count_tAdvancedHash_moneda++;

/**
 * [tAdvancedHash_moneda main ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda";

	

 



/**
 * [tAdvancedHash_moneda process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda";

	

 



/**
 * [tAdvancedHash_moneda process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

	}
}finally{
	if(rs_tMysqlInput_5 !=null){
		rs_tMysqlInput_5.close();
	}
	stmt_tMysqlInput_5.close();
		if(conn_tMysqlInput_5 != null && !conn_tMysqlInput_5.isClosed()) {
			
			conn_tMysqlInput_5.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_5_NB_LINE",nb_line_tMysqlInput_5);
		


 

ok_Hash.put("tMysqlInput_5", true);
end_Hash.put("tMysqlInput_5", System.currentTimeMillis());




/**
 * [tMysqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda";

	

tHash_Lookup_moneda.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("moneda"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_moneda", true);
end_Hash.put("tAdvancedHash_moneda", System.currentTimeMillis());




/**
 * [tAdvancedHash_moneda end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda";

	

 



/**
 * [tAdvancedHash_moneda finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class moneda2Struct implements routines.system.IPersistableComparableLookupRow<moneda2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idmoneda;

				public String getIdmoneda () {
					return this.idmoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idmoneda == null) ? 0 : this.idmoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final moneda2Struct other = (moneda2Struct) obj;
		
						if (this.idmoneda == null) {
							if (other.idmoneda != null)
								return false;
						
						} else if (!this.idmoneda.equals(other.idmoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(moneda2Struct other) {

		other.idmoneda = this.idmoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(moneda2Struct other) {

		other.idmoneda = this.idmoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idmoneda = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idmoneda,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idmoneda="+idmoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(moneda2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idmoneda, other.idmoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		moneda2Struct moneda2 = new moneda2Struct();




	
	/**
	 * [tAdvancedHash_moneda2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_moneda2", false);
		start_Hash.put("tAdvancedHash_moneda2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_moneda2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("moneda2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_moneda2 = 0;
		
    	class BytesLimit65535_tAdvancedHash_moneda2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_moneda2().limitLog4jByte();

			   		// connection name:moneda2
			   		// source node:tMysqlInput_10 - inputs:(after_tMysqlInput_9) outputs:(moneda2,moneda2) | target node:tAdvancedHash_moneda2 - inputs:(moneda2) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_moneda2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2Struct> tHash_Lookup_moneda2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<moneda2Struct>getLookup(matchingModeEnum_moneda2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_moneda2", tHash_Lookup_moneda2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_moneda2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_10", false);
		start_Hash.put("tMysqlInput_10", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_10";

	
		int tos_count_tMysqlInput_10 = 0;
		
    	class BytesLimit65535_tMysqlInput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_10().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_10 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_10.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_10 = calendar_tMysqlInput_10.getTime();
		    int nb_line_tMysqlInput_10 = 0;
		    java.sql.Connection conn_tMysqlInput_10 = null;
				String driverClass_tMysqlInput_10 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_10);
			   	String dbUser_tMysqlInput_10 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_10 = decryptedPassword_tMysqlInput_10;
		        
				
				String url_tMysqlInput_10 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_10 = java.sql.DriverManager.getConnection(url_tMysqlInput_10,dbUser_tMysqlInput_10,dbPwd_tMysqlInput_10);
		        
		    
			java.sql.Statement stmt_tMysqlInput_10 = conn_tMysqlInput_10.createStatement();

		    String dbquery_tMysqlInput_10 = "SELECT * FROM datamart.`diminfomoneda`;";
			

            	globalMap.put("tMysqlInput_10_QUERY",dbquery_tMysqlInput_10);
		    java.sql.ResultSet rs_tMysqlInput_10 = null;

		    try {
		    	rs_tMysqlInput_10 = stmt_tMysqlInput_10.executeQuery(dbquery_tMysqlInput_10);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_10 = rs_tMysqlInput_10.getMetaData();
		    	int colQtyInRs_tMysqlInput_10 = rsmd_tMysqlInput_10.getColumnCount();

		    String tmpContent_tMysqlInput_10 = null;
		    
		    
		    while (rs_tMysqlInput_10.next()) {
		        nb_line_tMysqlInput_10++;
		        
							if(colQtyInRs_tMysqlInput_10 < 1) {
								moneda2.idmoneda = null;
							} else {
	                         		
        	moneda2.idmoneda = routines.system.JDBCUtil.getString(rs_tMysqlInput_10, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_10 < 2) {
								moneda2.nombre = null;
							} else {
	                         		
        	moneda2.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_10, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_10 < 3) {
								moneda2.descripcion = null;
							} else {
	                         		
        	moneda2.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_10, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_10 begin ] stop
 */
	
	/**
	 * [tMysqlInput_10 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_10";

	

 


	tos_count_tMysqlInput_10++;

/**
 * [tMysqlInput_10 main ] stop
 */
	
	/**
	 * [tMysqlInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_10";

	

 



/**
 * [tMysqlInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2";

	

			//moneda2
			//moneda2


			
				if(execStat){
					runStat.updateStatOnConnection("moneda2"+iterateId,1, 1);
				} 
			

		


			   
			   

					moneda2Struct moneda2_HashRow = new moneda2Struct();
		   	   	   
				
				moneda2_HashRow.idmoneda = moneda2.idmoneda;
				
				moneda2_HashRow.nombre = moneda2.nombre;
				
				moneda2_HashRow.descripcion = moneda2.descripcion;
				
			tHash_Lookup_moneda2.put(moneda2_HashRow);
			
            




 


	tos_count_tAdvancedHash_moneda2++;

/**
 * [tAdvancedHash_moneda2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2";

	

 



/**
 * [tAdvancedHash_moneda2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2";

	

 



/**
 * [tAdvancedHash_moneda2 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_10";

	

 



/**
 * [tMysqlInput_10 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_10 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_10";

	

	}
}finally{
	if(rs_tMysqlInput_10 !=null){
		rs_tMysqlInput_10.close();
	}
	stmt_tMysqlInput_10.close();
		if(conn_tMysqlInput_10 != null && !conn_tMysqlInput_10.isClosed()) {
			
			conn_tMysqlInput_10.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_10_NB_LINE",nb_line_tMysqlInput_10);
		


 

ok_Hash.put("tMysqlInput_10", true);
end_Hash.put("tMysqlInput_10", System.currentTimeMillis());




/**
 * [tMysqlInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2";

	

tHash_Lookup_moneda2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("moneda2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_moneda2", true);
end_Hash.put("tAdvancedHash_moneda2", System.currentTimeMillis());




/**
 * [tAdvancedHash_moneda2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_10 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_10";

	

 



/**
 * [tMysqlInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2";

	

 



/**
 * [tAdvancedHash_moneda2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class fecha_cargaStruct implements routines.system.IPersistableComparableLookupRow<fecha_cargaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_fact = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_fact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idfecha;

				public String getIdfecha () {
					return this.idfecha;
				}
				
			    public String anio;

				public String getAnio () {
					return this.anio;
				}
				
			    public String mes;

				public String getMes () {
					return this.mes;
				}
				
			    public String dia;

				public String getDia () {
					return this.dia;
				}
				
			    public String nombre_mes;

				public String getNombre_mes () {
					return this.nombre_mes;
				}
				
			    public String nombre_dia;

				public String getNombre_dia () {
					return this.nombre_dia;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idfecha == null) ? 0 : this.idfecha.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final fecha_cargaStruct other = (fecha_cargaStruct) obj;
		
						if (this.idfecha == null) {
							if (other.idfecha != null)
								return false;
						
						} else if (!this.idfecha.equals(other.idfecha))
						
							return false;
					

		return true;
    }

	public void copyDataTo(fecha_cargaStruct other) {

		other.idfecha = this.idfecha;
	            other.anio = this.anio;
	            other.mes = this.mes;
	            other.dia = this.dia;
	            other.nombre_mes = this.nombre_mes;
	            other.nombre_dia = this.nombre_dia;
	            
	}

	public void copyKeysDataTo(fecha_cargaStruct other) {

		other.idfecha = this.idfecha;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_fact.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_fact.length == 0) {
   					commonByteArray_COMPLETO_Create_fact = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_fact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_fact, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_fact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_fact) {

        	try {

        		int length = 0;
		
					this.idfecha = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idfecha,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.anio = readString(dis,ois);
					
						this.mes = readString(dis,ois);
					
						this.dia = readString(dis,ois);
					
						this.nombre_mes = readString(dis,ois);
					
						this.nombre_dia = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.anio, dos, oos);
					
						writeString(this.mes, dos, oos);
					
						writeString(this.dia, dos, oos);
					
						writeString(this.nombre_mes, dos, oos);
					
						writeString(this.nombre_dia, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idfecha="+idfecha);
		sb.append(",anio="+anio);
		sb.append(",mes="+mes);
		sb.append(",dia="+dia);
		sb.append(",nombre_mes="+nombre_mes);
		sb.append(",nombre_dia="+nombre_dia);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fecha_cargaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idfecha, other.idfecha);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		fecha_cargaStruct fecha_carga = new fecha_cargaStruct();




	
	/**
	 * [tAdvancedHash_fecha_carga begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_fecha_carga", false);
		start_Hash.put("tAdvancedHash_fecha_carga", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_fecha_carga";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("fecha_carga" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_fecha_carga = 0;
		
    	class BytesLimit65535_tAdvancedHash_fecha_carga{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_fecha_carga().limitLog4jByte();

			   		// connection name:fecha_carga
			   		// source node:tMysqlInput_7 - inputs:(after_tMysqlInput_9) outputs:(fecha_carga,fecha_carga) | target node:tAdvancedHash_fecha_carga - inputs:(fecha_carga) outputs:()
			   		// linked node: tMap_1 - inputs:(stage,estado,portafolio,contraparte,trader,sistema,producto,moneda,moneda2,fecha_carga) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fecha_carga = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fecha_cargaStruct> tHash_Lookup_fecha_carga =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<fecha_cargaStruct>getLookup(matchingModeEnum_fecha_carga);
	   						   
		   	   	   globalMap.put("tHash_Lookup_fecha_carga", tHash_Lookup_fecha_carga);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_fecha_carga begin ] stop
 */



	
	/**
	 * [tMysqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_7", false);
		start_Hash.put("tMysqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_7";

	
		int tos_count_tMysqlInput_7 = 0;
		
    	class BytesLimit65535_tMysqlInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_7().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7.getTime();
		    int nb_line_tMysqlInput_7 = 0;
		    java.sql.Connection conn_tMysqlInput_7 = null;
				String driverClass_tMysqlInput_7 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_7);
			   	String dbUser_tMysqlInput_7 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_7 = decryptedPassword_tMysqlInput_7;
		        
				
				String url_tMysqlInput_7 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(url_tMysqlInput_7,dbUser_tMysqlInput_7,dbPwd_tMysqlInput_7);
		        
		    
			java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7.createStatement();

		    String dbquery_tMysqlInput_7 = "SELECT * FROM datamart.`dimfecha`;";
			

            	globalMap.put("tMysqlInput_7_QUERY",dbquery_tMysqlInput_7);
		    java.sql.ResultSet rs_tMysqlInput_7 = null;

		    try {
		    	rs_tMysqlInput_7 = stmt_tMysqlInput_7.executeQuery(dbquery_tMysqlInput_7);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7.getMetaData();
		    	int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7.getColumnCount();

		    String tmpContent_tMysqlInput_7 = null;
		    
		    
		    while (rs_tMysqlInput_7.next()) {
		        nb_line_tMysqlInput_7++;
		        
							if(colQtyInRs_tMysqlInput_7 < 1) {
								fecha_carga.idfecha = null;
							} else {
	                         		
        	fecha_carga.idfecha = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 2) {
								fecha_carga.anio = null;
							} else {
	                         		
        	fecha_carga.anio = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 3) {
								fecha_carga.mes = null;
							} else {
	                         		
        	fecha_carga.mes = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 4) {
								fecha_carga.dia = null;
							} else {
	                         		
        	fecha_carga.dia = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 5) {
								fecha_carga.nombre_mes = null;
							} else {
	                         		
        	fecha_carga.nombre_mes = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 6) {
								fecha_carga.nombre_dia = null;
							} else {
	                         		
        	fecha_carga.nombre_dia = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 6, false);
		                    }
					

 



/**
 * [tMysqlInput_7 begin ] stop
 */
	
	/**
	 * [tMysqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 


	tos_count_tMysqlInput_7++;

/**
 * [tMysqlInput_7 main ] stop
 */
	
	/**
	 * [tMysqlInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_fecha_carga main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fecha_carga";

	

			//fecha_carga
			//fecha_carga


			
				if(execStat){
					runStat.updateStatOnConnection("fecha_carga"+iterateId,1, 1);
				} 
			

		


			   
			   

					fecha_cargaStruct fecha_carga_HashRow = new fecha_cargaStruct();
		   	   	   
				
				fecha_carga_HashRow.idfecha = fecha_carga.idfecha;
				
				fecha_carga_HashRow.anio = fecha_carga.anio;
				
				fecha_carga_HashRow.mes = fecha_carga.mes;
				
				fecha_carga_HashRow.dia = fecha_carga.dia;
				
				fecha_carga_HashRow.nombre_mes = fecha_carga.nombre_mes;
				
				fecha_carga_HashRow.nombre_dia = fecha_carga.nombre_dia;
				
			tHash_Lookup_fecha_carga.put(fecha_carga_HashRow);
			
            




 


	tos_count_tAdvancedHash_fecha_carga++;

/**
 * [tAdvancedHash_fecha_carga main ] stop
 */
	
	/**
	 * [tAdvancedHash_fecha_carga process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fecha_carga";

	

 



/**
 * [tAdvancedHash_fecha_carga process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_fecha_carga process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fecha_carga";

	

 



/**
 * [tAdvancedHash_fecha_carga process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

	}
}finally{
	if(rs_tMysqlInput_7 !=null){
		rs_tMysqlInput_7.close();
	}
	stmt_tMysqlInput_7.close();
		if(conn_tMysqlInput_7 != null && !conn_tMysqlInput_7.isClosed()) {
			
			conn_tMysqlInput_7.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_7_NB_LINE",nb_line_tMysqlInput_7);
		


 

ok_Hash.put("tMysqlInput_7", true);
end_Hash.put("tMysqlInput_7", System.currentTimeMillis());




/**
 * [tMysqlInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_fecha_carga end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fecha_carga";

	

tHash_Lookup_fecha_carga.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("fecha_carga"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_fecha_carga", true);
end_Hash.put("tAdvancedHash_fecha_carga", System.currentTimeMillis());




/**
 * [tAdvancedHash_fecha_carga end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_fecha_carga finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fecha_carga";

	

 



/**
 * [tAdvancedHash_fecha_carga finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Create_fact Create_factClass = new Create_fact();

        int exitCode = Create_factClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Create_fact.class.getClassLoader().getResourceAsStream("completo/create_fact_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Create_fact.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_9) {
globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", -1);

e_tMysqlInput_9.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Create_fact");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     265160 characters generated by Talend Open Studio for Data Integration 
 *     on the 9 de mayo de 2018 02:48:32 AM COT
 ************************************************************************************************/