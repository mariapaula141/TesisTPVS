// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package completo.etl_spot_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ETL_Spot Purpose: Carga de archivo Spot-Forward<br>
 * Description: En este trabajo se carga el archivo correspondiente validando los formatos y condiciones de aceptaci√≥n del mismo <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ETL_Spot implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(file != null){
				
					this.setProperty("file", file.toString());
				
			}
			
		}

public String file;
public String getFile(){
	return this.file;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ETL_Spot";
	private final String projectName = "COMPLETO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL_Spot.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL_Spot.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class out1StageStruct implements routines.system.IPersistableRow<out1StageStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1StageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outP_LStruct implements routines.system.IPersistableRow<outP_LStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outP_LStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1FechasStringStruct implements routines.system.IPersistableRow<out1FechasStringStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1FechasStringStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Columnas_limpiasStruct implements routines.system.IPersistableRow<Columnas_limpiasStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public java.util.Date fecha_pago;

				public java.util.Date getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readDate(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+String.valueOf(fecha_pago));
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Columnas_limpiasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];

	
			    public String TIMESTAMP;

				public String getTIMESTAMP () {
					return this.TIMESTAMP;
				}
				
			    public String M_IDENTITY;

				public String getM_IDENTITY () {
					return this.M_IDENTITY;
				}
				
			    public String M_PLIRDCUR1;

				public String getM_PLIRDCUR1 () {
					return this.M_PLIRDCUR1;
				}
				
			    public Integer M_CNT_EVT;

				public Integer getM_CNT_EVT () {
					return this.M_CNT_EVT;
				}
				
			    public Double M_TP_NOMINAL;

				public Double getM_TP_NOMINAL () {
					return this.M_TP_NOMINAL;
				}
				
			    public String M_NB;

				public String getM_NB () {
					return this.M_NB;
				}
				
			    public String M_REF_DATA;

				public String getM_REF_DATA () {
					return this.M_REF_DATA;
				}
				
			    public String M_MX_REF_JOB;

				public String getM_MX_REF_JOB () {
					return this.M_MX_REF_JOB;
				}
				
			    public String M_TP_FXUND;

				public String getM_TP_FXUND () {
					return this.M_TP_FXUND;
				}
				
			    public String M_TP_GID;

				public String getM_TP_GID () {
					return this.M_TP_GID;
				}
				
			    public String M_TP_NOMCUR;

				public String getM_TP_NOMCUR () {
					return this.M_TP_NOMCUR;
				}
				
			    public String M_FOPIPORTF;

				public String getM_FOPIPORTF () {
					return this.M_FOPIPORTF;
				}
				
			    public String M_TP_DTEEXP;

				public String getM_TP_DTEEXP () {
					return this.M_TP_DTEEXP;
				}
				
			    public java.util.Date M_TP_PAY;

				public java.util.Date getM_TP_PAY () {
					return this.M_TP_PAY;
				}
				
			    public String M_TP_DTEEXPC;

				public String getM_TP_DTEEXPC () {
					return this.M_TP_DTEEXPC;
				}
				
			    public String M_TP_CNTRP;

				public String getM_TP_CNTRP () {
					return this.M_TP_CNTRP;
				}
				
			    public String M_TP_ROOTCNT;

				public String getM_TP_ROOTCNT () {
					return this.M_TP_ROOTCNT;
				}
				
			    public String M_TP_FXBASE;

				public String getM_TP_FXBASE () {
					return this.M_TP_FXBASE;
				}
				
			    public String M_STP_STATUS;

				public String getM_STP_STATUS () {
					return this.M_STP_STATUS;
				}
				
			    public String M_STP_STA0;

				public String getM_STP_STA0 () {
					return this.M_STP_STA0;
				}
				
			    public String M_TP_STRIKE;

				public String getM_TP_STRIKE () {
					return this.M_TP_STRIKE;
				}
				
			    public String M_TP_STRIKEN;

				public String getM_TP_STRIKEN () {
					return this.M_TP_STRIKEN;
				}
				
			    public String M_TP_AE;

				public String getM_TP_AE () {
					return this.M_TP_AE;
				}
				
			    public String M_TP_STATUS2;

				public String getM_TP_STATUS2 () {
					return this.M_TP_STATUS2;
				}
				
			    public String M_TRN_GRP;

				public String getM_TRN_GRP () {
					return this.M_TRN_GRP;
				}
				
			    public String M_TRN_GTYPE;

				public String getM_TRN_GTYPE () {
					return this.M_TRN_GTYPE;
				}
				
			    public String M_TRN_TYPE;

				public String getM_TRN_TYPE () {
					return this.M_TRN_TYPE;
				}
				
			    public String M_TP_RTINCC0;

				public String getM_TP_RTINCC0 () {
					return this.M_TP_RTINCC0;
				}
				
			    public String M_TP_RTINCC1;

				public String getM_TP_RTINCC1 () {
					return this.M_TP_RTINCC1;
				}
				
			    public String M_TP_FXCTPFF;

				public String getM_TP_FXCTPFF () {
					return this.M_TP_FXCTPFF;
				}
				
			    public String M_TP_FXCTPNU;

				public String getM_TP_FXCTPNU () {
					return this.M_TP_FXCTPNU;
				}
				
			    public String M_TP_FXPSPT;

				public String getM_TP_FXPSPT () {
					return this.M_TP_FXPSPT;
				}
				
			    public String M_TP_FXCTPDE;

				public String getM_TP_FXCTPDE () {
					return this.M_TP_FXCTPDE;
				}
				
			    public String M_TP_IPAYCUR;

				public String getM_TP_IPAYCUR () {
					return this.M_TP_IPAYCUR;
				}
				
			    public String M_TP_IPAY;

				public String getM_TP_IPAY () {
					return this.M_TP_IPAY;
				}
				
			    public Double M_TP_PRICE;

				public Double getM_TP_PRICE () {
					return this.M_TP_PRICE;
				}
				
			    public String M_C_CUR_PL;

				public String getM_C_CUR_PL () {
					return this.M_C_CUR_PL;
				}
				
			    public String M_PACKAGE;

				public String getM_PACKAGE () {
					return this.M_PACKAGE;
				}
				
			    public String M_CONTRACT;

				public String getM_CONTRACT () {
					return this.M_CONTRACT;
				}
				
			    public String M_TP_INSCUR;

				public String getM_TP_INSCUR () {
					return this.M_TP_INSCUR;
				}
				
			    public String M_TP_DTETRN;

				public String getM_TP_DTETRN () {
					return this.M_TP_DTETRN;
				}
				
			    public String M_TRN_FMLY;

				public String getM_TRN_FMLY () {
					return this.M_TRN_FMLY;
				}
				
			    public String M_TP_DTEPMT;

				public String getM_TP_DTEPMT () {
					return this.M_TP_DTEPMT;
				}
				
			    public String M_TP_DVCS;

				public String getM_TP_DVCS () {
					return this.M_TP_DVCS;
				}
				
			    public String M_TP_MOPLSTL;

				public String getM_TP_MOPLSTL () {
					return this.M_TP_MOPLSTL;
				}
				
			    public String M_TP_MOPLSTD;

				public String getM_TP_MOPLSTD () {
					return this.M_TP_MOPLSTD;
				}
				
			    public java.util.Date M_REP_DATE;

				public java.util.Date getM_REP_DATE () {
					return this.M_REP_DATE;
				}
				
			    public String M_CNT_ORG;

				public String getM_CNT_ORG () {
					return this.M_CNT_ORG;
				}
				
			    public String M_UDF_REF2;

				public String getM_UDF_REF2 () {
					return this.M_UDF_REF2;
				}
				
			    public String M_TP_ACCCPN;

				public String getM_TP_ACCCPN () {
					return this.M_TP_ACCCPN;
				}
				
			    public String M_TP_LQTY2;

				public String getM_TP_LQTY2 () {
					return this.M_TP_LQTY2;
				}
				
			    public String M_CMM_ODNC1;

				public String getM_CMM_ODNC1 () {
					return this.M_CMM_ODNC1;
				}
				
			    public String M_CMM_ODNC0;

				public String getM_CMM_ODNC0 () {
					return this.M_CMM_ODNC0;
				}
				
			    public String M_TP_SECLOT;

				public String getM_TP_SECLOT () {
					return this.M_TP_SECLOT;
				}
				
			    public String M_CNT_TYPO;

				public String getM_CNT_TYPO () {
					return this.M_CNT_TYPO;
				}
				
			    public String M_TP_PFOLIO;

				public String getM_TP_PFOLIO () {
					return this.M_TP_PFOLIO;
				}
				
			    public String M_SCR_MODULE;

				public String getM_SCR_MODULE () {
					return this.M_SCR_MODULE;
				}
				
			    public String M_TP_TRADER;

				public String getM_TP_TRADER () {
					return this.M_TP_TRADER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.TIMESTAMP = readString(dis);
					
					this.M_IDENTITY = readString(dis);
					
					this.M_PLIRDCUR1 = readString(dis);
					
						this.M_CNT_EVT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.M_TP_NOMINAL = null;
           				} else {
           			    	this.M_TP_NOMINAL = dis.readDouble();
           				}
					
					this.M_NB = readString(dis);
					
					this.M_REF_DATA = readString(dis);
					
					this.M_MX_REF_JOB = readString(dis);
					
					this.M_TP_FXUND = readString(dis);
					
					this.M_TP_GID = readString(dis);
					
					this.M_TP_NOMCUR = readString(dis);
					
					this.M_FOPIPORTF = readString(dis);
					
					this.M_TP_DTEEXP = readString(dis);
					
					this.M_TP_PAY = readDate(dis);
					
					this.M_TP_DTEEXPC = readString(dis);
					
					this.M_TP_CNTRP = readString(dis);
					
					this.M_TP_ROOTCNT = readString(dis);
					
					this.M_TP_FXBASE = readString(dis);
					
					this.M_STP_STATUS = readString(dis);
					
					this.M_STP_STA0 = readString(dis);
					
					this.M_TP_STRIKE = readString(dis);
					
					this.M_TP_STRIKEN = readString(dis);
					
					this.M_TP_AE = readString(dis);
					
					this.M_TP_STATUS2 = readString(dis);
					
					this.M_TRN_GRP = readString(dis);
					
					this.M_TRN_GTYPE = readString(dis);
					
					this.M_TRN_TYPE = readString(dis);
					
					this.M_TP_RTINCC0 = readString(dis);
					
					this.M_TP_RTINCC1 = readString(dis);
					
					this.M_TP_FXCTPFF = readString(dis);
					
					this.M_TP_FXCTPNU = readString(dis);
					
					this.M_TP_FXPSPT = readString(dis);
					
					this.M_TP_FXCTPDE = readString(dis);
					
					this.M_TP_IPAYCUR = readString(dis);
					
					this.M_TP_IPAY = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.M_TP_PRICE = null;
           				} else {
           			    	this.M_TP_PRICE = dis.readDouble();
           				}
					
					this.M_C_CUR_PL = readString(dis);
					
					this.M_PACKAGE = readString(dis);
					
					this.M_CONTRACT = readString(dis);
					
					this.M_TP_INSCUR = readString(dis);
					
					this.M_TP_DTETRN = readString(dis);
					
					this.M_TRN_FMLY = readString(dis);
					
					this.M_TP_DTEPMT = readString(dis);
					
					this.M_TP_DVCS = readString(dis);
					
					this.M_TP_MOPLSTL = readString(dis);
					
					this.M_TP_MOPLSTD = readString(dis);
					
					this.M_REP_DATE = readDate(dis);
					
					this.M_CNT_ORG = readString(dis);
					
					this.M_UDF_REF2 = readString(dis);
					
					this.M_TP_ACCCPN = readString(dis);
					
					this.M_TP_LQTY2 = readString(dis);
					
					this.M_CMM_ODNC1 = readString(dis);
					
					this.M_CMM_ODNC0 = readString(dis);
					
					this.M_TP_SECLOT = readString(dis);
					
					this.M_CNT_TYPO = readString(dis);
					
					this.M_TP_PFOLIO = readString(dis);
					
					this.M_SCR_MODULE = readString(dis);
					
					this.M_TP_TRADER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIMESTAMP,dos);
					
					// String
				
						writeString(this.M_IDENTITY,dos);
					
					// String
				
						writeString(this.M_PLIRDCUR1,dos);
					
					// Integer
				
						writeInteger(this.M_CNT_EVT,dos);
					
					// Double
				
						if(this.M_TP_NOMINAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.M_TP_NOMINAL);
		            	}
					
					// String
				
						writeString(this.M_NB,dos);
					
					// String
				
						writeString(this.M_REF_DATA,dos);
					
					// String
				
						writeString(this.M_MX_REF_JOB,dos);
					
					// String
				
						writeString(this.M_TP_FXUND,dos);
					
					// String
				
						writeString(this.M_TP_GID,dos);
					
					// String
				
						writeString(this.M_TP_NOMCUR,dos);
					
					// String
				
						writeString(this.M_FOPIPORTF,dos);
					
					// String
				
						writeString(this.M_TP_DTEEXP,dos);
					
					// java.util.Date
				
						writeDate(this.M_TP_PAY,dos);
					
					// String
				
						writeString(this.M_TP_DTEEXPC,dos);
					
					// String
				
						writeString(this.M_TP_CNTRP,dos);
					
					// String
				
						writeString(this.M_TP_ROOTCNT,dos);
					
					// String
				
						writeString(this.M_TP_FXBASE,dos);
					
					// String
				
						writeString(this.M_STP_STATUS,dos);
					
					// String
				
						writeString(this.M_STP_STA0,dos);
					
					// String
				
						writeString(this.M_TP_STRIKE,dos);
					
					// String
				
						writeString(this.M_TP_STRIKEN,dos);
					
					// String
				
						writeString(this.M_TP_AE,dos);
					
					// String
				
						writeString(this.M_TP_STATUS2,dos);
					
					// String
				
						writeString(this.M_TRN_GRP,dos);
					
					// String
				
						writeString(this.M_TRN_GTYPE,dos);
					
					// String
				
						writeString(this.M_TRN_TYPE,dos);
					
					// String
				
						writeString(this.M_TP_RTINCC0,dos);
					
					// String
				
						writeString(this.M_TP_RTINCC1,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPFF,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPNU,dos);
					
					// String
				
						writeString(this.M_TP_FXPSPT,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPDE,dos);
					
					// String
				
						writeString(this.M_TP_IPAYCUR,dos);
					
					// String
				
						writeString(this.M_TP_IPAY,dos);
					
					// Double
				
						if(this.M_TP_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.M_TP_PRICE);
		            	}
					
					// String
				
						writeString(this.M_C_CUR_PL,dos);
					
					// String
				
						writeString(this.M_PACKAGE,dos);
					
					// String
				
						writeString(this.M_CONTRACT,dos);
					
					// String
				
						writeString(this.M_TP_INSCUR,dos);
					
					// String
				
						writeString(this.M_TP_DTETRN,dos);
					
					// String
				
						writeString(this.M_TRN_FMLY,dos);
					
					// String
				
						writeString(this.M_TP_DTEPMT,dos);
					
					// String
				
						writeString(this.M_TP_DVCS,dos);
					
					// String
				
						writeString(this.M_TP_MOPLSTL,dos);
					
					// String
				
						writeString(this.M_TP_MOPLSTD,dos);
					
					// java.util.Date
				
						writeDate(this.M_REP_DATE,dos);
					
					// String
				
						writeString(this.M_CNT_ORG,dos);
					
					// String
				
						writeString(this.M_UDF_REF2,dos);
					
					// String
				
						writeString(this.M_TP_ACCCPN,dos);
					
					// String
				
						writeString(this.M_TP_LQTY2,dos);
					
					// String
				
						writeString(this.M_CMM_ODNC1,dos);
					
					// String
				
						writeString(this.M_CMM_ODNC0,dos);
					
					// String
				
						writeString(this.M_TP_SECLOT,dos);
					
					// String
				
						writeString(this.M_CNT_TYPO,dos);
					
					// String
				
						writeString(this.M_TP_PFOLIO,dos);
					
					// String
				
						writeString(this.M_SCR_MODULE,dos);
					
					// String
				
						writeString(this.M_TP_TRADER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIMESTAMP="+TIMESTAMP);
		sb.append(",M_IDENTITY="+M_IDENTITY);
		sb.append(",M_PLIRDCUR1="+M_PLIRDCUR1);
		sb.append(",M_CNT_EVT="+String.valueOf(M_CNT_EVT));
		sb.append(",M_TP_NOMINAL="+String.valueOf(M_TP_NOMINAL));
		sb.append(",M_NB="+M_NB);
		sb.append(",M_REF_DATA="+M_REF_DATA);
		sb.append(",M_MX_REF_JOB="+M_MX_REF_JOB);
		sb.append(",M_TP_FXUND="+M_TP_FXUND);
		sb.append(",M_TP_GID="+M_TP_GID);
		sb.append(",M_TP_NOMCUR="+M_TP_NOMCUR);
		sb.append(",M_FOPIPORTF="+M_FOPIPORTF);
		sb.append(",M_TP_DTEEXP="+M_TP_DTEEXP);
		sb.append(",M_TP_PAY="+String.valueOf(M_TP_PAY));
		sb.append(",M_TP_DTEEXPC="+M_TP_DTEEXPC);
		sb.append(",M_TP_CNTRP="+M_TP_CNTRP);
		sb.append(",M_TP_ROOTCNT="+M_TP_ROOTCNT);
		sb.append(",M_TP_FXBASE="+M_TP_FXBASE);
		sb.append(",M_STP_STATUS="+M_STP_STATUS);
		sb.append(",M_STP_STA0="+M_STP_STA0);
		sb.append(",M_TP_STRIKE="+M_TP_STRIKE);
		sb.append(",M_TP_STRIKEN="+M_TP_STRIKEN);
		sb.append(",M_TP_AE="+M_TP_AE);
		sb.append(",M_TP_STATUS2="+M_TP_STATUS2);
		sb.append(",M_TRN_GRP="+M_TRN_GRP);
		sb.append(",M_TRN_GTYPE="+M_TRN_GTYPE);
		sb.append(",M_TRN_TYPE="+M_TRN_TYPE);
		sb.append(",M_TP_RTINCC0="+M_TP_RTINCC0);
		sb.append(",M_TP_RTINCC1="+M_TP_RTINCC1);
		sb.append(",M_TP_FXCTPFF="+M_TP_FXCTPFF);
		sb.append(",M_TP_FXCTPNU="+M_TP_FXCTPNU);
		sb.append(",M_TP_FXPSPT="+M_TP_FXPSPT);
		sb.append(",M_TP_FXCTPDE="+M_TP_FXCTPDE);
		sb.append(",M_TP_IPAYCUR="+M_TP_IPAYCUR);
		sb.append(",M_TP_IPAY="+M_TP_IPAY);
		sb.append(",M_TP_PRICE="+String.valueOf(M_TP_PRICE));
		sb.append(",M_C_CUR_PL="+M_C_CUR_PL);
		sb.append(",M_PACKAGE="+M_PACKAGE);
		sb.append(",M_CONTRACT="+M_CONTRACT);
		sb.append(",M_TP_INSCUR="+M_TP_INSCUR);
		sb.append(",M_TP_DTETRN="+M_TP_DTETRN);
		sb.append(",M_TRN_FMLY="+M_TRN_FMLY);
		sb.append(",M_TP_DTEPMT="+M_TP_DTEPMT);
		sb.append(",M_TP_DVCS="+M_TP_DVCS);
		sb.append(",M_TP_MOPLSTL="+M_TP_MOPLSTL);
		sb.append(",M_TP_MOPLSTD="+M_TP_MOPLSTD);
		sb.append(",M_REP_DATE="+String.valueOf(M_REP_DATE));
		sb.append(",M_CNT_ORG="+M_CNT_ORG);
		sb.append(",M_UDF_REF2="+M_UDF_REF2);
		sb.append(",M_TP_ACCCPN="+M_TP_ACCCPN);
		sb.append(",M_TP_LQTY2="+M_TP_LQTY2);
		sb.append(",M_CMM_ODNC1="+M_CMM_ODNC1);
		sb.append(",M_CMM_ODNC0="+M_CMM_ODNC0);
		sb.append(",M_TP_SECLOT="+M_TP_SECLOT);
		sb.append(",M_CNT_TYPO="+M_CNT_TYPO);
		sb.append(",M_TP_PFOLIO="+M_TP_PFOLIO);
		sb.append(",M_SCR_MODULE="+M_SCR_MODULE);
		sb.append(",M_TP_TRADER="+M_TP_TRADER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String TIMESTAMP;

				public String getTIMESTAMP () {
					return this.TIMESTAMP;
				}
				
			    public String M_IDENTITY;

				public String getM_IDENTITY () {
					return this.M_IDENTITY;
				}
				
			    public String M_PLIRDCUR1;

				public String getM_PLIRDCUR1 () {
					return this.M_PLIRDCUR1;
				}
				
			    public Integer M_CNT_EVT;

				public Integer getM_CNT_EVT () {
					return this.M_CNT_EVT;
				}
				
			    public Double M_TP_NOMINAL;

				public Double getM_TP_NOMINAL () {
					return this.M_TP_NOMINAL;
				}
				
			    public String M_NB;

				public String getM_NB () {
					return this.M_NB;
				}
				
			    public String M_REF_DATA;

				public String getM_REF_DATA () {
					return this.M_REF_DATA;
				}
				
			    public String M_MX_REF_JOB;

				public String getM_MX_REF_JOB () {
					return this.M_MX_REF_JOB;
				}
				
			    public String M_TP_FXUND;

				public String getM_TP_FXUND () {
					return this.M_TP_FXUND;
				}
				
			    public String M_TP_GID;

				public String getM_TP_GID () {
					return this.M_TP_GID;
				}
				
			    public String M_TP_NOMCUR;

				public String getM_TP_NOMCUR () {
					return this.M_TP_NOMCUR;
				}
				
			    public String M_FOPIPORTF;

				public String getM_FOPIPORTF () {
					return this.M_FOPIPORTF;
				}
				
			    public String M_TP_DTEEXP;

				public String getM_TP_DTEEXP () {
					return this.M_TP_DTEEXP;
				}
				
			    public java.util.Date M_TP_PAY;

				public java.util.Date getM_TP_PAY () {
					return this.M_TP_PAY;
				}
				
			    public String M_TP_DTEEXPC;

				public String getM_TP_DTEEXPC () {
					return this.M_TP_DTEEXPC;
				}
				
			    public String M_TP_CNTRP;

				public String getM_TP_CNTRP () {
					return this.M_TP_CNTRP;
				}
				
			    public String M_TP_ROOTCNT;

				public String getM_TP_ROOTCNT () {
					return this.M_TP_ROOTCNT;
				}
				
			    public String M_TP_FXBASE;

				public String getM_TP_FXBASE () {
					return this.M_TP_FXBASE;
				}
				
			    public String M_STP_STATUS;

				public String getM_STP_STATUS () {
					return this.M_STP_STATUS;
				}
				
			    public String M_STP_STA0;

				public String getM_STP_STA0 () {
					return this.M_STP_STA0;
				}
				
			    public String M_TP_STRIKE;

				public String getM_TP_STRIKE () {
					return this.M_TP_STRIKE;
				}
				
			    public String M_TP_STRIKEN;

				public String getM_TP_STRIKEN () {
					return this.M_TP_STRIKEN;
				}
				
			    public String M_TP_AE;

				public String getM_TP_AE () {
					return this.M_TP_AE;
				}
				
			    public String M_TP_STATUS2;

				public String getM_TP_STATUS2 () {
					return this.M_TP_STATUS2;
				}
				
			    public String M_TRN_GRP;

				public String getM_TRN_GRP () {
					return this.M_TRN_GRP;
				}
				
			    public String M_TRN_GTYPE;

				public String getM_TRN_GTYPE () {
					return this.M_TRN_GTYPE;
				}
				
			    public String M_TRN_TYPE;

				public String getM_TRN_TYPE () {
					return this.M_TRN_TYPE;
				}
				
			    public String M_TP_RTINCC0;

				public String getM_TP_RTINCC0 () {
					return this.M_TP_RTINCC0;
				}
				
			    public String M_TP_RTINCC1;

				public String getM_TP_RTINCC1 () {
					return this.M_TP_RTINCC1;
				}
				
			    public String M_TP_FXCTPFF;

				public String getM_TP_FXCTPFF () {
					return this.M_TP_FXCTPFF;
				}
				
			    public String M_TP_FXCTPNU;

				public String getM_TP_FXCTPNU () {
					return this.M_TP_FXCTPNU;
				}
				
			    public String M_TP_FXPSPT;

				public String getM_TP_FXPSPT () {
					return this.M_TP_FXPSPT;
				}
				
			    public String M_TP_FXCTPDE;

				public String getM_TP_FXCTPDE () {
					return this.M_TP_FXCTPDE;
				}
				
			    public String M_TP_IPAYCUR;

				public String getM_TP_IPAYCUR () {
					return this.M_TP_IPAYCUR;
				}
				
			    public String M_TP_IPAY;

				public String getM_TP_IPAY () {
					return this.M_TP_IPAY;
				}
				
			    public Double M_TP_PRICE;

				public Double getM_TP_PRICE () {
					return this.M_TP_PRICE;
				}
				
			    public String M_C_CUR_PL;

				public String getM_C_CUR_PL () {
					return this.M_C_CUR_PL;
				}
				
			    public String M_PACKAGE;

				public String getM_PACKAGE () {
					return this.M_PACKAGE;
				}
				
			    public String M_CONTRACT;

				public String getM_CONTRACT () {
					return this.M_CONTRACT;
				}
				
			    public String M_TP_INSCUR;

				public String getM_TP_INSCUR () {
					return this.M_TP_INSCUR;
				}
				
			    public String M_TP_DTETRN;

				public String getM_TP_DTETRN () {
					return this.M_TP_DTETRN;
				}
				
			    public String M_TRN_FMLY;

				public String getM_TRN_FMLY () {
					return this.M_TRN_FMLY;
				}
				
			    public String M_TP_DTEPMT;

				public String getM_TP_DTEPMT () {
					return this.M_TP_DTEPMT;
				}
				
			    public String M_TP_DVCS;

				public String getM_TP_DVCS () {
					return this.M_TP_DVCS;
				}
				
			    public String M_TP_MOPLSTL;

				public String getM_TP_MOPLSTL () {
					return this.M_TP_MOPLSTL;
				}
				
			    public String M_TP_MOPLSTD;

				public String getM_TP_MOPLSTD () {
					return this.M_TP_MOPLSTD;
				}
				
			    public java.util.Date M_REP_DATE;

				public java.util.Date getM_REP_DATE () {
					return this.M_REP_DATE;
				}
				
			    public String M_CNT_ORG;

				public String getM_CNT_ORG () {
					return this.M_CNT_ORG;
				}
				
			    public String M_UDF_REF2;

				public String getM_UDF_REF2 () {
					return this.M_UDF_REF2;
				}
				
			    public String M_TP_ACCCPN;

				public String getM_TP_ACCCPN () {
					return this.M_TP_ACCCPN;
				}
				
			    public String M_TP_LQTY2;

				public String getM_TP_LQTY2 () {
					return this.M_TP_LQTY2;
				}
				
			    public String M_CMM_ODNC1;

				public String getM_CMM_ODNC1 () {
					return this.M_CMM_ODNC1;
				}
				
			    public String M_CMM_ODNC0;

				public String getM_CMM_ODNC0 () {
					return this.M_CMM_ODNC0;
				}
				
			    public String M_TP_SECLOT;

				public String getM_TP_SECLOT () {
					return this.M_TP_SECLOT;
				}
				
			    public String M_CNT_TYPO;

				public String getM_CNT_TYPO () {
					return this.M_CNT_TYPO;
				}
				
			    public String M_TP_PFOLIO;

				public String getM_TP_PFOLIO () {
					return this.M_TP_PFOLIO;
				}
				
			    public String M_SCR_MODULE;

				public String getM_SCR_MODULE () {
					return this.M_SCR_MODULE;
				}
				
			    public String M_TP_TRADER;

				public String getM_TP_TRADER () {
					return this.M_TP_TRADER;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.M_NB == null) ? 0 : this.M_NB.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;
		
						if (this.M_NB == null) {
							if (other.M_NB != null)
								return false;
						
						} else if (!this.M_NB.equals(other.M_NB))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_1Struct other) {

		other.TIMESTAMP = this.TIMESTAMP;
	            other.M_IDENTITY = this.M_IDENTITY;
	            other.M_PLIRDCUR1 = this.M_PLIRDCUR1;
	            other.M_CNT_EVT = this.M_CNT_EVT;
	            other.M_TP_NOMINAL = this.M_TP_NOMINAL;
	            other.M_NB = this.M_NB;
	            other.M_REF_DATA = this.M_REF_DATA;
	            other.M_MX_REF_JOB = this.M_MX_REF_JOB;
	            other.M_TP_FXUND = this.M_TP_FXUND;
	            other.M_TP_GID = this.M_TP_GID;
	            other.M_TP_NOMCUR = this.M_TP_NOMCUR;
	            other.M_FOPIPORTF = this.M_FOPIPORTF;
	            other.M_TP_DTEEXP = this.M_TP_DTEEXP;
	            other.M_TP_PAY = this.M_TP_PAY;
	            other.M_TP_DTEEXPC = this.M_TP_DTEEXPC;
	            other.M_TP_CNTRP = this.M_TP_CNTRP;
	            other.M_TP_ROOTCNT = this.M_TP_ROOTCNT;
	            other.M_TP_FXBASE = this.M_TP_FXBASE;
	            other.M_STP_STATUS = this.M_STP_STATUS;
	            other.M_STP_STA0 = this.M_STP_STA0;
	            other.M_TP_STRIKE = this.M_TP_STRIKE;
	            other.M_TP_STRIKEN = this.M_TP_STRIKEN;
	            other.M_TP_AE = this.M_TP_AE;
	            other.M_TP_STATUS2 = this.M_TP_STATUS2;
	            other.M_TRN_GRP = this.M_TRN_GRP;
	            other.M_TRN_GTYPE = this.M_TRN_GTYPE;
	            other.M_TRN_TYPE = this.M_TRN_TYPE;
	            other.M_TP_RTINCC0 = this.M_TP_RTINCC0;
	            other.M_TP_RTINCC1 = this.M_TP_RTINCC1;
	            other.M_TP_FXCTPFF = this.M_TP_FXCTPFF;
	            other.M_TP_FXCTPNU = this.M_TP_FXCTPNU;
	            other.M_TP_FXPSPT = this.M_TP_FXPSPT;
	            other.M_TP_FXCTPDE = this.M_TP_FXCTPDE;
	            other.M_TP_IPAYCUR = this.M_TP_IPAYCUR;
	            other.M_TP_IPAY = this.M_TP_IPAY;
	            other.M_TP_PRICE = this.M_TP_PRICE;
	            other.M_C_CUR_PL = this.M_C_CUR_PL;
	            other.M_PACKAGE = this.M_PACKAGE;
	            other.M_CONTRACT = this.M_CONTRACT;
	            other.M_TP_INSCUR = this.M_TP_INSCUR;
	            other.M_TP_DTETRN = this.M_TP_DTETRN;
	            other.M_TRN_FMLY = this.M_TRN_FMLY;
	            other.M_TP_DTEPMT = this.M_TP_DTEPMT;
	            other.M_TP_DVCS = this.M_TP_DVCS;
	            other.M_TP_MOPLSTL = this.M_TP_MOPLSTL;
	            other.M_TP_MOPLSTD = this.M_TP_MOPLSTD;
	            other.M_REP_DATE = this.M_REP_DATE;
	            other.M_CNT_ORG = this.M_CNT_ORG;
	            other.M_UDF_REF2 = this.M_UDF_REF2;
	            other.M_TP_ACCCPN = this.M_TP_ACCCPN;
	            other.M_TP_LQTY2 = this.M_TP_LQTY2;
	            other.M_CMM_ODNC1 = this.M_CMM_ODNC1;
	            other.M_CMM_ODNC0 = this.M_CMM_ODNC0;
	            other.M_TP_SECLOT = this.M_TP_SECLOT;
	            other.M_CNT_TYPO = this.M_CNT_TYPO;
	            other.M_TP_PFOLIO = this.M_TP_PFOLIO;
	            other.M_SCR_MODULE = this.M_SCR_MODULE;
	            other.M_TP_TRADER = this.M_TP_TRADER;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

		other.M_NB = this.M_NB;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.TIMESTAMP = readString(dis);
					
					this.M_IDENTITY = readString(dis);
					
					this.M_PLIRDCUR1 = readString(dis);
					
						this.M_CNT_EVT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.M_TP_NOMINAL = null;
           				} else {
           			    	this.M_TP_NOMINAL = dis.readDouble();
           				}
					
					this.M_NB = readString(dis);
					
					this.M_REF_DATA = readString(dis);
					
					this.M_MX_REF_JOB = readString(dis);
					
					this.M_TP_FXUND = readString(dis);
					
					this.M_TP_GID = readString(dis);
					
					this.M_TP_NOMCUR = readString(dis);
					
					this.M_FOPIPORTF = readString(dis);
					
					this.M_TP_DTEEXP = readString(dis);
					
					this.M_TP_PAY = readDate(dis);
					
					this.M_TP_DTEEXPC = readString(dis);
					
					this.M_TP_CNTRP = readString(dis);
					
					this.M_TP_ROOTCNT = readString(dis);
					
					this.M_TP_FXBASE = readString(dis);
					
					this.M_STP_STATUS = readString(dis);
					
					this.M_STP_STA0 = readString(dis);
					
					this.M_TP_STRIKE = readString(dis);
					
					this.M_TP_STRIKEN = readString(dis);
					
					this.M_TP_AE = readString(dis);
					
					this.M_TP_STATUS2 = readString(dis);
					
					this.M_TRN_GRP = readString(dis);
					
					this.M_TRN_GTYPE = readString(dis);
					
					this.M_TRN_TYPE = readString(dis);
					
					this.M_TP_RTINCC0 = readString(dis);
					
					this.M_TP_RTINCC1 = readString(dis);
					
					this.M_TP_FXCTPFF = readString(dis);
					
					this.M_TP_FXCTPNU = readString(dis);
					
					this.M_TP_FXPSPT = readString(dis);
					
					this.M_TP_FXCTPDE = readString(dis);
					
					this.M_TP_IPAYCUR = readString(dis);
					
					this.M_TP_IPAY = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.M_TP_PRICE = null;
           				} else {
           			    	this.M_TP_PRICE = dis.readDouble();
           				}
					
					this.M_C_CUR_PL = readString(dis);
					
					this.M_PACKAGE = readString(dis);
					
					this.M_CONTRACT = readString(dis);
					
					this.M_TP_INSCUR = readString(dis);
					
					this.M_TP_DTETRN = readString(dis);
					
					this.M_TRN_FMLY = readString(dis);
					
					this.M_TP_DTEPMT = readString(dis);
					
					this.M_TP_DVCS = readString(dis);
					
					this.M_TP_MOPLSTL = readString(dis);
					
					this.M_TP_MOPLSTD = readString(dis);
					
					this.M_REP_DATE = readDate(dis);
					
					this.M_CNT_ORG = readString(dis);
					
					this.M_UDF_REF2 = readString(dis);
					
					this.M_TP_ACCCPN = readString(dis);
					
					this.M_TP_LQTY2 = readString(dis);
					
					this.M_CMM_ODNC1 = readString(dis);
					
					this.M_CMM_ODNC0 = readString(dis);
					
					this.M_TP_SECLOT = readString(dis);
					
					this.M_CNT_TYPO = readString(dis);
					
					this.M_TP_PFOLIO = readString(dis);
					
					this.M_SCR_MODULE = readString(dis);
					
					this.M_TP_TRADER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIMESTAMP,dos);
					
					// String
				
						writeString(this.M_IDENTITY,dos);
					
					// String
				
						writeString(this.M_PLIRDCUR1,dos);
					
					// Integer
				
						writeInteger(this.M_CNT_EVT,dos);
					
					// Double
				
						if(this.M_TP_NOMINAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.M_TP_NOMINAL);
		            	}
					
					// String
				
						writeString(this.M_NB,dos);
					
					// String
				
						writeString(this.M_REF_DATA,dos);
					
					// String
				
						writeString(this.M_MX_REF_JOB,dos);
					
					// String
				
						writeString(this.M_TP_FXUND,dos);
					
					// String
				
						writeString(this.M_TP_GID,dos);
					
					// String
				
						writeString(this.M_TP_NOMCUR,dos);
					
					// String
				
						writeString(this.M_FOPIPORTF,dos);
					
					// String
				
						writeString(this.M_TP_DTEEXP,dos);
					
					// java.util.Date
				
						writeDate(this.M_TP_PAY,dos);
					
					// String
				
						writeString(this.M_TP_DTEEXPC,dos);
					
					// String
				
						writeString(this.M_TP_CNTRP,dos);
					
					// String
				
						writeString(this.M_TP_ROOTCNT,dos);
					
					// String
				
						writeString(this.M_TP_FXBASE,dos);
					
					// String
				
						writeString(this.M_STP_STATUS,dos);
					
					// String
				
						writeString(this.M_STP_STA0,dos);
					
					// String
				
						writeString(this.M_TP_STRIKE,dos);
					
					// String
				
						writeString(this.M_TP_STRIKEN,dos);
					
					// String
				
						writeString(this.M_TP_AE,dos);
					
					// String
				
						writeString(this.M_TP_STATUS2,dos);
					
					// String
				
						writeString(this.M_TRN_GRP,dos);
					
					// String
				
						writeString(this.M_TRN_GTYPE,dos);
					
					// String
				
						writeString(this.M_TRN_TYPE,dos);
					
					// String
				
						writeString(this.M_TP_RTINCC0,dos);
					
					// String
				
						writeString(this.M_TP_RTINCC1,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPFF,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPNU,dos);
					
					// String
				
						writeString(this.M_TP_FXPSPT,dos);
					
					// String
				
						writeString(this.M_TP_FXCTPDE,dos);
					
					// String
				
						writeString(this.M_TP_IPAYCUR,dos);
					
					// String
				
						writeString(this.M_TP_IPAY,dos);
					
					// Double
				
						if(this.M_TP_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.M_TP_PRICE);
		            	}
					
					// String
				
						writeString(this.M_C_CUR_PL,dos);
					
					// String
				
						writeString(this.M_PACKAGE,dos);
					
					// String
				
						writeString(this.M_CONTRACT,dos);
					
					// String
				
						writeString(this.M_TP_INSCUR,dos);
					
					// String
				
						writeString(this.M_TP_DTETRN,dos);
					
					// String
				
						writeString(this.M_TRN_FMLY,dos);
					
					// String
				
						writeString(this.M_TP_DTEPMT,dos);
					
					// String
				
						writeString(this.M_TP_DVCS,dos);
					
					// String
				
						writeString(this.M_TP_MOPLSTL,dos);
					
					// String
				
						writeString(this.M_TP_MOPLSTD,dos);
					
					// java.util.Date
				
						writeDate(this.M_REP_DATE,dos);
					
					// String
				
						writeString(this.M_CNT_ORG,dos);
					
					// String
				
						writeString(this.M_UDF_REF2,dos);
					
					// String
				
						writeString(this.M_TP_ACCCPN,dos);
					
					// String
				
						writeString(this.M_TP_LQTY2,dos);
					
					// String
				
						writeString(this.M_CMM_ODNC1,dos);
					
					// String
				
						writeString(this.M_CMM_ODNC0,dos);
					
					// String
				
						writeString(this.M_TP_SECLOT,dos);
					
					// String
				
						writeString(this.M_CNT_TYPO,dos);
					
					// String
				
						writeString(this.M_TP_PFOLIO,dos);
					
					// String
				
						writeString(this.M_SCR_MODULE,dos);
					
					// String
				
						writeString(this.M_TP_TRADER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIMESTAMP="+TIMESTAMP);
		sb.append(",M_IDENTITY="+M_IDENTITY);
		sb.append(",M_PLIRDCUR1="+M_PLIRDCUR1);
		sb.append(",M_CNT_EVT="+String.valueOf(M_CNT_EVT));
		sb.append(",M_TP_NOMINAL="+String.valueOf(M_TP_NOMINAL));
		sb.append(",M_NB="+M_NB);
		sb.append(",M_REF_DATA="+M_REF_DATA);
		sb.append(",M_MX_REF_JOB="+M_MX_REF_JOB);
		sb.append(",M_TP_FXUND="+M_TP_FXUND);
		sb.append(",M_TP_GID="+M_TP_GID);
		sb.append(",M_TP_NOMCUR="+M_TP_NOMCUR);
		sb.append(",M_FOPIPORTF="+M_FOPIPORTF);
		sb.append(",M_TP_DTEEXP="+M_TP_DTEEXP);
		sb.append(",M_TP_PAY="+String.valueOf(M_TP_PAY));
		sb.append(",M_TP_DTEEXPC="+M_TP_DTEEXPC);
		sb.append(",M_TP_CNTRP="+M_TP_CNTRP);
		sb.append(",M_TP_ROOTCNT="+M_TP_ROOTCNT);
		sb.append(",M_TP_FXBASE="+M_TP_FXBASE);
		sb.append(",M_STP_STATUS="+M_STP_STATUS);
		sb.append(",M_STP_STA0="+M_STP_STA0);
		sb.append(",M_TP_STRIKE="+M_TP_STRIKE);
		sb.append(",M_TP_STRIKEN="+M_TP_STRIKEN);
		sb.append(",M_TP_AE="+M_TP_AE);
		sb.append(",M_TP_STATUS2="+M_TP_STATUS2);
		sb.append(",M_TRN_GRP="+M_TRN_GRP);
		sb.append(",M_TRN_GTYPE="+M_TRN_GTYPE);
		sb.append(",M_TRN_TYPE="+M_TRN_TYPE);
		sb.append(",M_TP_RTINCC0="+M_TP_RTINCC0);
		sb.append(",M_TP_RTINCC1="+M_TP_RTINCC1);
		sb.append(",M_TP_FXCTPFF="+M_TP_FXCTPFF);
		sb.append(",M_TP_FXCTPNU="+M_TP_FXCTPNU);
		sb.append(",M_TP_FXPSPT="+M_TP_FXPSPT);
		sb.append(",M_TP_FXCTPDE="+M_TP_FXCTPDE);
		sb.append(",M_TP_IPAYCUR="+M_TP_IPAYCUR);
		sb.append(",M_TP_IPAY="+M_TP_IPAY);
		sb.append(",M_TP_PRICE="+String.valueOf(M_TP_PRICE));
		sb.append(",M_C_CUR_PL="+M_C_CUR_PL);
		sb.append(",M_PACKAGE="+M_PACKAGE);
		sb.append(",M_CONTRACT="+M_CONTRACT);
		sb.append(",M_TP_INSCUR="+M_TP_INSCUR);
		sb.append(",M_TP_DTETRN="+M_TP_DTETRN);
		sb.append(",M_TRN_FMLY="+M_TRN_FMLY);
		sb.append(",M_TP_DTEPMT="+M_TP_DTEPMT);
		sb.append(",M_TP_DVCS="+M_TP_DVCS);
		sb.append(",M_TP_MOPLSTL="+M_TP_MOPLSTL);
		sb.append(",M_TP_MOPLSTD="+M_TP_MOPLSTD);
		sb.append(",M_REP_DATE="+String.valueOf(M_REP_DATE));
		sb.append(",M_CNT_ORG="+M_CNT_ORG);
		sb.append(",M_UDF_REF2="+M_UDF_REF2);
		sb.append(",M_TP_ACCCPN="+M_TP_ACCCPN);
		sb.append(",M_TP_LQTY2="+M_TP_LQTY2);
		sb.append(",M_CMM_ODNC1="+M_CMM_ODNC1);
		sb.append(",M_CMM_ODNC0="+M_CMM_ODNC0);
		sb.append(",M_TP_SECLOT="+M_TP_SECLOT);
		sb.append(",M_CNT_TYPO="+M_CNT_TYPO);
		sb.append(",M_TP_PFOLIO="+M_TP_PFOLIO);
		sb.append(",M_SCR_MODULE="+M_SCR_MODULE);
		sb.append(",M_TP_TRADER="+M_TP_TRADER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.M_NB, other.M_NB);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
Columnas_limpiasStruct Columnas_limpias = new Columnas_limpiasStruct();
row2Struct row2 = new row2Struct();
row5Struct row5 = new row5Struct();
out1FechasStringStruct out1FechasString = new out1FechasStringStruct();
outP_LStruct outP_L = new outP_LStruct();
out1StageStruct out1Stage = new out1StageStruct();
row4Struct row4 = new row4Struct();
row3Struct row3 = new row3Struct();










	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1Stage" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "stage";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_1 = false;
                                while(rsTable_tMysqlOutput_1.next()) {
                                    String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_1.equalsIgnoreCase("stage")) {
                                        whetherExist_tMysqlOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_1.close();
                                if(!whetherExist_tMysqlOutput_1) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
                                        stmtCreate_tMysqlOutput_1.execute("CREATE TABLE `" + tableName_tMysqlOutput_1 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` VARCHAR(50)  ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` VARCHAR(50)  ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`contraparte` VARCHAR(30)  ,`precio` DOUBLE(20,0)  ,`P_L` DOUBLE )");
                                    stmtCreate_tMysqlOutput_1.close();
                                }

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "stage" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`contraparte`,`precio`,`P_L`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outP_L" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	Double var0;
	Double var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1StageStruct out1Stage_tmp = new out1StageStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1FechasString" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String subtipo;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
outP_LStruct outP_L_tmp = new outP_LStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1FechasStringStruct out1FechasString_tmp = new out1FechasStringStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		
    	class BytesLimit65535_tDBOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_2().limitLog4jByte();






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "errores_spot";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
		String url_tDBOutput_2 = null;
		if(dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
			url_tDBOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_2 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tDBOutput_2;
		}
		String driverClass_tDBOutput_2 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tDBOutput_2 = "tesis";
		

		 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tDBOutput_2 = false;
                                while(rsTable_tDBOutput_2.next()) {
                                    String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                    if(table_tDBOutput_2.equalsIgnoreCase("errores_spot")) {
                                        whetherExist_tDBOutput_2 = true;
                                        break;
                                    }
                                }
                                rsTable_tDBOutput_2.close();
                                if(!whetherExist_tDBOutput_2) {
                                    java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` DATETIME ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` DATETIME ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`contraparte` VARCHAR(30)  ,`precio` DOUBLE(20,0)  ,`subtipo` VARCHAR(20)  ,`errorMessage` VARCHAR(255)  )");
                                    stmtCreate_tDBOutput_2.close();
                                }

				String insert_tDBOutput_2 = "INSERT INTO `" + "errores_spot" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`contraparte`,`precio`,`subtipo`,`errorMessage`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		
    	class BytesLimit65535_tDBOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_1().limitLog4jByte();






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "errores_spot";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tDBOutput_1 = "tesis";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tDBOutput_1 = false;
                                while(rsTable_tDBOutput_1.next()) {
                                    String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                    if(table_tDBOutput_1.equalsIgnoreCase("errores_spot")) {
                                        whetherExist_tDBOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tDBOutput_1.close();
                                if(!whetherExist_tDBOutput_1) {
                                    java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` DATETIME ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` DATETIME ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`contraparte` VARCHAR(30)  ,`precio` DOUBLE(20,0)  ,`subtipo` VARCHAR(20)  ,`errorMessage` VARCHAR(255)  )");
                                    stmtCreate_tDBOutput_1.close();
                                }

				String insert_tDBOutput_1 = "INSERT INTO `" + "errores_spot" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`contraparte`,`precio`,`subtipo`,`errorMessage`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Columnas_limpias" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date Pre_fecha_finalizacion;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Columnas_limpiasStruct Columnas_limpias_tmp = new Columnas_limpiasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"/home/Archivos/Spot-fwd.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 2; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 2;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						throw e;
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.TIMESTAMP = null;
					
							row1.M_IDENTITY = null;
					
							row1.M_PLIRDCUR1 = null;
					
							row1.M_CNT_EVT = null;
					
							row1.M_TP_NOMINAL = null;
					
							row1.M_NB = null;
					
							row1.M_REF_DATA = null;
					
							row1.M_MX_REF_JOB = null;
					
							row1.M_TP_FXUND = null;
					
							row1.M_TP_GID = null;
					
							row1.M_TP_NOMCUR = null;
					
							row1.M_FOPIPORTF = null;
					
							row1.M_TP_DTEEXP = null;
					
							row1.M_TP_PAY = null;
					
							row1.M_TP_DTEEXPC = null;
					
							row1.M_TP_CNTRP = null;
					
							row1.M_TP_ROOTCNT = null;
					
							row1.M_TP_FXBASE = null;
					
							row1.M_STP_STATUS = null;
					
							row1.M_STP_STA0 = null;
					
							row1.M_TP_STRIKE = null;
					
							row1.M_TP_STRIKEN = null;
					
							row1.M_TP_AE = null;
					
							row1.M_TP_STATUS2 = null;
					
							row1.M_TRN_GRP = null;
					
							row1.M_TRN_GTYPE = null;
					
							row1.M_TRN_TYPE = null;
					
							row1.M_TP_RTINCC0 = null;
					
							row1.M_TP_RTINCC1 = null;
					
							row1.M_TP_FXCTPFF = null;
					
							row1.M_TP_FXCTPNU = null;
					
							row1.M_TP_FXPSPT = null;
					
							row1.M_TP_FXCTPDE = null;
					
							row1.M_TP_IPAYCUR = null;
					
							row1.M_TP_IPAY = null;
					
							row1.M_TP_PRICE = null;
					
							row1.M_C_CUR_PL = null;
					
							row1.M_PACKAGE = null;
					
							row1.M_CONTRACT = null;
					
							row1.M_TP_INSCUR = null;
					
							row1.M_TP_DTETRN = null;
					
							row1.M_TRN_FMLY = null;
					
							row1.M_TP_DTEPMT = null;
					
							row1.M_TP_DVCS = null;
					
							row1.M_TP_MOPLSTL = null;
					
							row1.M_TP_MOPLSTD = null;
					
							row1.M_REP_DATE = null;
					
							row1.M_CNT_ORG = null;
					
							row1.M_UDF_REF2 = null;
					
							row1.M_TP_ACCCPN = null;
					
							row1.M_TP_LQTY2 = null;
					
							row1.M_CMM_ODNC1 = null;
					
							row1.M_CMM_ODNC0 = null;
					
							row1.M_TP_SECLOT = null;
					
							row1.M_CNT_TYPO = null;
					
							row1.M_TP_PFOLIO = null;
					
							row1.M_SCR_MODULE = null;
					
							row1.M_TP_TRADER = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TIMESTAMP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TIMESTAMP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_IDENTITY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_IDENTITY = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_PLIRDCUR1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_PLIRDCUR1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.M_CNT_EVT = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], '.', ','));
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"M_CNT_EVT", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.M_CNT_EVT = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.M_CNT_EVT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.M_TP_NOMINAL = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], '.', ','));
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"M_TP_NOMINAL", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.M_TP_NOMINAL = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.M_TP_NOMINAL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_NB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_NB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_REF_DATA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_REF_DATA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_MX_REF_JOB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_MX_REF_JOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXUND = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXUND = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_GID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_GID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_NOMCUR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_NOMCUR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_FOPIPORTF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_FOPIPORTF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_DTEEXP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_DTEEXP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.M_TP_PAY = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd/MM/yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"M_TP_PAY", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.M_TP_PAY = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.M_TP_PAY = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_DTEEXPC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_DTEEXPC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_CNTRP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_CNTRP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_ROOTCNT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_ROOTCNT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXBASE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXBASE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_STP_STATUS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_STP_STATUS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_STP_STA0 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_STP_STA0 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_STRIKE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_STRIKE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_STRIKEN = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_STRIKEN = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_AE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_AE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_STATUS2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_STATUS2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TRN_GRP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TRN_GRP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TRN_GTYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TRN_GTYPE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
								
							rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]=rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].trim();			
							
									row1.M_TRN_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TRN_TYPE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_RTINCC0 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_RTINCC0 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_RTINCC1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_RTINCC1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXCTPFF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXCTPFF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXCTPNU = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXCTPNU = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXPSPT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXPSPT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_FXCTPDE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_FXCTPDE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_IPAYCUR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_IPAYCUR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_IPAY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_IPAY = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.M_TP_PRICE = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], '.', ','));
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"M_TP_PRICE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.M_TP_PRICE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.M_TP_PRICE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_C_CUR_PL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_C_CUR_PL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_PACKAGE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_PACKAGE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_CONTRACT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_CONTRACT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_INSCUR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_INSCUR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_DTETRN = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_DTETRN = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
								
							rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]=rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].trim();			
							
									row1.M_TRN_FMLY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TRN_FMLY = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_DTEPMT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_DTEPMT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_DVCS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_DVCS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_MOPLSTL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_MOPLSTL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_MOPLSTD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_MOPLSTD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.M_REP_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd/MM/yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"M_REP_DATE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.M_REP_DATE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.M_REP_DATE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_CNT_ORG = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_CNT_ORG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_UDF_REF2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_UDF_REF2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_ACCCPN = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_ACCCPN = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_LQTY2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_LQTY2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_CMM_ODNC1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_CMM_ODNC1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_CMM_ODNC0 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_CMM_ODNC0 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_SECLOT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_SECLOT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_CNT_TYPO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_CNT_TYPO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_PFOLIO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_PFOLIO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_SCR_MODULE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_SCR_MODULE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.M_TP_TRADER = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.M_TP_TRADER = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
            							throw(e);
            						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Pre_fecha_finalizacion = row1.M_TP_DTEEXP==null||row1.M_TP_DTEEXP.equals("")?null:TalendDate.parseDate("dd/MM/yyyy",row1.M_TP_DTEEXP ) ;// ###############################
        // ###############################
        // # Output tables

Columnas_limpias = null;


// # Output table : 'Columnas_limpias'
Columnas_limpias_tmp.id_operacion = StringHandling.BTRIM(row1.M_NB) ;
Columnas_limpias_tmp.estado = StringHandling.BTRIM(row1.M_TP_STATUS2) ;
Columnas_limpias_tmp.fecha_carga = row1.M_REP_DATE ;
Columnas_limpias_tmp.fecha_finalizacion = Var.Pre_fecha_finalizacion==null?null:TalendDate.formatDate("dd/MM/yyyy",Var.Pre_fecha_finalizacion) ;
Columnas_limpias_tmp.fecha_insercion = row1.M_REF_DATA ;
Columnas_limpias_tmp.fecha_pago = row1.M_TP_PAY ;
Columnas_limpias_tmp.portafolio_nombre = StringHandling.BTRIM(row1.M_TP_PFOLIO) ;
Columnas_limpias_tmp.sistema_nombre = StringHandling.BTRIM(row1.M_SCR_MODULE) ;
Columnas_limpias_tmp.cant_contratos = 0 ;
Columnas_limpias_tmp.trader_nombre = StringHandling.BTRIM(row1.M_TP_TRADER) ;
Columnas_limpias_tmp.producto_nombre = StringHandling.BTRIM(row1.M_TRN_TYPE) ;
Columnas_limpias_tmp.tipo_operacion_nombre = StringHandling.BTRIM(row1.M_TRN_FMLY) ;
Columnas_limpias_tmp.moneda1 = StringHandling.BTRIM(row1.M_CMM_ODNC1) ;
Columnas_limpias_tmp.moneda2 = StringHandling.BTRIM(row1.M_CMM_ODNC0) ;
Columnas_limpias_tmp.monto_operacion = row1.M_TP_NOMINAL  ;
Columnas_limpias_tmp.contraparte = StringHandling.BTRIM(row1.M_TP_CNTRP) ;
Columnas_limpias_tmp.precio = row1.M_TP_PRICE  ;
Columnas_limpias_tmp.subtipo = StringHandling.BTRIM(row1.M_CNT_TYPO) ;
Columnas_limpias = Columnas_limpias_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Columnas_limpias"
if(Columnas_limpias != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//Columnas_limpias
			//Columnas_limpias


			
				if(execStat){
					runStat.updateStatOnConnection("Columnas_limpias"+iterateId,1, 1);
				} 
			

		

          row3 = null;
          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
	        ope_tFilterRow_1.matches((Columnas_limpias.id_operacion != null)
	                       , "id_operacion!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.estado != null)
	                       , "estado!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.fecha_carga != null)
	                       , "fecha_carga!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.fecha_finalizacion != null)
	                       , "fecha_finalizacion!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.fecha_insercion != null)
	                       , "fecha_insercion!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.fecha_pago != null)
	                       , "fecha_pago!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.portafolio_nombre != null)
	                       , "portafolio_nombre!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.sistema_nombre != null)
	                       , "sistema_nombre!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.cant_contratos != null)
	                       , "cant_contratos!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.trader_nombre != null)
	                       , "trader_nombre!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.producto_nombre != null)
	                       , "producto_nombre!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.tipo_operacion_nombre != null)
	                       , "tipo_operacion_nombre!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.moneda1 != null)
	                       , "moneda1!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.moneda2 != null)
	                       , "moneda2!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.monto_operacion != null)
	                       , "monto_operacion!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.contraparte != null)
	                       , "contraparte!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.precio != null)
	                       , "precio!=null failed");
	        ope_tFilterRow_1.matches((Columnas_limpias.subtipo != null)
	                       , "subtipo!=null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.id_operacion = Columnas_limpias.id_operacion;
               row2.estado = Columnas_limpias.estado;
               row2.fecha_carga = Columnas_limpias.fecha_carga;
               row2.fecha_finalizacion = Columnas_limpias.fecha_finalizacion;
               row2.fecha_insercion = Columnas_limpias.fecha_insercion;
               row2.fecha_pago = Columnas_limpias.fecha_pago;
               row2.portafolio_nombre = Columnas_limpias.portafolio_nombre;
               row2.sistema_nombre = Columnas_limpias.sistema_nombre;
               row2.cant_contratos = Columnas_limpias.cant_contratos;
               row2.trader_nombre = Columnas_limpias.trader_nombre;
               row2.producto_nombre = Columnas_limpias.producto_nombre;
               row2.tipo_operacion_nombre = Columnas_limpias.tipo_operacion_nombre;
               row2.moneda1 = Columnas_limpias.moneda1;
               row2.moneda2 = Columnas_limpias.moneda2;
               row2.monto_operacion = Columnas_limpias.monto_operacion;
               row2.contraparte = Columnas_limpias.contraparte;
               row2.precio = Columnas_limpias.precio;
               row2.subtipo = Columnas_limpias.subtipo;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (row3 == null){
              row3 = new row3Struct();
            }
                row3.id_operacion = Columnas_limpias.id_operacion;
                row3.estado = Columnas_limpias.estado;
                row3.fecha_carga = Columnas_limpias.fecha_carga;
                row3.fecha_finalizacion = Columnas_limpias.fecha_finalizacion;
                row3.fecha_insercion = Columnas_limpias.fecha_insercion;
                row3.fecha_pago = Columnas_limpias.fecha_pago;
                row3.portafolio_nombre = Columnas_limpias.portafolio_nombre;
                row3.sistema_nombre = Columnas_limpias.sistema_nombre;
                row3.cant_contratos = Columnas_limpias.cant_contratos;
                row3.trader_nombre = Columnas_limpias.trader_nombre;
                row3.producto_nombre = Columnas_limpias.producto_nombre;
                row3.tipo_operacion_nombre = Columnas_limpias.tipo_operacion_nombre;
                row3.moneda1 = Columnas_limpias.moneda1;
                row3.moneda2 = Columnas_limpias.moneda2;
                row3.monto_operacion = Columnas_limpias.monto_operacion;
                row3.contraparte = Columnas_limpias.contraparte;
                row3.precio = Columnas_limpias.precio;
                row3.subtipo = Columnas_limpias.subtipo;
	            row3.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

          row4 = null;
          row5 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");    
        ope_tFilterRow_2.matches((row2.producto_nombre == null? false : row2.producto_nombre.matches("FXD") == true)
                       , " producto_nombre.matches(\"FXD\") == true failed");    
        ope_tFilterRow_2.matches((row2.tipo_operacion_nombre == null? false : row2.tipo_operacion_nombre.matches("CURR") == true)
                       , " tipo_operacion_nombre.matches(\"CURR\") == true failed");
            ope_tFilterRow_2.matches((row2.precio == null? false : row2.precio.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) >= 0)
                           , "precio.compareTo(0) >= 0 failed");
		 	
            ope_tFilterRow_2.matches((row2.fecha_carga == null? false : row2.fecha_carga.compareTo(TalendDate.parseDate("dd/MM/yyyy",TalendDate.getDate("dd/MM/yyyy"))) <= 0)
                           , "fecha_carga.compareTo(TalendDate.parseDate(\"dd/MM/yyyy\",TalendDate.getDate(\"dd/MM/yyyy\"))) <= 0 failed");
      ope_tFilterRow_2.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
(row2.subtipo.equals("Spot")||row2.subtipo.equals("Outright")||row2.subtipo.equals("NDF"))&&(((row2.subtipo.equals("Spot"))&&
	(
	  (row2.moneda1.equals("USD")&&row2.moneda2.equals("COP"))|| 
	  (row2.moneda1.equals("USD")&&row2.moneda2.equals("EUR"))||
	  (row2.moneda1.equals("GBP")&&row2.moneda2.equals("JPY"))
	  )
)||
(!(row2.subtipo.equals("Spot"))&&
	(
	  (row2.moneda1.equals("USD")&&row2.moneda2.equals("COP"))
	)
))
			), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row5 == null){ 
                row5 = new row5Struct();
              }
               row5.id_operacion = row2.id_operacion;
               row5.estado = row2.estado;
               row5.fecha_carga = row2.fecha_carga;
               row5.fecha_finalizacion = row2.fecha_finalizacion;
               row5.fecha_insercion = row2.fecha_insercion;
               row5.fecha_pago = row2.fecha_pago;
               row5.portafolio_nombre = row2.portafolio_nombre;
               row5.sistema_nombre = row2.sistema_nombre;
               row5.cant_contratos = row2.cant_contratos;
               row5.trader_nombre = row2.trader_nombre;
               row5.producto_nombre = row2.producto_nombre;
               row5.tipo_operacion_nombre = row2.tipo_operacion_nombre;
               row5.moneda1 = row2.moneda1;
               row5.moneda2 = row2.moneda2;
               row5.monto_operacion = row2.monto_operacion;
               row5.contraparte = row2.contraparte;
               row5.precio = row2.precio;
               row5.subtipo = row2.subtipo;    
      nb_line_ok_tFilterRow_2++;
    } else {
            if (row4 == null){
              row4 = new row4Struct();
            }
                row4.id_operacion = row2.id_operacion;
                row4.estado = row2.estado;
                row4.fecha_carga = row2.fecha_carga;
                row4.fecha_finalizacion = row2.fecha_finalizacion;
                row4.fecha_insercion = row2.fecha_insercion;
                row4.fecha_pago = row2.fecha_pago;
                row4.portafolio_nombre = row2.portafolio_nombre;
                row4.sistema_nombre = row2.sistema_nombre;
                row4.cant_contratos = row2.cant_contratos;
                row4.trader_nombre = row2.trader_nombre;
                row4.producto_nombre = row2.producto_nombre;
                row4.tipo_operacion_nombre = row2.tipo_operacion_nombre;
                row4.moneda1 = row2.moneda1;
                row4.moneda2 = row2.moneda2;
                row4.monto_operacion = row2.monto_operacion;
                row4.contraparte = row2.contraparte;
                row4.precio = row2.precio;
                row4.subtipo = row2.subtipo;
	            row4.errorMessage = ope_tFilterRow_2.getErrorMsg();
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out1FechasString = null;


// # Output table : 'out1FechasString'
out1FechasString_tmp.id_operacion = row5.id_operacion ;
out1FechasString_tmp.estado = row5.estado ;
out1FechasString_tmp.fecha_carga = row5.fecha_carga==null?null:TalendDate.formatDate("dd/MM/yyyy",row5.fecha_carga) ;
out1FechasString_tmp.fecha_finalizacion = row5.fecha_finalizacion ;
out1FechasString_tmp.fecha_insercion = row5.fecha_insercion ;
out1FechasString_tmp.fecha_pago = row5.fecha_pago ;
out1FechasString_tmp.portafolio_nombre = row5.portafolio_nombre ;
out1FechasString_tmp.sistema_nombre = row5.sistema_nombre ;
out1FechasString_tmp.cant_contratos = row5.cant_contratos ;
out1FechasString_tmp.trader_nombre = row5.trader_nombre ;
out1FechasString_tmp.producto_nombre = row5.producto_nombre ;
out1FechasString_tmp.tipo_operacion_nombre = row5.tipo_operacion_nombre ;
out1FechasString_tmp.moneda1 = row5.moneda1 ;
out1FechasString_tmp.moneda2 = row5.moneda2 ;
out1FechasString_tmp.monto_operacion = row5.monto_operacion ;
out1FechasString_tmp.contraparte = row5.contraparte ;
out1FechasString_tmp.precio = row5.precio ;
out1FechasString_tmp.subtipo = row5.subtipo ;
out1FechasString = out1FechasString_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out1FechasString"
if(out1FechasString != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//out1FechasString
			//out1FechasString


			
				if(execStat){
					runStat.updateStatOnConnection("out1FechasString"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row11HashKey.date = out1FechasString.fecha_carga ;
                        		    		
                        		    		row11HashKey.currency1 = out1FechasString.moneda1 ;
                        		    		
                        		    		row11HashKey.currency2 = out1FechasString.moneda2 ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow11 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow11 = true;
			           		  	} // G 21
                    		  	
                    		

							row11Struct row11 = null;
                    		  	 
							

								while ((tHash_Lookup_row11 != null && tHash_Lookup_row11.hasNext()) || forceLooprow11) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row11'
									
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								
								if(!forceLooprow11) { // G 46
								
							
								 
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow11 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.subtipo = out1FechasString.subtipo==null?null:out1FechasString.subtipo ;// ###############################
        // ###############################
        // # Output tables

outP_L = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'outP_L'
outP_L_tmp.id_operacion = out1FechasString.id_operacion ;
outP_L_tmp.estado = out1FechasString.estado ;
outP_L_tmp.fecha_carga = out1FechasString.fecha_carga ;
outP_L_tmp.fecha_finalizacion = out1FechasString.fecha_finalizacion ;
outP_L_tmp.fecha_insercion = out1FechasString.fecha_insercion ;
outP_L_tmp.fecha_pago = out1FechasString.fecha_pago==null?null:TalendDate.formatDate("dd/MM/yyyy",out1FechasString.fecha_pago) ;
outP_L_tmp.portafolio_nombre = out1FechasString.portafolio_nombre ;
outP_L_tmp.sistema_nombre = out1FechasString.sistema_nombre ;
outP_L_tmp.cant_contratos = out1FechasString.cant_contratos ;
outP_L_tmp.trader_nombre = out1FechasString.trader_nombre ;
outP_L_tmp.producto_nombre = out1FechasString.producto_nombre ;
outP_L_tmp.tipo_operacion_nombre = Var.subtipo ;
outP_L_tmp.moneda1 = out1FechasString.moneda1 ;
outP_L_tmp.moneda2 = out1FechasString.moneda2 ;
outP_L_tmp.monto_operacion = out1FechasString.monto_operacion ;
outP_L_tmp.contraparte = out1FechasString.contraparte ;
outP_L_tmp.precio = out1FechasString.precio ;
outP_L_tmp.P_L = null;
outP_L = outP_L_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "outP_L"
if(outP_L != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//outP_L
			//outP_L


			
				if(execStat){
					runStat.updateStatOnConnection("outP_L"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row12HashKey.date = outP_L.fecha_carga ;
                        		    		
                        		    		row12HashKey.currency1 = outP_L.moneda1 ;
                        		    		
                        		    		row12HashKey.currency2 = outP_L.moneda2 ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.date = '" + row12HashKey.date + "', row12.currency1 = '" + row12HashKey.currency1 + "', row12.currency2 = '" + row12HashKey.currency2 + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var0 = row12.exchange==0||row12.exchange==null?0:  outP_L.monto_operacion/row12.exchange ;
Var.var1 = outP_L.precio==0||outP_L.precio==null?0:outP_L.monto_operacion/outP_L.precio ;// ###############################
        // ###############################
        // # Output tables

out1Stage = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'out1Stage'
out1Stage_tmp.id_operacion = outP_L.id_operacion ;
out1Stage_tmp.estado = outP_L.estado ;
out1Stage_tmp.fecha_carga = outP_L.fecha_carga ;
out1Stage_tmp.fecha_finalizacion = outP_L.fecha_finalizacion ;
out1Stage_tmp.fecha_insercion = outP_L.fecha_insercion ;
out1Stage_tmp.fecha_pago = outP_L.fecha_pago ;
out1Stage_tmp.portafolio_nombre = outP_L.portafolio_nombre ;
out1Stage_tmp.sistema_nombre = outP_L.sistema_nombre ;
out1Stage_tmp.cant_contratos = outP_L.cant_contratos ;
out1Stage_tmp.trader_nombre = outP_L.trader_nombre ;
out1Stage_tmp.producto_nombre = outP_L.producto_nombre ;
out1Stage_tmp.tipo_operacion_nombre = outP_L.tipo_operacion_nombre ;
out1Stage_tmp.moneda1 = outP_L.moneda1 ;
out1Stage_tmp.moneda2 = outP_L.moneda2 ;
out1Stage_tmp.monto_operacion = outP_L.monto_operacion ;
out1Stage_tmp.contraparte = outP_L.contraparte ;
out1Stage_tmp.precio = outP_L.precio ;
out1Stage_tmp.P_L = Var.var0 -  Var.var1 ;
out1Stage = out1Stage_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out1Stage"
if(out1Stage != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//out1Stage
			//out1Stage


			
				if(execStat){
					runStat.updateStatOnConnection("out1Stage"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(out1Stage.id_operacion == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, out1Stage.id_operacion);
}

                            if(out1Stage.estado == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, out1Stage.estado);
}

                            if(out1Stage.fecha_carga == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(3, out1Stage.fecha_carga);
}

                            if(out1Stage.fecha_finalizacion == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(4, out1Stage.fecha_finalizacion);
}

                            if(out1Stage.fecha_insercion == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, out1Stage.fecha_insercion);
}

                            if(out1Stage.fecha_pago == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(6, out1Stage.fecha_pago);
}

                            if(out1Stage.portafolio_nombre == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(7, out1Stage.portafolio_nombre);
}

                            if(out1Stage.sistema_nombre == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(8, out1Stage.sistema_nombre);
}

                            if(out1Stage.cant_contratos == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(9, out1Stage.cant_contratos);
}

                            if(out1Stage.trader_nombre == null) {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(10, out1Stage.trader_nombre);
}

                            if(out1Stage.producto_nombre == null) {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(11, out1Stage.producto_nombre);
}

                            if(out1Stage.tipo_operacion_nombre == null) {
pstmt_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(12, out1Stage.tipo_operacion_nombre);
}

                            if(out1Stage.moneda1 == null) {
pstmt_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(13, out1Stage.moneda1);
}

                            if(out1Stage.moneda2 == null) {
pstmt_tMysqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(14, out1Stage.moneda2);
}

                            if(out1Stage.monto_operacion == null) {
pstmt_tMysqlOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(15, out1Stage.monto_operacion);
}

                            if(out1Stage.contraparte == null) {
pstmt_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(16, out1Stage.contraparte);
}

                            if(out1Stage.precio == null) {
pstmt_tMysqlOutput_1.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(17, out1Stage.precio);
}

                            if(out1Stage.P_L == null) {
pstmt_tMysqlOutput_1.setNull(18, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(18, out1Stage.P_L);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
            if(!whetherReject_tMysqlOutput_1) {
            }
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "out1Stage"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "outP_L"



	
		} // close loop of lookup 'row11' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1FechasString"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row5"




// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                            if(row4.id_operacion == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row4.id_operacion);
}

                            if(row4.estado == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row4.estado);
}

                            if(row4.fecha_carga != null) {
date_tDBOutput_2 = row4.fecha_carga.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.DATE);
}

                            if(row4.fecha_finalizacion == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, row4.fecha_finalizacion);
}

                            if(row4.fecha_insercion == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row4.fecha_insercion);
}

                            if(row4.fecha_pago != null) {
date_tDBOutput_2 = row4.fecha_pago.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(6, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.DATE);
}

                            if(row4.portafolio_nombre == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, row4.portafolio_nombre);
}

                            if(row4.sistema_nombre == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, row4.sistema_nombre);
}

                            if(row4.cant_contratos == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(9, row4.cant_contratos);
}

                            if(row4.trader_nombre == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, row4.trader_nombre);
}

                            if(row4.producto_nombre == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, row4.producto_nombre);
}

                            if(row4.tipo_operacion_nombre == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, row4.tipo_operacion_nombre);
}

                            if(row4.moneda1 == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, row4.moneda1);
}

                            if(row4.moneda2 == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, row4.moneda2);
}

                            if(row4.monto_operacion == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_2.setDouble(15, row4.monto_operacion);
}

                            if(row4.contraparte == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, row4.contraparte);
}

                            if(row4.precio == null) {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_2.setDouble(17, row4.precio);
}

                            if(row4.subtipo == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(18, row4.subtipo);
}

                            if(row4.errorMessage == null) {
pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(19, row4.errorMessage);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

                      batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_2.commit();
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "row2"




// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                            if(row3.id_operacion == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row3.id_operacion);
}

                            if(row3.estado == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row3.estado);
}

                            if(row3.fecha_carga != null) {
date_tDBOutput_1 = row3.fecha_carga.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.DATE);
}

                            if(row3.fecha_finalizacion == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row3.fecha_finalizacion);
}

                            if(row3.fecha_insercion == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row3.fecha_insercion);
}

                            if(row3.fecha_pago != null) {
date_tDBOutput_1 = row3.fecha_pago.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.DATE);
}

                            if(row3.portafolio_nombre == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, row3.portafolio_nombre);
}

                            if(row3.sistema_nombre == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row3.sistema_nombre);
}

                            if(row3.cant_contratos == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(9, row3.cant_contratos);
}

                            if(row3.trader_nombre == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row3.trader_nombre);
}

                            if(row3.producto_nombre == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, row3.producto_nombre);
}

                            if(row3.tipo_operacion_nombre == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row3.tipo_operacion_nombre);
}

                            if(row3.moneda1 == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row3.moneda1);
}

                            if(row3.moneda2 == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row3.moneda2);
}

                            if(row3.monto_operacion == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(15, row3.monto_operacion);
}

                            if(row3.contraparte == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, row3.contraparte);
}

                            if(row3.precio == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(17, row3.precio);
}

                            if(row3.subtipo == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, row3.subtipo);
}

                            if(row3.errorMessage == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, row3.errorMessage);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "Columnas_limpias"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Columnas_limpias"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1FechasString"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outP_L"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1Stage"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tMysqlOutput_1 end ] stop
 */













	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
			
        }

    	if (commitCounter_tDBOutput_2 > 0) {
    		
    		conn_tDBOutput_2.commit();
    		
    	}
    		
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */







	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
			
        }

    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */













	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	
		if(resourceMap.get("finish_tDBOutput_2")==null){
			if(resourceMap.get("conn_tDBOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2");
					
					
            		
					ctn_tDBOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
					String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
					
					System.err.println(errorMessage_tDBOutput_2);
				}
			}
		}
	

 



/**
 * [tDBOutput_2 finally ] stop
 */







	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	
		if(resourceMap.get("finish_tDBOutput_1")==null){
			if(resourceMap.get("conn_tDBOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1");
					
					
            		
					ctn_tDBOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
					String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
					
					System.err.println(errorMessage_tDBOutput_1);
				}
			}
		}
	

 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		completo.create_dim_0_1.Create_dim childJob_tRunJob_2 = new completo.create_dim_0_1.Create_dim();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getException().getClass().getName() + ": " + childJob_tRunJob_2.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Double exchange;

				public Double getExchange () {
					return this.exchange;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				
			    public String currency1;

				public String getCurrency1 () {
					return this.currency1;
				}
				
			    public String currency2;

				public String getCurrency2 () {
					return this.currency2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
					
						result = prime * result + ((this.currency1 == null) ? 0 : this.currency1.hashCode());
					
						result = prime * result + ((this.currency2 == null) ? 0 : this.currency2.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.date == null) {
							if (other.date != null)
								return false;
						
						} else if (!this.date.equals(other.date))
						
							return false;
					
						if (this.currency1 == null) {
							if (other.currency1 != null)
								return false;
						
						} else if (!this.currency1.equals(other.currency1))
						
							return false;
					
						if (this.currency2 == null) {
							if (other.currency2 != null)
								return false;
						
						} else if (!this.currency2.equals(other.currency2))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.name = this.name;
	            other.exchange = this.exchange;
	            other.date = this.date;
	            other.currency1 = this.currency1;
	            other.currency2 = this.currency2;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.date = this.date;
	            	other.currency1 = this.currency1;
	            	other.currency2 = this.currency2;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.date = readString(dis);
					
					this.currency1 = readString(dis);
					
					this.currency2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.date,dos);
					
					// String
				
						writeString(this.currency1,dos);
					
					// String
				
						writeString(this.currency2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.exchange = null;
           				} else {
           			    	this.exchange = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						if(this.exchange == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.exchange);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",exchange="+String.valueOf(exchange));
		sb.append(",date="+date);
		sb.append(",currency1="+currency1);
		sb.append(",currency2="+currency2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date, other.date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.currency1, other.currency1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.currency2, other.currency2);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row11 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row11().limitLog4jByte();

			   		// connection name:row11
			   		// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_2 - inputs:(out1FechasString,row11) outputs:(outP_L)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
    	class BytesLimit65535_tDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
			   	String dbUser_tDBInput_1 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
		        
				
				String url_tDBInput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from factmoneda";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row11.name = null;
							} else {
	                         		
        	row11.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row11.exchange = null;
							} else {
	                         		
            if(rs_tDBInput_1.getObject(2) != null) {
                row11.exchange = rs_tDBInput_1.getDouble(2);
            } else {
                    row11.exchange = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row11.date = null;
							} else {
	                         		
        	row11.date = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row11.currency1 = null;
							} else {
	                         		
        	row11.currency1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row11.currency2 = null;
							} else {
	                         		
        	row11.currency2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.name = row11.name;
				
				row11_HashRow.exchange = row11.exchange;
				
				row11_HashRow.date = row11.date;
				
				row11_HashRow.currency1 = row11.currency1;
				
				row11_HashRow.currency2 = row11.currency2;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if(rs_tDBInput_1 !=null){
		rs_tDBInput_1.close();
	}
	stmt_tDBInput_1.close();
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Spot = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Spot = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Double exchange;

				public Double getExchange () {
					return this.exchange;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				
			    public String currency1;

				public String getCurrency1 () {
					return this.currency1;
				}
				
			    public String currency2;

				public String getCurrency2 () {
					return this.currency2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
					
						result = prime * result + ((this.currency1 == null) ? 0 : this.currency1.hashCode());
					
						result = prime * result + ((this.currency2 == null) ? 0 : this.currency2.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.date == null) {
							if (other.date != null)
								return false;
						
						} else if (!this.date.equals(other.date))
						
							return false;
					
						if (this.currency1 == null) {
							if (other.currency1 != null)
								return false;
						
						} else if (!this.currency1.equals(other.currency1))
						
							return false;
					
						if (this.currency2 == null) {
							if (other.currency2 != null)
								return false;
						
						} else if (!this.currency2.equals(other.currency2))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.name = this.name;
	            other.exchange = this.exchange;
	            other.date = this.date;
	            other.currency1 = this.currency1;
	            other.currency2 = this.currency2;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.date = this.date;
	            	other.currency1 = this.currency1;
	            	other.currency2 = this.currency2;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Spot.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Spot.length == 0) {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Spot = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Spot, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Spot, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Spot) {

        	try {

        		int length = 0;
		
					this.date = readString(dis);
					
					this.currency1 = readString(dis);
					
					this.currency2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.date,dos);
					
					// String
				
						writeString(this.currency1,dos);
					
					// String
				
						writeString(this.currency2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.exchange = null;
           				} else {
           			    	this.exchange = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name, dos, oos);
					
						if(this.exchange == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.exchange);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",exchange="+String.valueOf(exchange));
		sb.append(",date="+date);
		sb.append(",currency1="+currency1);
		sb.append(",currency2="+currency2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date, other.date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.currency1, other.currency1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.currency2, other.currency2);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row12 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row12().limitLog4jByte();

			   		// connection name:row12
			   		// source node:tDBInput_2 - inputs:(after_tFileInputDelimited_1) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_3 - inputs:(outP_L,row12) outputs:(out1Stage)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
    	class BytesLimit65535_tDBInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
			   	String dbUser_tDBInput_2 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
		        
				
				String url_tDBInput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select * from factmoneda";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row12.name = null;
							} else {
	                         		
        	row12.name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row12.exchange = null;
							} else {
	                         		
            if(rs_tDBInput_2.getObject(2) != null) {
                row12.exchange = rs_tDBInput_2.getDouble(2);
            } else {
                    row12.exchange = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row12.date = null;
							} else {
	                         		
        	row12.date = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row12.currency1 = null;
							} else {
	                         		
        	row12.currency1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row12.currency2 = null;
							} else {
	                         		
        	row12.currency2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.name = row12.name;
				
				row12_HashRow.exchange = row12.exchange;
				
				row12_HashRow.date = row12.date;
				
				row12_HashRow.currency1 = row12.currency1;
				
				row12_HashRow.currency2 = row12.currency2;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if(rs_tDBInput_2 !=null){
		rs_tDBInput_2.close();
	}
	stmt_tDBInput_2.close();
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ETL_Spot ETL_SpotClass = new ETL_Spot();

        int exitCode = ETL_SpotClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL_Spot.class.getClassLoader().getResourceAsStream("completo/etl_spot_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL_Spot.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("file", "id_String");
				
                context.file=(String) context.getProperty("file");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("file")) {
                context.file = (String) parentContextMap.get("file");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_Spot");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     325731 characters generated by Talend Open Studio for Data Integration 
 *     on the 9 de mayo de 2018 02:18:17 AM COT
 ************************************************************************************************/