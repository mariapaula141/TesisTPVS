// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package completo.etl_fut_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ETL_Fut Purpose: ETL_Spot<br>
 * Description: ETL_Spot <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ETL_Fut implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ETL_Fut";
	private final String projectName = "COMPLETO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL_Fut.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL_Fut.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tREST_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tREST_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DataStruct implements routines.system.IPersistableRow<DataStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public java.util.Date fecha_carga;

				public java.util.Date getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public Double P_L;

				public Double getP_L () {
					return this.P_L;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readDate(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.P_L = null;
           				} else {
           			    	this.P_L = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// Double
				
						if(this.P_L == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.P_L);
		            	}
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+String.valueOf(fecha_carga));
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",P_L="+String.valueOf(P_L));
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",contraparte="+contraparte);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public String TIMESTAMP;

				public String getTIMESTAMP () {
					return this.TIMESTAMP;
				}
				
			    public String M_IDENTITY;

				public String getM_IDENTITY () {
					return this.M_IDENTITY;
				}
				
			    public String M_NB;

				public String getM_NB () {
					return this.M_NB;
				}
				
			    public String M_GID;

				public String getM_GID () {
					return this.M_GID;
				}
				
			    public String M_TRN_FMLY;

				public String getM_TRN_FMLY () {
					return this.M_TRN_FMLY;
				}
				
			    public String M_TRN_GRP;

				public String getM_TRN_GRP () {
					return this.M_TRN_GRP;
				}
				
			    public String M_TRN_TYPE;

				public String getM_TRN_TYPE () {
					return this.M_TRN_TYPE;
				}
				
			    public String M_TRN_GTYPE;

				public String getM_TRN_GTYPE () {
					return this.M_TRN_GTYPE;
				}
				
			    public String M_TRN_TYPO;

				public String getM_TRN_TYPO () {
					return this.M_TRN_TYPO;
				}
				
			    public String M_INSTRUMENT;

				public String getM_INSTRUMENT () {
					return this.M_INSTRUMENT;
				}
				
			    public String M_RSKSECTION;

				public String getM_RSKSECTION () {
					return this.M_RSKSECTION;
				}
				
			    public String M_PL_INSCUR;

				public String getM_PL_INSCUR () {
					return this.M_PL_INSCUR;
				}
				
			    public String M_PL_KEY1;

				public String getM_PL_KEY1 () {
					return this.M_PL_KEY1;
				}
				
			    public String M_MKT_LABEL;

				public String getM_MKT_LABEL () {
					return this.M_MKT_LABEL;
				}
				
			    public String M_MKT_INDEX;

				public String getM_MKT_INDEX () {
					return this.M_MKT_INDEX;
				}
				
			    public String M_CNS_ACTIVE;

				public String getM_CNS_ACTIVE () {
					return this.M_CNS_ACTIVE;
				}
				
			    public String M_COMMENT_BS;

				public String getM_COMMENT_BS () {
					return this.M_COMMENT_BS;
				}
				
			    public String M_CLIENT;

				public String getM_CLIENT () {
					return this.M_CLIENT;
				}
				
			    public String M_BINTERNAL;

				public String getM_BINTERNAL () {
					return this.M_BINTERNAL;
				}
				
			    public String M_BTRADER;

				public String getM_BTRADER () {
					return this.M_BTRADER;
				}
				
			    public String M_BPFOLIO;

				public String getM_BPFOLIO () {
					return this.M_BPFOLIO;
				}
				
			    public String M_BCOMMENT0;

				public String getM_BCOMMENT0 () {
					return this.M_BCOMMENT0;
				}
				
			    public String M_BCOMMENT1;

				public String getM_BCOMMENT1 () {
					return this.M_BCOMMENT1;
				}
				
			    public String M_BCOMMENT2;

				public String getM_BCOMMENT2 () {
					return this.M_BCOMMENT2;
				}
				
			    public String M_BSTRATEGY;

				public String getM_BSTRATEGY () {
					return this.M_BSTRATEGY;
				}
				
			    public String M_BSECTION;

				public String getM_BSECTION () {
					return this.M_BSECTION;
				}
				
			    public String M_BENTITY;

				public String getM_BENTITY () {
					return this.M_BENTITY;
				}
				
			    public String M_SINTERNAL;

				public String getM_SINTERNAL () {
					return this.M_SINTERNAL;
				}
				
			    public String M_STRADER;

				public String getM_STRADER () {
					return this.M_STRADER;
				}
				
			    public String M_SPFOLIO;

				public String getM_SPFOLIO () {
					return this.M_SPFOLIO;
				}
				
			    public String M_SCOMMENT0;

				public String getM_SCOMMENT0 () {
					return this.M_SCOMMENT0;
				}
				
			    public String M_SCOMMENT1;

				public String getM_SCOMMENT1 () {
					return this.M_SCOMMENT1;
				}
				
			    public String M_SCOMMENT2;

				public String getM_SCOMMENT2 () {
					return this.M_SCOMMENT2;
				}
				
			    public String M_SSTRATEGY;

				public String getM_SSTRATEGY () {
					return this.M_SSTRATEGY;
				}
				
			    public String M_SSECTION;

				public String getM_SSECTION () {
					return this.M_SSECTION;
				}
				
			    public String M_SENTITY;

				public String getM_SENTITY () {
					return this.M_SENTITY;
				}
				
			    public String M_TRN_STATUS;

				public String getM_TRN_STATUS () {
					return this.M_TRN_STATUS;
				}
				
			    public String M_TRN_DATE;

				public String getM_TRN_DATE () {
					return this.M_TRN_DATE;
				}
				
			    public String M_TRN_TIME;

				public String getM_TRN_TIME () {
					return this.M_TRN_TIME;
				}
				
			    public String M_TRN_EXP;

				public String getM_TRN_EXP () {
					return this.M_TRN_EXP;
				}
				
			    public String M_SYS_DATE;

				public String getM_SYS_DATE () {
					return this.M_SYS_DATE;
				}
				
			    public String M_CREATOR;

				public String getM_CREATOR () {
					return this.M_CREATOR;
				}
				
			    public String M_CRE_CMMOUT;

				public String getM_CRE_CMMOUT () {
					return this.M_CRE_CMMOUT;
				}
				
			    public String M_NB_EXT;

				public String getM_NB_EXT () {
					return this.M_NB_EXT;
				}
				
			    public String M_ACC_PROR;

				public String getM_ACC_PROR () {
					return this.M_ACC_PROR;
				}
				
			    public String M_RPL_AMO;

				public String getM_RPL_AMO () {
					return this.M_RPL_AMO;
				}
				
			    public String M_RPL_AMTTYP;

				public String getM_RPL_AMTTYP () {
					return this.M_RPL_AMTTYP;
				}
				
			    public String M_RPL_AMT;

				public String getM_RPL_AMT () {
					return this.M_RPL_AMT;
				}
				
			    public String M_RPL_CUR;

				public String getM_RPL_CUR () {
					return this.M_RPL_CUR;
				}
				
			    public String M_RPL_USRDAT;

				public String getM_RPL_USRDAT () {
					return this.M_RPL_USRDAT;
				}
				
			    public String M_RPL_DATE1;

				public String getM_RPL_DATE1 () {
					return this.M_RPL_DATE1;
				}
				
			    public String M_RPL_DATE2;

				public String getM_RPL_DATE2 () {
					return this.M_RPL_DATE2;
				}
				
			    public String M_UPL_FLAG;

				public String getM_UPL_FLAG () {
					return this.M_UPL_FLAG;
				}
				
			    public String M_UPL_MODE;

				public String getM_UPL_MODE () {
					return this.M_UPL_MODE;
				}
				
			    public String M_UPL_AMTEVC;

				public String getM_UPL_AMTEVC () {
					return this.M_UPL_AMTEVC;
				}
				
			    public String M_UPL_AMT;

				public String getM_UPL_AMT () {
					return this.M_UPL_AMT;
				}
				
			    public String M_UPL_AMTDIS;

				public String getM_UPL_AMTDIS () {
					return this.M_UPL_AMTDIS;
				}
				
			    public String M_IRV_TYPE;

				public String getM_IRV_TYPE () {
					return this.M_IRV_TYPE;
				}
				
			    public String M_IRV_AMT;

				public String getM_IRV_AMT () {
					return this.M_IRV_AMT;
				}
				
			    public String M_FCP_REVAL;

				public String getM_FCP_REVAL () {
					return this.M_FCP_REVAL;
				}
				
			    public String M_HEDGE_FLAG;

				public String getM_HEDGE_FLAG () {
					return this.M_HEDGE_FLAG;
				}
				
			    public String M_HEDGED_ID;

				public String getM_HEDGED_ID () {
					return this.M_HEDGED_ID;
				}
				
			    public String M_HEDGED_MAT;

				public String getM_HEDGED_MAT () {
					return this.M_HEDGED_MAT;
				}
				
			    public String M_PAY_NET;

				public String getM_PAY_NET () {
					return this.M_PAY_NET;
				}
				
			    public String M_VAL_STATUS;

				public String getM_VAL_STATUS () {
					return this.M_VAL_STATUS;
				}
				
			    public String M_MAIN;

				public String getM_MAIN () {
					return this.M_MAIN;
				}
				
			    public String M_FLOW_FLAG;

				public String getM_FLOW_FLAG () {
					return this.M_FLOW_FLAG;
				}
				
			    public String M_AREA_CODE;

				public String getM_AREA_CODE () {
					return this.M_AREA_CODE;
				}
				
			    public String M_MRPL_DATE;

				public String getM_MRPL_DATE () {
					return this.M_MRPL_DATE;
				}
				
			    public String M_MRPL_ONB;

				public String getM_MRPL_ONB () {
					return this.M_MRPL_ONB;
				}
				
			    public String M_CAN_GXIT;

				public String getM_CAN_GXIT () {
					return this.M_CAN_GXIT;
				}
				
			    public String M_GXIT_DATE;

				public String getM_GXIT_DATE () {
					return this.M_GXIT_DATE;
				}
				
			    public String M_MOP_LAST;

				public String getM_MOP_LAST () {
					return this.M_MOP_LAST;
				}
				
			    public String M_BRK_THIRDP;

				public String getM_BRK_THIRDP () {
					return this.M_BRK_THIRDP;
				}
				
			    public String M_OPT_FLWFST;

				public String getM_OPT_FLWFST () {
					return this.M_OPT_FLWFST;
				}
				
			    public String M_OPT_FLWLST;

				public String getM_OPT_FLWLST () {
					return this.M_OPT_FLWLST;
				}
				
			    public String M_OPT_ACCLST;

				public String getM_OPT_ACCLST () {
					return this.M_OPT_ACCLST;
				}
				
			    public String M_OPT_MOPFST;

				public String getM_OPT_MOPFST () {
					return this.M_OPT_MOPFST;
				}
				
			    public String M_OPT_MOPLST;

				public String getM_OPT_MOPLST () {
					return this.M_OPT_MOPLST;
				}
				
			    public String M_OPT_MOPCNT;

				public String getM_OPT_MOPCNT () {
					return this.M_OPT_MOPCNT;
				}
				
			    public String M_OPT_MOPNB;

				public String getM_OPT_MOPNB () {
					return this.M_OPT_MOPNB;
				}
				
			    public Integer M_BRW_NOM1;

				public Integer getM_BRW_NOM1 () {
					return this.M_BRW_NOM1;
				}
				
			    public String M_BRW_NOMU1;

				public String getM_BRW_NOMU1 () {
					return this.M_BRW_NOMU1;
				}
				
			    public String M_BRW_NOM2;

				public String getM_BRW_NOM2 () {
					return this.M_BRW_NOM2;
				}
				
			    public String M_BRW_NOMU2;

				public String getM_BRW_NOMU2 () {
					return this.M_BRW_NOMU2;
				}
				
			    public String M_BRW_RTE1;

				public String getM_BRW_RTE1 () {
					return this.M_BRW_RTE1;
				}
				
			    public String M_BRW_RTE2;

				public String getM_BRW_RTE2 () {
					return this.M_BRW_RTE2;
				}
				
			    public String M_BRW_MRG1;

				public String getM_BRW_MRG1 () {
					return this.M_BRW_MRG1;
				}
				
			    public String M_BRW_MRG2;

				public String getM_BRW_MRG2 () {
					return this.M_BRW_MRG2;
				}
				
			    public String M_BRW_STRK;

				public String getM_BRW_STRK () {
					return this.M_BRW_STRK;
				}
				
			    public String M_BRW_CP;

				public String getM_BRW_CP () {
					return this.M_BRW_CP;
				}
				
			    public String M_BRW_AE;

				public String getM_BRW_AE () {
					return this.M_BRW_AE;
				}
				
			    public String M_BRW_PR1;

				public String getM_BRW_PR1 () {
					return this.M_BRW_PR1;
				}
				
			    public String M_BRW_PR2;

				public String getM_BRW_PR2 () {
					return this.M_BRW_PR2;
				}
				
			    public String M_BRW_FV1;

				public String getM_BRW_FV1 () {
					return this.M_BRW_FV1;
				}
				
			    public String M_BRW_FV2;

				public String getM_BRW_FV2 () {
					return this.M_BRW_FV2;
				}
				
			    public String M_BRW_SDTE;

				public String getM_BRW_SDTE () {
					return this.M_BRW_SDTE;
				}
				
			    public String M_BRW_ODPL;

				public String getM_BRW_ODPL () {
					return this.M_BRW_ODPL;
				}
				
			    public String M_BRW_ODNC0;

				public String getM_BRW_ODNC0 () {
					return this.M_BRW_ODNC0;
				}
				
			    public String M_BRW_ODNC1;

				public String getM_BRW_ODNC1 () {
					return this.M_BRW_ODNC1;
				}
				
			    public String M_BRW_ODFC0;

				public String getM_BRW_ODFC0 () {
					return this.M_BRW_ODFC0;
				}
				
			    public String M_BRW_ODFC1;

				public String getM_BRW_ODFC1 () {
					return this.M_BRW_ODFC1;
				}
				
			    public String M_OPT_CMMNAT;

				public String getM_OPT_CMMNAT () {
					return this.M_OPT_CMMNAT;
				}
				
			    public String M_OPT_CMMDTE;

				public String getM_OPT_CMMDTE () {
					return this.M_OPT_CMMDTE;
				}
				
			    public String M_OPT_CMMCUR;

				public String getM_OPT_CMMCUR () {
					return this.M_OPT_CMMCUR;
				}
				
			    public String M_OPT_CMMSTL;

				public String getM_OPT_CMMSTL () {
					return this.M_OPT_CMMSTL;
				}
				
			    public String M_OPT_CMMSPD;

				public String getM_OPT_CMMSPD () {
					return this.M_OPT_CMMSPD;
				}
				
			    public String M_OPT_CMMSPS;

				public String getM_OPT_CMMSPS () {
					return this.M_OPT_CMMSPS;
				}
				
			    public String M_PURGE_DATE;

				public String getM_PURGE_DATE () {
					return this.M_PURGE_DATE;
				}
				
			    public String M_SALES;

				public String getM_SALES () {
					return this.M_SALES;
				}
				
			    public String M_LAT;

				public String getM_LAT () {
					return this.M_LAT;
				}
				
			    public String M_HOST_SYS;

				public String getM_HOST_SYS () {
					return this.M_HOST_SYS;
				}
				
			    public String M_CNT_INTID;

				public String getM_CNT_INTID () {
					return this.M_CNT_INTID;
				}
				
			    public String M_CONTRACT;

				public String getM_CONTRACT () {
					return this.M_CONTRACT;
				}
				
			    public String M_OPT_NATURE;

				public String getM_OPT_NATURE () {
					return this.M_OPT_NATURE;
				}
				
			    public String M_ORIG_PS_ID;

				public String getM_ORIG_PS_ID () {
					return this.M_ORIG_PS_ID;
				}
				
			    public String M_PS_ID;

				public String getM_PS_ID () {
					return this.M_PS_ID;
				}
				
			    public String M_STAT_CAT;

				public String getM_STAT_CAT () {
					return this.M_STAT_CAT;
				}
				
			    public String M_CUSTOM;

				public String getM_CUSTOM () {
					return this.M_CUSTOM;
				}
				
			    public String M_COMP_TYPO;

				public String getM_COMP_TYPO () {
					return this.M_COMP_TYPO;
				}
				
			    public String M_TYPOLOGY;

				public String getM_TYPOLOGY () {
					return this.M_TYPOLOGY;
				}
				
			    public String M_USAGE;

				public String getM_USAGE () {
					return this.M_USAGE;
				}
				
			    public String M_ONS_OFFS;

				public String getM_ONS_OFFS () {
					return this.M_ONS_OFFS;
				}
				
			    public String M_SETTL_METH;

				public String getM_SETTL_METH () {
					return this.M_SETTL_METH;
				}
				
			    public String M_P_ENTITY;

				public String getM_P_ENTITY () {
					return this.M_P_ENTITY;
				}
				
			    public String M__DT_TS;

				public String getM__DT_TS () {
					return this.M__DT_TS;
				}
				
			    public String M_OPT_STSVER;

				public String getM_OPT_STSVER () {
					return this.M_OPT_STSVER;
				}
				
			    public String M_PURGE_REF;

				public String getM_PURGE_REF () {
					return this.M_PURGE_REF;
				}
				
			    public String M_SRC_PFOLIO;

				public String getM_SRC_PFOLIO () {
					return this.M_SRC_PFOLIO;
				}
				
			    public String M_DST_PFOLIO;

				public String getM_DST_PFOLIO () {
					return this.M_DST_PFOLIO;
				}
				
			    public String M_COUNTRPART;

				public String getM_COUNTRPART () {
					return this.M_COUNTRPART;
				}
				
			    public String M_PURPOSE;

				public String getM_PURPOSE () {
					return this.M_PURPOSE;
				}
				
			    public String M_BLENTITY;

				public String getM_BLENTITY () {
					return this.M_BLENTITY;
				}
				
			    public String M_SLENTITY;

				public String getM_SLENTITY () {
					return this.M_SLENTITY;
				}
				
			    public String M_SI_TCI;

				public String getM_SI_TCI () {
					return this.M_SI_TCI;
				}
				
			    public String M_COLLAGCAT;

				public String getM_COLLAGCAT () {
					return this.M_COLLAGCAT;
				}
				
			    public String M_LEXTREF;

				public String getM_LEXTREF () {
					return this.M_LEXTREF;
				}
				
			    public String M_LEVTEXTREF;

				public String getM_LEVTEXTREF () {
					return this.M_LEVTEXTREF;
				}
				
			    public String M_LIMPEXTREF;

				public String getM_LIMPEXTREF () {
					return this.M_LIMPEXTREF;
				}
				
			    public String M_B_STG_NODE;

				public String getM_B_STG_NODE () {
					return this.M_B_STG_NODE;
				}
				
			    public String M_S_STG_NODE;

				public String getM_S_STG_NODE () {
					return this.M_S_STG_NODE;
				}
				
			    public String M_PRC_CTP;

				public String getM_PRC_CTP () {
					return this.M_PRC_CTP;
				}
				
			    public String M_REP_DATE;

				public String getM_REP_DATE () {
					return this.M_REP_DATE;
				}
				
			    public String M_TP_DTEEXP;

				public String getM_TP_DTEEXP () {
					return this.M_TP_DTEEXP;
				}
				
			    public String M_TP_PAY;

				public String getM_TP_PAY () {
					return this.M_TP_PAY;
				}
				
			    public String M_TP_PFOLIO;

				public String getM_TP_PFOLIO () {
					return this.M_TP_PFOLIO;
				}
				
			    public String M_SCR_MODULE;

				public String getM_SCR_MODULE () {
					return this.M_SCR_MODULE;
				}
				
			    public String M_TP_TRADER;

				public String getM_TP_TRADER () {
					return this.M_TP_TRADER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.TIMESTAMP = readString(dis);
					
					this.M_IDENTITY = readString(dis);
					
					this.M_NB = readString(dis);
					
					this.M_GID = readString(dis);
					
					this.M_TRN_FMLY = readString(dis);
					
					this.M_TRN_GRP = readString(dis);
					
					this.M_TRN_TYPE = readString(dis);
					
					this.M_TRN_GTYPE = readString(dis);
					
					this.M_TRN_TYPO = readString(dis);
					
					this.M_INSTRUMENT = readString(dis);
					
					this.M_RSKSECTION = readString(dis);
					
					this.M_PL_INSCUR = readString(dis);
					
					this.M_PL_KEY1 = readString(dis);
					
					this.M_MKT_LABEL = readString(dis);
					
					this.M_MKT_INDEX = readString(dis);
					
					this.M_CNS_ACTIVE = readString(dis);
					
					this.M_COMMENT_BS = readString(dis);
					
					this.M_CLIENT = readString(dis);
					
					this.M_BINTERNAL = readString(dis);
					
					this.M_BTRADER = readString(dis);
					
					this.M_BPFOLIO = readString(dis);
					
					this.M_BCOMMENT0 = readString(dis);
					
					this.M_BCOMMENT1 = readString(dis);
					
					this.M_BCOMMENT2 = readString(dis);
					
					this.M_BSTRATEGY = readString(dis);
					
					this.M_BSECTION = readString(dis);
					
					this.M_BENTITY = readString(dis);
					
					this.M_SINTERNAL = readString(dis);
					
					this.M_STRADER = readString(dis);
					
					this.M_SPFOLIO = readString(dis);
					
					this.M_SCOMMENT0 = readString(dis);
					
					this.M_SCOMMENT1 = readString(dis);
					
					this.M_SCOMMENT2 = readString(dis);
					
					this.M_SSTRATEGY = readString(dis);
					
					this.M_SSECTION = readString(dis);
					
					this.M_SENTITY = readString(dis);
					
					this.M_TRN_STATUS = readString(dis);
					
					this.M_TRN_DATE = readString(dis);
					
					this.M_TRN_TIME = readString(dis);
					
					this.M_TRN_EXP = readString(dis);
					
					this.M_SYS_DATE = readString(dis);
					
					this.M_CREATOR = readString(dis);
					
					this.M_CRE_CMMOUT = readString(dis);
					
					this.M_NB_EXT = readString(dis);
					
					this.M_ACC_PROR = readString(dis);
					
					this.M_RPL_AMO = readString(dis);
					
					this.M_RPL_AMTTYP = readString(dis);
					
					this.M_RPL_AMT = readString(dis);
					
					this.M_RPL_CUR = readString(dis);
					
					this.M_RPL_USRDAT = readString(dis);
					
					this.M_RPL_DATE1 = readString(dis);
					
					this.M_RPL_DATE2 = readString(dis);
					
					this.M_UPL_FLAG = readString(dis);
					
					this.M_UPL_MODE = readString(dis);
					
					this.M_UPL_AMTEVC = readString(dis);
					
					this.M_UPL_AMT = readString(dis);
					
					this.M_UPL_AMTDIS = readString(dis);
					
					this.M_IRV_TYPE = readString(dis);
					
					this.M_IRV_AMT = readString(dis);
					
					this.M_FCP_REVAL = readString(dis);
					
					this.M_HEDGE_FLAG = readString(dis);
					
					this.M_HEDGED_ID = readString(dis);
					
					this.M_HEDGED_MAT = readString(dis);
					
					this.M_PAY_NET = readString(dis);
					
					this.M_VAL_STATUS = readString(dis);
					
					this.M_MAIN = readString(dis);
					
					this.M_FLOW_FLAG = readString(dis);
					
					this.M_AREA_CODE = readString(dis);
					
					this.M_MRPL_DATE = readString(dis);
					
					this.M_MRPL_ONB = readString(dis);
					
					this.M_CAN_GXIT = readString(dis);
					
					this.M_GXIT_DATE = readString(dis);
					
					this.M_MOP_LAST = readString(dis);
					
					this.M_BRK_THIRDP = readString(dis);
					
					this.M_OPT_FLWFST = readString(dis);
					
					this.M_OPT_FLWLST = readString(dis);
					
					this.M_OPT_ACCLST = readString(dis);
					
					this.M_OPT_MOPFST = readString(dis);
					
					this.M_OPT_MOPLST = readString(dis);
					
					this.M_OPT_MOPCNT = readString(dis);
					
					this.M_OPT_MOPNB = readString(dis);
					
						this.M_BRW_NOM1 = readInteger(dis);
					
					this.M_BRW_NOMU1 = readString(dis);
					
					this.M_BRW_NOM2 = readString(dis);
					
					this.M_BRW_NOMU2 = readString(dis);
					
					this.M_BRW_RTE1 = readString(dis);
					
					this.M_BRW_RTE2 = readString(dis);
					
					this.M_BRW_MRG1 = readString(dis);
					
					this.M_BRW_MRG2 = readString(dis);
					
					this.M_BRW_STRK = readString(dis);
					
					this.M_BRW_CP = readString(dis);
					
					this.M_BRW_AE = readString(dis);
					
					this.M_BRW_PR1 = readString(dis);
					
					this.M_BRW_PR2 = readString(dis);
					
					this.M_BRW_FV1 = readString(dis);
					
					this.M_BRW_FV2 = readString(dis);
					
					this.M_BRW_SDTE = readString(dis);
					
					this.M_BRW_ODPL = readString(dis);
					
					this.M_BRW_ODNC0 = readString(dis);
					
					this.M_BRW_ODNC1 = readString(dis);
					
					this.M_BRW_ODFC0 = readString(dis);
					
					this.M_BRW_ODFC1 = readString(dis);
					
					this.M_OPT_CMMNAT = readString(dis);
					
					this.M_OPT_CMMDTE = readString(dis);
					
					this.M_OPT_CMMCUR = readString(dis);
					
					this.M_OPT_CMMSTL = readString(dis);
					
					this.M_OPT_CMMSPD = readString(dis);
					
					this.M_OPT_CMMSPS = readString(dis);
					
					this.M_PURGE_DATE = readString(dis);
					
					this.M_SALES = readString(dis);
					
					this.M_LAT = readString(dis);
					
					this.M_HOST_SYS = readString(dis);
					
					this.M_CNT_INTID = readString(dis);
					
					this.M_CONTRACT = readString(dis);
					
					this.M_OPT_NATURE = readString(dis);
					
					this.M_ORIG_PS_ID = readString(dis);
					
					this.M_PS_ID = readString(dis);
					
					this.M_STAT_CAT = readString(dis);
					
					this.M_CUSTOM = readString(dis);
					
					this.M_COMP_TYPO = readString(dis);
					
					this.M_TYPOLOGY = readString(dis);
					
					this.M_USAGE = readString(dis);
					
					this.M_ONS_OFFS = readString(dis);
					
					this.M_SETTL_METH = readString(dis);
					
					this.M_P_ENTITY = readString(dis);
					
					this.M__DT_TS = readString(dis);
					
					this.M_OPT_STSVER = readString(dis);
					
					this.M_PURGE_REF = readString(dis);
					
					this.M_SRC_PFOLIO = readString(dis);
					
					this.M_DST_PFOLIO = readString(dis);
					
					this.M_COUNTRPART = readString(dis);
					
					this.M_PURPOSE = readString(dis);
					
					this.M_BLENTITY = readString(dis);
					
					this.M_SLENTITY = readString(dis);
					
					this.M_SI_TCI = readString(dis);
					
					this.M_COLLAGCAT = readString(dis);
					
					this.M_LEXTREF = readString(dis);
					
					this.M_LEVTEXTREF = readString(dis);
					
					this.M_LIMPEXTREF = readString(dis);
					
					this.M_B_STG_NODE = readString(dis);
					
					this.M_S_STG_NODE = readString(dis);
					
					this.M_PRC_CTP = readString(dis);
					
					this.M_REP_DATE = readString(dis);
					
					this.M_TP_DTEEXP = readString(dis);
					
					this.M_TP_PAY = readString(dis);
					
					this.M_TP_PFOLIO = readString(dis);
					
					this.M_SCR_MODULE = readString(dis);
					
					this.M_TP_TRADER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIMESTAMP,dos);
					
					// String
				
						writeString(this.M_IDENTITY,dos);
					
					// String
				
						writeString(this.M_NB,dos);
					
					// String
				
						writeString(this.M_GID,dos);
					
					// String
				
						writeString(this.M_TRN_FMLY,dos);
					
					// String
				
						writeString(this.M_TRN_GRP,dos);
					
					// String
				
						writeString(this.M_TRN_TYPE,dos);
					
					// String
				
						writeString(this.M_TRN_GTYPE,dos);
					
					// String
				
						writeString(this.M_TRN_TYPO,dos);
					
					// String
				
						writeString(this.M_INSTRUMENT,dos);
					
					// String
				
						writeString(this.M_RSKSECTION,dos);
					
					// String
				
						writeString(this.M_PL_INSCUR,dos);
					
					// String
				
						writeString(this.M_PL_KEY1,dos);
					
					// String
				
						writeString(this.M_MKT_LABEL,dos);
					
					// String
				
						writeString(this.M_MKT_INDEX,dos);
					
					// String
				
						writeString(this.M_CNS_ACTIVE,dos);
					
					// String
				
						writeString(this.M_COMMENT_BS,dos);
					
					// String
				
						writeString(this.M_CLIENT,dos);
					
					// String
				
						writeString(this.M_BINTERNAL,dos);
					
					// String
				
						writeString(this.M_BTRADER,dos);
					
					// String
				
						writeString(this.M_BPFOLIO,dos);
					
					// String
				
						writeString(this.M_BCOMMENT0,dos);
					
					// String
				
						writeString(this.M_BCOMMENT1,dos);
					
					// String
				
						writeString(this.M_BCOMMENT2,dos);
					
					// String
				
						writeString(this.M_BSTRATEGY,dos);
					
					// String
				
						writeString(this.M_BSECTION,dos);
					
					// String
				
						writeString(this.M_BENTITY,dos);
					
					// String
				
						writeString(this.M_SINTERNAL,dos);
					
					// String
				
						writeString(this.M_STRADER,dos);
					
					// String
				
						writeString(this.M_SPFOLIO,dos);
					
					// String
				
						writeString(this.M_SCOMMENT0,dos);
					
					// String
				
						writeString(this.M_SCOMMENT1,dos);
					
					// String
				
						writeString(this.M_SCOMMENT2,dos);
					
					// String
				
						writeString(this.M_SSTRATEGY,dos);
					
					// String
				
						writeString(this.M_SSECTION,dos);
					
					// String
				
						writeString(this.M_SENTITY,dos);
					
					// String
				
						writeString(this.M_TRN_STATUS,dos);
					
					// String
				
						writeString(this.M_TRN_DATE,dos);
					
					// String
				
						writeString(this.M_TRN_TIME,dos);
					
					// String
				
						writeString(this.M_TRN_EXP,dos);
					
					// String
				
						writeString(this.M_SYS_DATE,dos);
					
					// String
				
						writeString(this.M_CREATOR,dos);
					
					// String
				
						writeString(this.M_CRE_CMMOUT,dos);
					
					// String
				
						writeString(this.M_NB_EXT,dos);
					
					// String
				
						writeString(this.M_ACC_PROR,dos);
					
					// String
				
						writeString(this.M_RPL_AMO,dos);
					
					// String
				
						writeString(this.M_RPL_AMTTYP,dos);
					
					// String
				
						writeString(this.M_RPL_AMT,dos);
					
					// String
				
						writeString(this.M_RPL_CUR,dos);
					
					// String
				
						writeString(this.M_RPL_USRDAT,dos);
					
					// String
				
						writeString(this.M_RPL_DATE1,dos);
					
					// String
				
						writeString(this.M_RPL_DATE2,dos);
					
					// String
				
						writeString(this.M_UPL_FLAG,dos);
					
					// String
				
						writeString(this.M_UPL_MODE,dos);
					
					// String
				
						writeString(this.M_UPL_AMTEVC,dos);
					
					// String
				
						writeString(this.M_UPL_AMT,dos);
					
					// String
				
						writeString(this.M_UPL_AMTDIS,dos);
					
					// String
				
						writeString(this.M_IRV_TYPE,dos);
					
					// String
				
						writeString(this.M_IRV_AMT,dos);
					
					// String
				
						writeString(this.M_FCP_REVAL,dos);
					
					// String
				
						writeString(this.M_HEDGE_FLAG,dos);
					
					// String
				
						writeString(this.M_HEDGED_ID,dos);
					
					// String
				
						writeString(this.M_HEDGED_MAT,dos);
					
					// String
				
						writeString(this.M_PAY_NET,dos);
					
					// String
				
						writeString(this.M_VAL_STATUS,dos);
					
					// String
				
						writeString(this.M_MAIN,dos);
					
					// String
				
						writeString(this.M_FLOW_FLAG,dos);
					
					// String
				
						writeString(this.M_AREA_CODE,dos);
					
					// String
				
						writeString(this.M_MRPL_DATE,dos);
					
					// String
				
						writeString(this.M_MRPL_ONB,dos);
					
					// String
				
						writeString(this.M_CAN_GXIT,dos);
					
					// String
				
						writeString(this.M_GXIT_DATE,dos);
					
					// String
				
						writeString(this.M_MOP_LAST,dos);
					
					// String
				
						writeString(this.M_BRK_THIRDP,dos);
					
					// String
				
						writeString(this.M_OPT_FLWFST,dos);
					
					// String
				
						writeString(this.M_OPT_FLWLST,dos);
					
					// String
				
						writeString(this.M_OPT_ACCLST,dos);
					
					// String
				
						writeString(this.M_OPT_MOPFST,dos);
					
					// String
				
						writeString(this.M_OPT_MOPLST,dos);
					
					// String
				
						writeString(this.M_OPT_MOPCNT,dos);
					
					// String
				
						writeString(this.M_OPT_MOPNB,dos);
					
					// Integer
				
						writeInteger(this.M_BRW_NOM1,dos);
					
					// String
				
						writeString(this.M_BRW_NOMU1,dos);
					
					// String
				
						writeString(this.M_BRW_NOM2,dos);
					
					// String
				
						writeString(this.M_BRW_NOMU2,dos);
					
					// String
				
						writeString(this.M_BRW_RTE1,dos);
					
					// String
				
						writeString(this.M_BRW_RTE2,dos);
					
					// String
				
						writeString(this.M_BRW_MRG1,dos);
					
					// String
				
						writeString(this.M_BRW_MRG2,dos);
					
					// String
				
						writeString(this.M_BRW_STRK,dos);
					
					// String
				
						writeString(this.M_BRW_CP,dos);
					
					// String
				
						writeString(this.M_BRW_AE,dos);
					
					// String
				
						writeString(this.M_BRW_PR1,dos);
					
					// String
				
						writeString(this.M_BRW_PR2,dos);
					
					// String
				
						writeString(this.M_BRW_FV1,dos);
					
					// String
				
						writeString(this.M_BRW_FV2,dos);
					
					// String
				
						writeString(this.M_BRW_SDTE,dos);
					
					// String
				
						writeString(this.M_BRW_ODPL,dos);
					
					// String
				
						writeString(this.M_BRW_ODNC0,dos);
					
					// String
				
						writeString(this.M_BRW_ODNC1,dos);
					
					// String
				
						writeString(this.M_BRW_ODFC0,dos);
					
					// String
				
						writeString(this.M_BRW_ODFC1,dos);
					
					// String
				
						writeString(this.M_OPT_CMMNAT,dos);
					
					// String
				
						writeString(this.M_OPT_CMMDTE,dos);
					
					// String
				
						writeString(this.M_OPT_CMMCUR,dos);
					
					// String
				
						writeString(this.M_OPT_CMMSTL,dos);
					
					// String
				
						writeString(this.M_OPT_CMMSPD,dos);
					
					// String
				
						writeString(this.M_OPT_CMMSPS,dos);
					
					// String
				
						writeString(this.M_PURGE_DATE,dos);
					
					// String
				
						writeString(this.M_SALES,dos);
					
					// String
				
						writeString(this.M_LAT,dos);
					
					// String
				
						writeString(this.M_HOST_SYS,dos);
					
					// String
				
						writeString(this.M_CNT_INTID,dos);
					
					// String
				
						writeString(this.M_CONTRACT,dos);
					
					// String
				
						writeString(this.M_OPT_NATURE,dos);
					
					// String
				
						writeString(this.M_ORIG_PS_ID,dos);
					
					// String
				
						writeString(this.M_PS_ID,dos);
					
					// String
				
						writeString(this.M_STAT_CAT,dos);
					
					// String
				
						writeString(this.M_CUSTOM,dos);
					
					// String
				
						writeString(this.M_COMP_TYPO,dos);
					
					// String
				
						writeString(this.M_TYPOLOGY,dos);
					
					// String
				
						writeString(this.M_USAGE,dos);
					
					// String
				
						writeString(this.M_ONS_OFFS,dos);
					
					// String
				
						writeString(this.M_SETTL_METH,dos);
					
					// String
				
						writeString(this.M_P_ENTITY,dos);
					
					// String
				
						writeString(this.M__DT_TS,dos);
					
					// String
				
						writeString(this.M_OPT_STSVER,dos);
					
					// String
				
						writeString(this.M_PURGE_REF,dos);
					
					// String
				
						writeString(this.M_SRC_PFOLIO,dos);
					
					// String
				
						writeString(this.M_DST_PFOLIO,dos);
					
					// String
				
						writeString(this.M_COUNTRPART,dos);
					
					// String
				
						writeString(this.M_PURPOSE,dos);
					
					// String
				
						writeString(this.M_BLENTITY,dos);
					
					// String
				
						writeString(this.M_SLENTITY,dos);
					
					// String
				
						writeString(this.M_SI_TCI,dos);
					
					// String
				
						writeString(this.M_COLLAGCAT,dos);
					
					// String
				
						writeString(this.M_LEXTREF,dos);
					
					// String
				
						writeString(this.M_LEVTEXTREF,dos);
					
					// String
				
						writeString(this.M_LIMPEXTREF,dos);
					
					// String
				
						writeString(this.M_B_STG_NODE,dos);
					
					// String
				
						writeString(this.M_S_STG_NODE,dos);
					
					// String
				
						writeString(this.M_PRC_CTP,dos);
					
					// String
				
						writeString(this.M_REP_DATE,dos);
					
					// String
				
						writeString(this.M_TP_DTEEXP,dos);
					
					// String
				
						writeString(this.M_TP_PAY,dos);
					
					// String
				
						writeString(this.M_TP_PFOLIO,dos);
					
					// String
				
						writeString(this.M_SCR_MODULE,dos);
					
					// String
				
						writeString(this.M_TP_TRADER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIMESTAMP="+TIMESTAMP);
		sb.append(",M_IDENTITY="+M_IDENTITY);
		sb.append(",M_NB="+M_NB);
		sb.append(",M_GID="+M_GID);
		sb.append(",M_TRN_FMLY="+M_TRN_FMLY);
		sb.append(",M_TRN_GRP="+M_TRN_GRP);
		sb.append(",M_TRN_TYPE="+M_TRN_TYPE);
		sb.append(",M_TRN_GTYPE="+M_TRN_GTYPE);
		sb.append(",M_TRN_TYPO="+M_TRN_TYPO);
		sb.append(",M_INSTRUMENT="+M_INSTRUMENT);
		sb.append(",M_RSKSECTION="+M_RSKSECTION);
		sb.append(",M_PL_INSCUR="+M_PL_INSCUR);
		sb.append(",M_PL_KEY1="+M_PL_KEY1);
		sb.append(",M_MKT_LABEL="+M_MKT_LABEL);
		sb.append(",M_MKT_INDEX="+M_MKT_INDEX);
		sb.append(",M_CNS_ACTIVE="+M_CNS_ACTIVE);
		sb.append(",M_COMMENT_BS="+M_COMMENT_BS);
		sb.append(",M_CLIENT="+M_CLIENT);
		sb.append(",M_BINTERNAL="+M_BINTERNAL);
		sb.append(",M_BTRADER="+M_BTRADER);
		sb.append(",M_BPFOLIO="+M_BPFOLIO);
		sb.append(",M_BCOMMENT0="+M_BCOMMENT0);
		sb.append(",M_BCOMMENT1="+M_BCOMMENT1);
		sb.append(",M_BCOMMENT2="+M_BCOMMENT2);
		sb.append(",M_BSTRATEGY="+M_BSTRATEGY);
		sb.append(",M_BSECTION="+M_BSECTION);
		sb.append(",M_BENTITY="+M_BENTITY);
		sb.append(",M_SINTERNAL="+M_SINTERNAL);
		sb.append(",M_STRADER="+M_STRADER);
		sb.append(",M_SPFOLIO="+M_SPFOLIO);
		sb.append(",M_SCOMMENT0="+M_SCOMMENT0);
		sb.append(",M_SCOMMENT1="+M_SCOMMENT1);
		sb.append(",M_SCOMMENT2="+M_SCOMMENT2);
		sb.append(",M_SSTRATEGY="+M_SSTRATEGY);
		sb.append(",M_SSECTION="+M_SSECTION);
		sb.append(",M_SENTITY="+M_SENTITY);
		sb.append(",M_TRN_STATUS="+M_TRN_STATUS);
		sb.append(",M_TRN_DATE="+M_TRN_DATE);
		sb.append(",M_TRN_TIME="+M_TRN_TIME);
		sb.append(",M_TRN_EXP="+M_TRN_EXP);
		sb.append(",M_SYS_DATE="+M_SYS_DATE);
		sb.append(",M_CREATOR="+M_CREATOR);
		sb.append(",M_CRE_CMMOUT="+M_CRE_CMMOUT);
		sb.append(",M_NB_EXT="+M_NB_EXT);
		sb.append(",M_ACC_PROR="+M_ACC_PROR);
		sb.append(",M_RPL_AMO="+M_RPL_AMO);
		sb.append(",M_RPL_AMTTYP="+M_RPL_AMTTYP);
		sb.append(",M_RPL_AMT="+M_RPL_AMT);
		sb.append(",M_RPL_CUR="+M_RPL_CUR);
		sb.append(",M_RPL_USRDAT="+M_RPL_USRDAT);
		sb.append(",M_RPL_DATE1="+M_RPL_DATE1);
		sb.append(",M_RPL_DATE2="+M_RPL_DATE2);
		sb.append(",M_UPL_FLAG="+M_UPL_FLAG);
		sb.append(",M_UPL_MODE="+M_UPL_MODE);
		sb.append(",M_UPL_AMTEVC="+M_UPL_AMTEVC);
		sb.append(",M_UPL_AMT="+M_UPL_AMT);
		sb.append(",M_UPL_AMTDIS="+M_UPL_AMTDIS);
		sb.append(",M_IRV_TYPE="+M_IRV_TYPE);
		sb.append(",M_IRV_AMT="+M_IRV_AMT);
		sb.append(",M_FCP_REVAL="+M_FCP_REVAL);
		sb.append(",M_HEDGE_FLAG="+M_HEDGE_FLAG);
		sb.append(",M_HEDGED_ID="+M_HEDGED_ID);
		sb.append(",M_HEDGED_MAT="+M_HEDGED_MAT);
		sb.append(",M_PAY_NET="+M_PAY_NET);
		sb.append(",M_VAL_STATUS="+M_VAL_STATUS);
		sb.append(",M_MAIN="+M_MAIN);
		sb.append(",M_FLOW_FLAG="+M_FLOW_FLAG);
		sb.append(",M_AREA_CODE="+M_AREA_CODE);
		sb.append(",M_MRPL_DATE="+M_MRPL_DATE);
		sb.append(",M_MRPL_ONB="+M_MRPL_ONB);
		sb.append(",M_CAN_GXIT="+M_CAN_GXIT);
		sb.append(",M_GXIT_DATE="+M_GXIT_DATE);
		sb.append(",M_MOP_LAST="+M_MOP_LAST);
		sb.append(",M_BRK_THIRDP="+M_BRK_THIRDP);
		sb.append(",M_OPT_FLWFST="+M_OPT_FLWFST);
		sb.append(",M_OPT_FLWLST="+M_OPT_FLWLST);
		sb.append(",M_OPT_ACCLST="+M_OPT_ACCLST);
		sb.append(",M_OPT_MOPFST="+M_OPT_MOPFST);
		sb.append(",M_OPT_MOPLST="+M_OPT_MOPLST);
		sb.append(",M_OPT_MOPCNT="+M_OPT_MOPCNT);
		sb.append(",M_OPT_MOPNB="+M_OPT_MOPNB);
		sb.append(",M_BRW_NOM1="+String.valueOf(M_BRW_NOM1));
		sb.append(",M_BRW_NOMU1="+M_BRW_NOMU1);
		sb.append(",M_BRW_NOM2="+M_BRW_NOM2);
		sb.append(",M_BRW_NOMU2="+M_BRW_NOMU2);
		sb.append(",M_BRW_RTE1="+M_BRW_RTE1);
		sb.append(",M_BRW_RTE2="+M_BRW_RTE2);
		sb.append(",M_BRW_MRG1="+M_BRW_MRG1);
		sb.append(",M_BRW_MRG2="+M_BRW_MRG2);
		sb.append(",M_BRW_STRK="+M_BRW_STRK);
		sb.append(",M_BRW_CP="+M_BRW_CP);
		sb.append(",M_BRW_AE="+M_BRW_AE);
		sb.append(",M_BRW_PR1="+M_BRW_PR1);
		sb.append(",M_BRW_PR2="+M_BRW_PR2);
		sb.append(",M_BRW_FV1="+M_BRW_FV1);
		sb.append(",M_BRW_FV2="+M_BRW_FV2);
		sb.append(",M_BRW_SDTE="+M_BRW_SDTE);
		sb.append(",M_BRW_ODPL="+M_BRW_ODPL);
		sb.append(",M_BRW_ODNC0="+M_BRW_ODNC0);
		sb.append(",M_BRW_ODNC1="+M_BRW_ODNC1);
		sb.append(",M_BRW_ODFC0="+M_BRW_ODFC0);
		sb.append(",M_BRW_ODFC1="+M_BRW_ODFC1);
		sb.append(",M_OPT_CMMNAT="+M_OPT_CMMNAT);
		sb.append(",M_OPT_CMMDTE="+M_OPT_CMMDTE);
		sb.append(",M_OPT_CMMCUR="+M_OPT_CMMCUR);
		sb.append(",M_OPT_CMMSTL="+M_OPT_CMMSTL);
		sb.append(",M_OPT_CMMSPD="+M_OPT_CMMSPD);
		sb.append(",M_OPT_CMMSPS="+M_OPT_CMMSPS);
		sb.append(",M_PURGE_DATE="+M_PURGE_DATE);
		sb.append(",M_SALES="+M_SALES);
		sb.append(",M_LAT="+M_LAT);
		sb.append(",M_HOST_SYS="+M_HOST_SYS);
		sb.append(",M_CNT_INTID="+M_CNT_INTID);
		sb.append(",M_CONTRACT="+M_CONTRACT);
		sb.append(",M_OPT_NATURE="+M_OPT_NATURE);
		sb.append(",M_ORIG_PS_ID="+M_ORIG_PS_ID);
		sb.append(",M_PS_ID="+M_PS_ID);
		sb.append(",M_STAT_CAT="+M_STAT_CAT);
		sb.append(",M_CUSTOM="+M_CUSTOM);
		sb.append(",M_COMP_TYPO="+M_COMP_TYPO);
		sb.append(",M_TYPOLOGY="+M_TYPOLOGY);
		sb.append(",M_USAGE="+M_USAGE);
		sb.append(",M_ONS_OFFS="+M_ONS_OFFS);
		sb.append(",M_SETTL_METH="+M_SETTL_METH);
		sb.append(",M_P_ENTITY="+M_P_ENTITY);
		sb.append(",M__DT_TS="+M__DT_TS);
		sb.append(",M_OPT_STSVER="+M_OPT_STSVER);
		sb.append(",M_PURGE_REF="+M_PURGE_REF);
		sb.append(",M_SRC_PFOLIO="+M_SRC_PFOLIO);
		sb.append(",M_DST_PFOLIO="+M_DST_PFOLIO);
		sb.append(",M_COUNTRPART="+M_COUNTRPART);
		sb.append(",M_PURPOSE="+M_PURPOSE);
		sb.append(",M_BLENTITY="+M_BLENTITY);
		sb.append(",M_SLENTITY="+M_SLENTITY);
		sb.append(",M_SI_TCI="+M_SI_TCI);
		sb.append(",M_COLLAGCAT="+M_COLLAGCAT);
		sb.append(",M_LEXTREF="+M_LEXTREF);
		sb.append(",M_LEVTEXTREF="+M_LEVTEXTREF);
		sb.append(",M_LIMPEXTREF="+M_LIMPEXTREF);
		sb.append(",M_B_STG_NODE="+M_B_STG_NODE);
		sb.append(",M_S_STG_NODE="+M_S_STG_NODE);
		sb.append(",M_PRC_CTP="+M_PRC_CTP);
		sb.append(",M_REP_DATE="+M_REP_DATE);
		sb.append(",M_TP_DTEEXP="+M_TP_DTEEXP);
		sb.append(",M_TP_PAY="+M_TP_PAY);
		sb.append(",M_TP_PFOLIO="+M_TP_PFOLIO);
		sb.append(",M_SCR_MODULE="+M_SCR_MODULE);
		sb.append(",M_TP_TRADER="+M_TP_TRADER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row2Struct row2 = new row2Struct();
row4Struct row4 = new row4Struct();
DataStruct Data = new DataStruct();
row8Struct row8 = new row8Struct();
row5Struct row5 = new row5Struct();
row3Struct row3 = new row3Struct();









	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */



	
	/**
	 * [tMysqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_4", false);
		start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Data" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_4 = 0;
		
    	class BytesLimit65535_tMysqlOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_4().limitLog4jByte();






int nb_line_tMysqlOutput_4 = 0;
int nb_line_update_tMysqlOutput_4 = 0;
int nb_line_inserted_tMysqlOutput_4 = 0;
int nb_line_deleted_tMysqlOutput_4 = 0;
int nb_line_rejected_tMysqlOutput_4 = 0;

int deletedCount_tMysqlOutput_4=0;
int updatedCount_tMysqlOutput_4=0;
int insertedCount_tMysqlOutput_4=0;

int rejectedCount_tMysqlOutput_4=0;

String tableName_tMysqlOutput_4 = "stage";
boolean whetherReject_tMysqlOutput_4 = false;

java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
long date_tMysqlOutput_4;

java.sql.Connection conn_tMysqlOutput_4 = null;
		String dbProperties_tMysqlOutput_4 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_4 = null;
		if(dbProperties_tMysqlOutput_4 == null || dbProperties_tMysqlOutput_4.trim().length() == 0) {
			url_tMysqlOutput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_4 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_4.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_4;
		}
		String driverClass_tMysqlOutput_4 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_4 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;
		java.lang.Class.forName(driverClass_tMysqlOutput_4);
		
		conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(url_tMysqlOutput_4, dbUser_tMysqlOutput_4, dbPwd_tMysqlOutput_4);
		
	
	resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
        conn_tMysqlOutput_4.setAutoCommit(false);
        int commitEvery_tMysqlOutput_4 = 10000;
        int commitCounter_tMysqlOutput_4 = 0;

int count_tMysqlOutput_4=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_4 = conn_tMysqlOutput_4.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_4 = dbMetaData_tMysqlOutput_4.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_4 = false;
                                while(rsTable_tMysqlOutput_4.next()) {
                                    String table_tMysqlOutput_4 = rsTable_tMysqlOutput_4.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_4.equalsIgnoreCase("stage")) {
                                        whetherExist_tMysqlOutput_4 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_4.close();
                                if(!whetherExist_tMysqlOutput_4) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_4 = conn_tMysqlOutput_4.createStatement();
                                        stmtCreate_tMysqlOutput_4.execute("CREATE TABLE `" + tableName_tMysqlOutput_4 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` VARCHAR(50)  ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` VARCHAR(50)  ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`P_L` DOUBLE ,`precio` DOUBLE(22,2)  ,`contraparte` VARCHAR(30)  )");
                                    stmtCreate_tMysqlOutput_4.close();
                                }

				String insert_tMysqlOutput_4 = "INSERT INTO `" + "stage" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`P_L`,`precio`,`contraparte`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_4 = 100;
	   			int batchSizeCounter_tMysqlOutput_4=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement(insert_tMysqlOutput_4);


 



/**
 * [tMysqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
DataStruct Data_tmp = new DataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_2", false);
		start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_2 = 0;
		
    	class BytesLimit65535_tMysqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_2().limitLog4jByte();






int nb_line_tMysqlOutput_2 = 0;
int nb_line_update_tMysqlOutput_2 = 0;
int nb_line_inserted_tMysqlOutput_2 = 0;
int nb_line_deleted_tMysqlOutput_2 = 0;
int nb_line_rejected_tMysqlOutput_2 = 0;

int deletedCount_tMysqlOutput_2=0;
int updatedCount_tMysqlOutput_2=0;
int insertedCount_tMysqlOutput_2=0;

int rejectedCount_tMysqlOutput_2=0;

String tableName_tMysqlOutput_2 = "errores_fut";
boolean whetherReject_tMysqlOutput_2 = false;

java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
long date_tMysqlOutput_2;

java.sql.Connection conn_tMysqlOutput_2 = null;
		String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_2 = null;
		if(dbProperties_tMysqlOutput_2 == null || dbProperties_tMysqlOutput_2.trim().length() == 0) {
			url_tMysqlOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_2.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_2;
		}
		String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_2 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
		java.lang.Class.forName(driverClass_tMysqlOutput_2);
		
		conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(url_tMysqlOutput_2, dbUser_tMysqlOutput_2, dbPwd_tMysqlOutput_2);
		
	
	resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
        conn_tMysqlOutput_2.setAutoCommit(false);
        int commitEvery_tMysqlOutput_2 = 10000;
        int commitCounter_tMysqlOutput_2 = 0;

int count_tMysqlOutput_2=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_2 = conn_tMysqlOutput_2.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_2 = dbMetaData_tMysqlOutput_2.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_2 = false;
                                while(rsTable_tMysqlOutput_2.next()) {
                                    String table_tMysqlOutput_2 = rsTable_tMysqlOutput_2.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_2.equalsIgnoreCase("errores_fut")) {
                                        whetherExist_tMysqlOutput_2 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_2.close();
                                if(!whetherExist_tMysqlOutput_2) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_2 = conn_tMysqlOutput_2.createStatement();
                                        stmtCreate_tMysqlOutput_2.execute("CREATE TABLE `" + tableName_tMysqlOutput_2 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` DATETIME ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` VARCHAR(50)  ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`P_L` DOUBLE ,`precio` DOUBLE(22,2)  ,`contraparte` VARCHAR(30)  ,`errorMessage` VARCHAR(255)  )");
                                    stmtCreate_tMysqlOutput_2.close();
                                }

				String insert_tMysqlOutput_2 = "INSERT INTO `" + "errores_fut" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`P_L`,`precio`,`contraparte`,`errorMessage`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_2 = 100;
	   			int batchSizeCounter_tMysqlOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2.prepareStatement(insert_tMysqlOutput_2);


 



/**
 * [tMysqlOutput_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */




	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "errores_fut";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mariadb://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mariadb://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.mariadb.jdbc.Driver";
		
		String dbUser_tMysqlOutput_1 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tMysqlOutput_1 = false;
                                while(rsTable_tMysqlOutput_1.next()) {
                                    String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                                    if(table_tMysqlOutput_1.equalsIgnoreCase("errores_fut")) {
                                        whetherExist_tMysqlOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tMysqlOutput_1.close();
                                if(!whetherExist_tMysqlOutput_1) {
                                    java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
                                        stmtCreate_tMysqlOutput_1.execute("CREATE TABLE `" + tableName_tMysqlOutput_1 + "`(`id_operacion` VARCHAR(20)  ,`estado` VARCHAR(20)  ,`fecha_carga` DATETIME ,`fecha_finalizacion` VARCHAR(50)  ,`fecha_insercion` VARCHAR(50)  ,`fecha_pago` VARCHAR(50)  ,`portafolio_nombre` VARCHAR(20)  ,`sistema_nombre` VARCHAR(20)  ,`cant_contratos` INT(0)  ,`trader_nombre` VARCHAR(20)  ,`producto_nombre` VARCHAR(20)  ,`tipo_operacion_nombre` VARCHAR(20)  ,`moneda1` VARCHAR(20)  ,`moneda2` VARCHAR(20)  ,`monto_operacion` DOUBLE ,`P_L` DOUBLE ,`precio` DOUBLE(22,2)  ,`contraparte` VARCHAR(30)  ,`errorMessage` VARCHAR(255)  )");
                                    stmtCreate_tMysqlOutput_1.close();
                                }

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "errores_fut" + "` (`id_operacion`,`estado`,`fecha_carga`,`fecha_finalizacion`,`fecha_insercion`,`fecha_pago`,`portafolio_nombre`,`sistema_nombre`,`cant_contratos`,`trader_nombre`,`producto_nombre`,`tipo_operacion_nombre`,`moneda1`,`moneda2`,`monto_operacion`,`P_L`,`precio`,`contraparte`,`errorMessage`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date Pre_fecha_carga;
	String Pre_fecha_insercion;
	String var1;
	java.util.Date var2;
	String var3;
	Double Pre_monto;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.TIMESTAMP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.M_IDENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.M_NB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.M_GID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.M_TRN_FMLY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.M_TRN_GRP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.M_TRN_TYPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.M_TRN_GTYPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.M_TRN_TYPO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.M_INSTRUMENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.M_RSKSECTION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.M_PL_INSCUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.M_PL_KEY1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.M_MKT_LABEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row1.M_MKT_INDEX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row1.M_CNS_ACTIVE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row1.M_COMMENT_BS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row1.M_CLIENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row1.M_BINTERNAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row1.M_BTRADER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row1.M_BPFOLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row1.M_BCOMMENT0 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row1.M_BCOMMENT1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row1.M_BCOMMENT2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row1.M_BSTRATEGY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row1.M_BSECTION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row1.M_BENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row1.M_SINTERNAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row1.M_STRADER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row1.M_SPFOLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row1.M_SCOMMENT0 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row1.M_SCOMMENT1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row1.M_SCOMMENT2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1.M_SSTRATEGY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1.M_SSECTION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1.M_SENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row1.M_TRN_STATUS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row1.M_TRN_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row1.M_TRN_TIME = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row1.M_TRN_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row1.M_SYS_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row1.M_CREATOR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row1.M_CRE_CMMOUT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row1.M_NB_EXT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row1.M_ACC_PROR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row1.M_RPL_AMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row1.M_RPL_AMTTYP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row1.M_RPL_AMT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row1.M_RPL_CUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row1.M_RPL_USRDAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row1.M_RPL_DATE1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row1.M_RPL_DATE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row1.M_UPL_FLAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row1.M_UPL_MODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row1.M_UPL_AMTEVC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row1.M_UPL_AMT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row1.M_UPL_AMTDIS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row1.M_IRV_TYPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							row1.M_IRV_AMT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							row1.M_FCP_REVAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
							row1.M_HEDGE_FLAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							row1.M_HEDGED_ID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							row1.M_HEDGED_MAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row1.M_PAY_NET = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							row1.M_VAL_STATUS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
							row1.M_MAIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
							row1.M_FLOW_FLAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
							row1.M_AREA_CODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
							row1.M_MRPL_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							row1.M_MRPL_ONB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							row1.M_CAN_GXIT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
							row1.M_GXIT_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 72;
					
							row1.M_MOP_LAST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 73;
					
							row1.M_BRK_THIRDP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 74;
					
							row1.M_OPT_FLWFST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 75;
					
							row1.M_OPT_FLWLST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 76;
					
							row1.M_OPT_ACCLST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 77;
					
							row1.M_OPT_MOPFST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 78;
					
							row1.M_OPT_MOPLST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 79;
					
							row1.M_OPT_MOPCNT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 80;
					
							row1.M_OPT_MOPNB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 81;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.M_BRW_NOM1 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"M_BRW_NOM1", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.M_BRW_NOM1 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 82;
					
							row1.M_BRW_NOMU1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 83;
					
							row1.M_BRW_NOM2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 84;
					
							row1.M_BRW_NOMU2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 85;
					
							row1.M_BRW_RTE1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 86;
					
							row1.M_BRW_RTE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 87;
					
							row1.M_BRW_MRG1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 88;
					
							row1.M_BRW_MRG2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 89;
					
							row1.M_BRW_STRK = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 90;
					
							row1.M_BRW_CP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 91;
					
							row1.M_BRW_AE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 92;
					
							row1.M_BRW_PR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 93;
					
							row1.M_BRW_PR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 94;
					
							row1.M_BRW_FV1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 95;
					
							row1.M_BRW_FV2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 96;
					
							row1.M_BRW_SDTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 97;
					
							row1.M_BRW_ODPL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 98;
					
							row1.M_BRW_ODNC0 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 99;
					
							row1.M_BRW_ODNC1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 100;
					
							row1.M_BRW_ODFC0 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 101;
					
							row1.M_BRW_ODFC1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 102;
					
							row1.M_OPT_CMMNAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 103;
					
							row1.M_OPT_CMMDTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 104;
					
							row1.M_OPT_CMMCUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 105;
					
							row1.M_OPT_CMMSTL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 106;
					
							row1.M_OPT_CMMSPD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 107;
					
							row1.M_OPT_CMMSPS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 108;
					
							row1.M_PURGE_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 109;
					
							row1.M_SALES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 110;
					
							row1.M_LAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 111;
					
							row1.M_HOST_SYS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 112;
					
							row1.M_CNT_INTID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 113;
					
							row1.M_CONTRACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 114;
					
							row1.M_OPT_NATURE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 115;
					
							row1.M_ORIG_PS_ID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 116;
					
							row1.M_PS_ID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 117;
					
							row1.M_STAT_CAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 118;
					
							row1.M_CUSTOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 119;
					
							row1.M_COMP_TYPO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 120;
					
							row1.M_TYPOLOGY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 121;
					
							row1.M_USAGE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 122;
					
							row1.M_ONS_OFFS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 123;
					
							row1.M_SETTL_METH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 124;
					
							row1.M_P_ENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 125;
					
							row1.M__DT_TS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 126;
					
							row1.M_OPT_STSVER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 127;
					
							row1.M_PURGE_REF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 128;
					
							row1.M_SRC_PFOLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 129;
					
							row1.M_DST_PFOLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 130;
					
							row1.M_COUNTRPART = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 131;
					
							row1.M_PURPOSE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 132;
					
							row1.M_BLENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 133;
					
							row1.M_SLENTITY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 134;
					
							row1.M_SI_TCI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 135;
					
							row1.M_COLLAGCAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 136;
					
							row1.M_LEXTREF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 137;
					
							row1.M_LEVTEXTREF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 138;
					
							row1.M_LIMPEXTREF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 139;
					
							row1.M_B_STG_NODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 140;
					
							row1.M_S_STG_NODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 141;
					
							row1.M_PRC_CTP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 142;
					
							row1.M_REP_DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 143;
					
							row1.M_TP_DTEEXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 144;
					
							row1.M_TP_PAY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 145;
					
							row1.M_TP_PFOLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 146;
					
							row1.M_SCR_MODULE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 147;
					
							row1.M_TP_TRADER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_1,row1 );
					
						valueToConn_1(fid_tFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "/home/TPVS/TesisTPVS/media/CURR_FUT.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("/home/TPVS/TesisTPVS/media/CURR_FUT.csv", "ISO-8859-15",";","\n",true,1,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
			rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1 );
		
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 
			row3 = null;
			row5 = null;



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Pre_fecha_carga = row1.M_REP_DATE==null||row1.M_REP_DATE.equals("")?null:TalendDate.parseDate("dd/MM/yyyy",row1.M_REP_DATE) ;
Var.Pre_fecha_insercion = row1.M_TRN_DATE.replace("T05:00:00Z", "") ;
Var.var1 = Var.Pre_fecha_insercion.replace("-", "/") ;
Var.var2 = Var.var1==null||Var.var1.equals("")?null:TalendDate.parseDate("yyyy/MM/dd", Var.var1) ;
Var.var3 = row1.M_BRW_NOM2==null?null:row1.M_BRW_NOM2.replace(".","") ;
Var.Pre_monto = Var.var3==null||Var.var3.equals("")?null:Double.parseDouble( Var.var3.replace(",",".")) ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.id_operacion = row1.M_NB ;
out1_tmp.estado = row1.M_TRN_STATUS ;
out1_tmp.fecha_carga = Var.Pre_fecha_carga ;
out1_tmp.fecha_finalizacion = row1.M_TP_DTEEXP ;
out1_tmp.fecha_insercion = Var.var2==null?null:TalendDate.formatDate("dd/MM/yyyy",Var.var2 ) ;
out1_tmp.fecha_pago = row1.M_TP_PAY ;
out1_tmp.portafolio_nombre = row1.M_TP_PFOLIO ;
out1_tmp.sistema_nombre = row1.M_SCR_MODULE ;
out1_tmp.cant_contratos = row1.M_BRW_NOM1 ;
out1_tmp.trader_nombre = row1.M_TP_TRADER ;
out1_tmp.producto_nombre = row1.M_TRN_TYPE ;
out1_tmp.tipo_operacion_nombre = row1.M_TRN_FMLY ;
out1_tmp.moneda1 = row1.M_BRW_ODNC0 ;
out1_tmp.moneda2 = row1.M_BRW_ODNC1;
out1_tmp.monto_operacion = Var.Pre_monto ;
out1_tmp.P_L = Var.Pre_monto==null||(row1.M_BRW_NOM1==0&&row1.M_BRW_NOM1==null)?null:Var.Pre_monto/row1.M_BRW_NOM1 ;
out1_tmp.precio = Mathematical.NEG(1.0) ;
out1_tmp.contraparte = "Cámara de compensación";
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 
			row3 = null;
			row5 = null;



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		

          row3 = null;
          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
	        ope_tFilterRow_1.matches((out1.id_operacion != null)
	                       , "id_operacion!=null failed");
	        ope_tFilterRow_1.matches((out1.estado != null)
	                       , "estado!=null failed");
	        ope_tFilterRow_1.matches((out1.fecha_carga != null)
	                       , "fecha_carga!=null failed");
	        ope_tFilterRow_1.matches((out1.fecha_finalizacion != null)
	                       , "fecha_finalizacion!=null failed");
	        ope_tFilterRow_1.matches((out1.fecha_insercion != null)
	                       , "fecha_insercion!=null failed");
	        ope_tFilterRow_1.matches((out1.fecha_pago != null)
	                       , "fecha_pago!=null failed");
	        ope_tFilterRow_1.matches((out1.portafolio_nombre != null)
	                       , "portafolio_nombre!=null failed");
	        ope_tFilterRow_1.matches((out1.portafolio_nombre != null)
	                       , "portafolio_nombre!=null failed");
	        ope_tFilterRow_1.matches((out1.cant_contratos != null)
	                       , "cant_contratos!=null failed");
	        ope_tFilterRow_1.matches((out1.trader_nombre != null)
	                       , "trader_nombre!=null failed");
	        ope_tFilterRow_1.matches((out1.producto_nombre != null)
	                       , "producto_nombre!=null failed");
	        ope_tFilterRow_1.matches((out1.tipo_operacion_nombre != null)
	                       , "tipo_operacion_nombre!=null failed");
	        ope_tFilterRow_1.matches((out1.moneda1 != null)
	                       , "moneda1!=null failed");
	        ope_tFilterRow_1.matches((out1.moneda2 != null)
	                       , "moneda2!=null failed");
	        ope_tFilterRow_1.matches((out1.monto_operacion != null)
	                       , "monto_operacion!=null failed");
	        ope_tFilterRow_1.matches((out1.precio != null)
	                       , "precio!=null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.id_operacion = out1.id_operacion;
               row2.estado = out1.estado;
               row2.fecha_carga = out1.fecha_carga;
               row2.fecha_finalizacion = out1.fecha_finalizacion;
               row2.fecha_insercion = out1.fecha_insercion;
               row2.fecha_pago = out1.fecha_pago;
               row2.portafolio_nombre = out1.portafolio_nombre;
               row2.sistema_nombre = out1.sistema_nombre;
               row2.cant_contratos = out1.cant_contratos;
               row2.trader_nombre = out1.trader_nombre;
               row2.producto_nombre = out1.producto_nombre;
               row2.tipo_operacion_nombre = out1.tipo_operacion_nombre;
               row2.moneda1 = out1.moneda1;
               row2.moneda2 = out1.moneda2;
               row2.monto_operacion = out1.monto_operacion;
               row2.P_L = out1.P_L;
               row2.precio = out1.precio;
               row2.contraparte = out1.contraparte;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (row3 == null){
              row3 = new row3Struct();
            }
                row3.id_operacion = out1.id_operacion;
                row3.estado = out1.estado;
                row3.fecha_carga = out1.fecha_carga;
                row3.fecha_finalizacion = out1.fecha_finalizacion;
                row3.fecha_insercion = out1.fecha_insercion;
                row3.fecha_pago = out1.fecha_pago;
                row3.portafolio_nombre = out1.portafolio_nombre;
                row3.sistema_nombre = out1.sistema_nombre;
                row3.cant_contratos = out1.cant_contratos;
                row3.trader_nombre = out1.trader_nombre;
                row3.producto_nombre = out1.producto_nombre;
                row3.tipo_operacion_nombre = out1.tipo_operacion_nombre;
                row3.moneda1 = out1.moneda1;
                row3.moneda2 = out1.moneda2;
                row3.monto_operacion = out1.monto_operacion;
                row3.P_L = out1.P_L;
                row3.precio = out1.precio;
                row3.contraparte = out1.contraparte;
	            row3.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 
			row5 = null;



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

          row5 = null;
          row4 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((row2.monto_operacion == null? false : row2.monto_operacion.compareTo(ParserUtils.parseTo_Double(String.valueOf(1))) >= 0)
                           , "monto_operacion.compareTo(1) >= 0 failed");
		 	
            ope_tFilterRow_2.matches((row2.cant_contratos == null? false : row2.cant_contratos.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) >= 0)
                           , "cant_contratos.compareTo(0) >= 0 failed");
		 	    
        ope_tFilterRow_2.matches((row2.tipo_operacion_nombre == null? false : row2.tipo_operacion_nombre.matches("CURR") == true)
                       , " tipo_operacion_nombre.matches(\"CURR\") == true failed");    
        ope_tFilterRow_2.matches((row2.producto_nombre == null? false : row2.producto_nombre.matches("FUT") == true)
                       , " producto_nombre.matches(\"FUT\") == true failed");
            ope_tFilterRow_2.matches((row2.fecha_carga == null? false : row2.fecha_carga.compareTo(TalendDate.parseDate("dd/MM/yyyy",TalendDate.getDate("dd/MM/yyyy"))) <= 0)
                           , "fecha_carga.compareTo(TalendDate.parseDate(\"dd/MM/yyyy\",TalendDate.getDate(\"dd/MM/yyyy\"))) <= 0 failed");
      ope_tFilterRow_2.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
(row2.moneda1.equals("USD") && row2.moneda2.equals("COP") )||(row2.moneda2.equals("USD") && row2.moneda1.equals("COP") ) &&(row2.estado.equals("DEAD")||row2.estado.equals("LIVE")  )), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row4 == null){ 
                row4 = new row4Struct();
              }
               row4.id_operacion = row2.id_operacion;
               row4.estado = row2.estado;
               row4.fecha_carga = row2.fecha_carga;
               row4.fecha_finalizacion = row2.fecha_finalizacion;
               row4.fecha_insercion = row2.fecha_insercion;
               row4.fecha_pago = row2.fecha_pago;
               row4.portafolio_nombre = row2.portafolio_nombre;
               row4.sistema_nombre = row2.sistema_nombre;
               row4.cant_contratos = row2.cant_contratos;
               row4.trader_nombre = row2.trader_nombre;
               row4.producto_nombre = row2.producto_nombre;
               row4.tipo_operacion_nombre = row2.tipo_operacion_nombre;
               row4.moneda1 = row2.moneda1;
               row4.moneda2 = row2.moneda2;
               row4.monto_operacion = row2.monto_operacion;
               row4.P_L = row2.P_L;
               row4.precio = row2.precio;
               row4.contraparte = row2.contraparte;    
      nb_line_ok_tFilterRow_2++;
    } else {
            if (row5 == null){
              row5 = new row5Struct();
            }
                row5.id_operacion = row2.id_operacion;
                row5.estado = row2.estado;
                row5.fecha_carga = row2.fecha_carga;
                row5.fecha_finalizacion = row2.fecha_finalizacion;
                row5.fecha_insercion = row2.fecha_insercion;
                row5.fecha_pago = row2.fecha_pago;
                row5.portafolio_nombre = row2.portafolio_nombre;
                row5.sistema_nombre = row2.sistema_nombre;
                row5.cant_contratos = row2.cant_contratos;
                row5.trader_nombre = row2.trader_nombre;
                row5.producto_nombre = row2.producto_nombre;
                row5.tipo_operacion_nombre = row2.tipo_operacion_nombre;
                row5.moneda1 = row2.moneda1;
                row5.moneda2 = row2.moneda2;
                row5.monto_operacion = row2.monto_operacion;
                row5.P_L = row2.P_L;
                row5.precio = row2.precio;
                row5.contraparte = row2.contraparte;
	            row5.errorMessage = ope_tFilterRow_2.getErrorMsg();
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Data = null;


// # Output table : 'Data'
Data_tmp.id_operacion = row4.id_operacion ;
Data_tmp.estado = row4.estado ;
Data_tmp.fecha_carga = row4.fecha_carga==null?null:TalendDate.formatDate("dd/MM/yyyy",row4.fecha_carga  ) ;
Data_tmp.fecha_finalizacion = row4.fecha_finalizacion ;
Data_tmp.fecha_insercion = row4.fecha_insercion ;
Data_tmp.fecha_pago = row4.fecha_pago ;
Data_tmp.portafolio_nombre = row4.portafolio_nombre ;
Data_tmp.sistema_nombre = row4.sistema_nombre ;
Data_tmp.cant_contratos = row4.cant_contratos ;
Data_tmp.trader_nombre = row4.trader_nombre ;
Data_tmp.producto_nombre = row4.producto_nombre ;
Data_tmp.tipo_operacion_nombre = row4.tipo_operacion_nombre ;
Data_tmp.moneda1 = row4.moneda1 ;
Data_tmp.moneda2 = row4.moneda2 ;
Data_tmp.monto_operacion = row4.monto_operacion ;
Data_tmp.P_L = row4.P_L ;
Data_tmp.precio = row4.precio ;
Data_tmp.contraparte = row4.contraparte ;
Data = Data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Data"
if(Data != null) { 



	
	/**
	 * [tMysqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

			//Data
			//Data


			
				if(execStat){
					runStat.updateStatOnConnection("Data"+iterateId,1, 1);
				} 
			

		



            row8 = null;
        whetherReject_tMysqlOutput_4 = false;
                            if(Data.id_operacion == null) {
pstmt_tMysqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(1, Data.id_operacion);
}

                            if(Data.estado == null) {
pstmt_tMysqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(2, Data.estado);
}

                            if(Data.fecha_carga == null) {
pstmt_tMysqlOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(3, Data.fecha_carga);
}

                            if(Data.fecha_finalizacion == null) {
pstmt_tMysqlOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(4, Data.fecha_finalizacion);
}

                            if(Data.fecha_insercion == null) {
pstmt_tMysqlOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(5, Data.fecha_insercion);
}

                            if(Data.fecha_pago == null) {
pstmt_tMysqlOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(6, Data.fecha_pago);
}

                            if(Data.portafolio_nombre == null) {
pstmt_tMysqlOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(7, Data.portafolio_nombre);
}

                            if(Data.sistema_nombre == null) {
pstmt_tMysqlOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(8, Data.sistema_nombre);
}

                            if(Data.cant_contratos == null) {
pstmt_tMysqlOutput_4.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_4.setInt(9, Data.cant_contratos);
}

                            if(Data.trader_nombre == null) {
pstmt_tMysqlOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(10, Data.trader_nombre);
}

                            if(Data.producto_nombre == null) {
pstmt_tMysqlOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(11, Data.producto_nombre);
}

                            if(Data.tipo_operacion_nombre == null) {
pstmt_tMysqlOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(12, Data.tipo_operacion_nombre);
}

                            if(Data.moneda1 == null) {
pstmt_tMysqlOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(13, Data.moneda1);
}

                            if(Data.moneda2 == null) {
pstmt_tMysqlOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(14, Data.moneda2);
}

                            if(Data.monto_operacion == null) {
pstmt_tMysqlOutput_4.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_4.setDouble(15, Data.monto_operacion);
}

                            if(Data.P_L == null) {
pstmt_tMysqlOutput_4.setNull(16, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_4.setDouble(16, Data.P_L);
}

                            if(Data.precio == null) {
pstmt_tMysqlOutput_4.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_4.setDouble(17, Data.precio);
}

                            if(Data.contraparte == null) {
pstmt_tMysqlOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(18, Data.contraparte);
}

                    pstmt_tMysqlOutput_4.addBatch();
                    nb_line_tMysqlOutput_4++;

                      batchSizeCounter_tMysqlOutput_4++;
            if(!whetherReject_tMysqlOutput_4) {
                            row8 = new row8Struct();
                                row8.id_operacion = Data.id_operacion;
                                row8.estado = Data.estado;
                                row8.fecha_carga = Data.fecha_carga;
                                row8.fecha_finalizacion = Data.fecha_finalizacion;
                                row8.fecha_insercion = Data.fecha_insercion;
                                row8.fecha_pago = Data.fecha_pago;
                                row8.portafolio_nombre = Data.portafolio_nombre;
                                row8.sistema_nombre = Data.sistema_nombre;
                                row8.cant_contratos = Data.cant_contratos;
                                row8.trader_nombre = Data.trader_nombre;
                                row8.producto_nombre = Data.producto_nombre;
                                row8.tipo_operacion_nombre = Data.tipo_operacion_nombre;
                                row8.moneda1 = Data.moneda1;
                                row8.moneda2 = Data.moneda2;
                                row8.monto_operacion = Data.monto_operacion;
                                row8.P_L = Data.P_L;
                                row8.precio = Data.precio;
                                row8.contraparte = Data.contraparte;
            }
                if ( batchSize_tMysqlOutput_4 <= batchSizeCounter_tMysqlOutput_4) {
                try {
                        int countSum_tMysqlOutput_4 = 0;
                        for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
                            countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_4 = 0;
                    for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                    }
                    insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_4 = 0;
            }
                commitCounter_tMysqlOutput_4++;

                if(commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

                try {
                        int countSum_tMysqlOutput_4 = 0;
                        for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
                            countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_4 = 0;
                    for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                    }
                    insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_4.commit();
                    commitCounter_tMysqlOutput_4=0;

                }


 


	tos_count_tMysqlOutput_4++;

/**
 * [tMysqlOutput_4 main ] stop
 */
	
	/**
	 * [tMysqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File("/home/TPVS/TesisTPVS/media/CURR_FUT.csv");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH","/home/TPVS/TesisTPVS/media/CURR_FUT.csv");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tMysqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_end ] stop
 */

} // End of branch "Data"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMysqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_2 = false;
                            if(row5.id_operacion == null) {
pstmt_tMysqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(1, row5.id_operacion);
}

                            if(row5.estado == null) {
pstmt_tMysqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(2, row5.estado);
}

                            if(row5.fecha_carga != null) {
date_tMysqlOutput_2 = row5.fecha_carga.getTime();
if(date_tMysqlOutput_2 < year1_tMysqlOutput_2 || date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
pstmt_tMysqlOutput_2.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_2.setTimestamp(3, new java.sql.Timestamp(date_tMysqlOutput_2));
}
} else {
pstmt_tMysqlOutput_2.setNull(3, java.sql.Types.DATE);
}

                            if(row5.fecha_finalizacion == null) {
pstmt_tMysqlOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(4, row5.fecha_finalizacion);
}

                            if(row5.fecha_insercion == null) {
pstmt_tMysqlOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(5, row5.fecha_insercion);
}

                            if(row5.fecha_pago == null) {
pstmt_tMysqlOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(6, row5.fecha_pago);
}

                            if(row5.portafolio_nombre == null) {
pstmt_tMysqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(7, row5.portafolio_nombre);
}

                            if(row5.sistema_nombre == null) {
pstmt_tMysqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(8, row5.sistema_nombre);
}

                            if(row5.cant_contratos == null) {
pstmt_tMysqlOutput_2.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_2.setInt(9, row5.cant_contratos);
}

                            if(row5.trader_nombre == null) {
pstmt_tMysqlOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(10, row5.trader_nombre);
}

                            if(row5.producto_nombre == null) {
pstmt_tMysqlOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(11, row5.producto_nombre);
}

                            if(row5.tipo_operacion_nombre == null) {
pstmt_tMysqlOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(12, row5.tipo_operacion_nombre);
}

                            if(row5.moneda1 == null) {
pstmt_tMysqlOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(13, row5.moneda1);
}

                            if(row5.moneda2 == null) {
pstmt_tMysqlOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(14, row5.moneda2);
}

                            if(row5.monto_operacion == null) {
pstmt_tMysqlOutput_2.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_2.setDouble(15, row5.monto_operacion);
}

                            if(row5.P_L == null) {
pstmt_tMysqlOutput_2.setNull(16, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_2.setDouble(16, row5.P_L);
}

                            if(row5.precio == null) {
pstmt_tMysqlOutput_2.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_2.setDouble(17, row5.precio);
}

                            if(row5.contraparte == null) {
pstmt_tMysqlOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(18, row5.contraparte);
}

                            if(row5.errorMessage == null) {
pstmt_tMysqlOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(19, row5.errorMessage);
}

                    pstmt_tMysqlOutput_2.addBatch();
                    nb_line_tMysqlOutput_2++;

                      batchSizeCounter_tMysqlOutput_2++;
                if ( batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_2 = 0;
            }
                commitCounter_tMysqlOutput_2++;

                if(commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_2.commit();
                    commitCounter_tMysqlOutput_2=0;

                }


 


	tos_count_tMysqlOutput_2++;

/**
 * [tMysqlOutput_2 main ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "row2"




// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(row3.id_operacion == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, row3.id_operacion);
}

                            if(row3.estado == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, row3.estado);
}

                            if(row3.fecha_carga != null) {
date_tMysqlOutput_1 = row3.fecha_carga.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.DATE);
}

                            if(row3.fecha_finalizacion == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(4, row3.fecha_finalizacion);
}

                            if(row3.fecha_insercion == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, row3.fecha_insercion);
}

                            if(row3.fecha_pago == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(6, row3.fecha_pago);
}

                            if(row3.portafolio_nombre == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(7, row3.portafolio_nombre);
}

                            if(row3.sistema_nombre == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(8, row3.sistema_nombre);
}

                            if(row3.cant_contratos == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(9, row3.cant_contratos);
}

                            if(row3.trader_nombre == null) {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(10, row3.trader_nombre);
}

                            if(row3.producto_nombre == null) {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(11, row3.producto_nombre);
}

                            if(row3.tipo_operacion_nombre == null) {
pstmt_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(12, row3.tipo_operacion_nombre);
}

                            if(row3.moneda1 == null) {
pstmt_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(13, row3.moneda1);
}

                            if(row3.moneda2 == null) {
pstmt_tMysqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(14, row3.moneda2);
}

                            if(row3.monto_operacion == null) {
pstmt_tMysqlOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(15, row3.monto_operacion);
}

                            if(row3.P_L == null) {
pstmt_tMysqlOutput_1.setNull(16, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(16, row3.P_L);
}

                            if(row3.precio == null) {
pstmt_tMysqlOutput_1.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tMysqlOutput_1.setDouble(17, row3.precio);
}

                            if(row3.contraparte == null) {
pstmt_tMysqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(18, row3.contraparte);
}

                            if(row3.errorMessage == null) {
pstmt_tMysqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(19, row3.errorMessage);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("/home/TPVS/TesisTPVS/media/CURR_FUT.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMysqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_4 != 0) {
							int countSum_tMysqlOutput_4 = 0;
							
							for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
								countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_4 = 0;
					for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
						countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
					}
					
            	    insertedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_4 = 0;
    		
	

        if(pstmt_tMysqlOutput_4 != null) {
			
				pstmt_tMysqlOutput_4.close();
			
        }

    	if (commitCounter_tMysqlOutput_4 > 0) {
    		
    		conn_tMysqlOutput_4.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_4 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_4", true);
    	

	nb_line_deleted_tMysqlOutput_4=nb_line_deleted_tMysqlOutput_4+ deletedCount_tMysqlOutput_4;
	nb_line_update_tMysqlOutput_4=nb_line_update_tMysqlOutput_4 + updatedCount_tMysqlOutput_4;
	nb_line_inserted_tMysqlOutput_4=nb_line_inserted_tMysqlOutput_4 + insertedCount_tMysqlOutput_4;
	nb_line_rejected_tMysqlOutput_4=nb_line_rejected_tMysqlOutput_4 + rejectedCount_tMysqlOutput_4;
	
        globalMap.put("tMysqlOutput_4_NB_LINE",nb_line_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_4);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Data"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_4", true);
end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());




/**
 * [tMysqlOutput_4 end ] stop
 */

	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */










	
	/**
	 * [tMysqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_2 != 0) {
							int countSum_tMysqlOutput_2 = 0;
							
							for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
								countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_2 = 0;
					for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
					}
					
            	    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_2 = 0;
    		
	

        if(pstmt_tMysqlOutput_2 != null) {
			
				pstmt_tMysqlOutput_2.close();
			
        }

    	if (commitCounter_tMysqlOutput_2 > 0) {
    		
    		conn_tMysqlOutput_2.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_2 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_2", true);
    	

	nb_line_deleted_tMysqlOutput_2=nb_line_deleted_tMysqlOutput_2+ deletedCount_tMysqlOutput_2;
	nb_line_update_tMysqlOutput_2=nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
	nb_line_inserted_tMysqlOutput_2=nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
	nb_line_rejected_tMysqlOutput_2=nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;
	
        globalMap.put("tMysqlOutput_2_NB_LINE",nb_line_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_2", true);
end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());




/**
 * [tMysqlOutput_2 end ] stop
 */







	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



	
		if(resourceMap.get("finish_tMysqlOutput_4")==null){
			if(resourceMap.get("conn_tMysqlOutput_4")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_4 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_4");
					
					
            		
					ctn_tMysqlOutput_4.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
					String errorMessage_tMysqlOutput_4 = "failed to close the connection in tMysqlOutput_4 :" + sqlEx_tMysqlOutput_4.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_4);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */










	
	/**
	 * [tMysqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	
		if(resourceMap.get("finish_tMysqlOutput_2")==null){
			if(resourceMap.get("conn_tMysqlOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_2");
					
					
            		
					ctn_tMysqlOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
					String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :" + sqlEx_tMysqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_2);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_2 finally ] stop
 */







	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tREST_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tREST_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_1", false);
		start_Hash.put("tREST_1", System.currentTimeMillis());
		
	
	currentComponent="tREST_1";

	
		int tos_count_tREST_1 = 0;
		
    	class BytesLimit65535_tREST_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tREST_1().limitLog4jByte();
	

	
	String endpoint_tREST_1 = "http://167.99.147.146:8000/mensajes/";
	
	String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_1 = null;
	if(trustStoreFile_tREST_1!=null && trustStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(trustStorePWD_tREST_1!=null)
			password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
		java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore.getInstance(trustStoreType_tREST_1);
		trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_1.init(trustStore_tREST_1);
        tms_tREST_1 = tmf_tREST_1.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_1 = null;
	if(keyStoreFile_tREST_1!=null && keyStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(keyStorePWD_tREST_1!=null)
			password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
		java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
		keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_1.init(keyStore_tREST_1,password_tREST_1);
        kms_tREST_1 = kmf_tREST_1.getKeyManagers();
	}
	
    ctx_tREST_1.init(kms_tREST_1, tms_tREST_1 , null);
    config_tREST_1.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_1));

	com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client.create(config_tREST_1);
	
	java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();
	
    	headers_tREST_1.put("Content-Type","application/json");
	
    	headers_tREST_1.put("Accept","application/json");
	
	
	Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
	if(transfer_encoding_tREST_1!=null && "chunked".equals(transfer_encoding_tREST_1)) {
		restClient_tREST_1.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_1;
	if(endpoint_tREST_1!=null && !("").equals(endpoint_tREST_1)){
		restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
	String restResponse_tREST_1 = "";
	try{
		
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
			if(builder_tREST_1 == null) {
				builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			} else {
				builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			}
		}
		
		
			if(builder_tREST_1!=null) {
				restResponse_tREST_1 = builder_tREST_1.post(String.class,"{	  	  \"fecha\": null,          \"mensaje\": \"Error limpiando los datos, por favor revise el formato del documento\"      }  ");
			} else {
				restResponse_tREST_1 = restResource_tREST_1.post(String.class,"{	  	  \"fecha\": null,          \"mensaje\": \"Error limpiando los datos, por favor revise el formato del documento\"      }  ");
			}
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
        errorResponse_tREST_1 = ue.getResponse();
    }
	
	// for output
	

 



/**
 * [tREST_1 begin ] stop
 */
	
	/**
	 * [tREST_1 main ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 


	tos_count_tREST_1++;

/**
 * [tREST_1 main ] stop
 */
	
	/**
	 * [tREST_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_begin ] stop
 */
	
	/**
	 * [tREST_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_end ] stop
 */
	
	/**
	 * [tREST_1 end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 

ok_Hash.put("tREST_1", true);
end_Hash.put("tREST_1", System.currentTimeMillis());




/**
 * [tREST_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tREST_1 finally ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_ETL_Fut = new byte[0];
    static byte[] commonByteArray_COMPLETO_ETL_Fut = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_ETL_Fut.length) {
				if(length < 1024 && commonByteArray_COMPLETO_ETL_Fut.length == 0) {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_ETL_Fut = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_ETL_Fut, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_ETL_Fut, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_ETL_Fut) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("/home/TPVS/TesisTPVS/media/errores.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row7.type = lcm.getType();
		row7.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row7.priority = lcm.getPriority();
		row7.message = lcm.getMessage();
		row7.code = lcm.getCode();
		
		row7.moment = java.util.Calendar.getInstance().getTime();
	
    	row7.pid = pid;
		row7.root_pid = rootPid;
		row7.father_pid = fatherPid;
	
    	row7.project = projectName;
    	row7.job = jobName;
    	row7.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row7.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ETL_Fut ETL_FutClass = new ETL_Fut();

        int exitCode = ETL_FutClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL_Fut.class.getClassLoader().getResourceAsStream("completo/etl_fut_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL_Fut.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_Fut");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     279580 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 de mayo de 2018 11:53:18 PM COT
 ************************************************************************************************/