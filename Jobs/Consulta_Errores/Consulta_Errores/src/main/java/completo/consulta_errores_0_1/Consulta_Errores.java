// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package completo.consulta_errores_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Consulta_Errores Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Consulta_Errores implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Consulta_Errores";
	private final String projectName = "COMPLETO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Consulta_Errores.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Consulta_Errores.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Consulta_Errores = new byte[0];
    static byte[] commonByteArray_COMPLETO_Consulta_Errores = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double valor_nominal;

				public Double getValor_nominal () {
					return this.valor_nominal;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Consulta_Errores.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Consulta_Errores.length == 0) {
   					commonByteArray_COMPLETO_Consulta_Errores = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Consulta_Errores = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Consulta_Errores, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Consulta_Errores, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Consulta_Errores) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valor_nominal = null;
           				} else {
           			    	this.valor_nominal = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.valor_nominal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valor_nominal);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",valor_nominal="+String.valueOf(valor_nominal));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="/home/TPVS/TesisTPVS/media/errores_fut.xls";
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
		if(file_tFileOutputExcel_1.exists()){
			isFileGenerated_tFileOutputExcel_1 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");  
        if (file_tFileOutputExcel_1.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_1 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_1,workbookSettings_tFileOutputExcel_1);
        workbookSettings_tFileOutputExcel_1.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_1, false)), 
                	workbook_tFileOutputExcel_1, 
                	true,
                    workbookSettings_tFileOutputExcel_1);
        }else{        
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);        
        }            

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[19];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<19;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_1 = new jxl.write.WritableFont(jxl.write.WritableFont.ARIAL, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_1  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_1); 
		


		if (startRowNum_tFileOutputExcel_1 == 0){
	//modif end
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(0, nb_line_tFileOutputExcel_1, "id_operacion"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>12?fitWidth_tFileOutputExcel_1[0]:12;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(1, nb_line_tFileOutputExcel_1, "estado"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>6?fitWidth_tFileOutputExcel_1[1]:6;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(2, nb_line_tFileOutputExcel_1, "fecha_carga"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>11?fitWidth_tFileOutputExcel_1[2]:11;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(3, nb_line_tFileOutputExcel_1, "fecha_finalizacion"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>18?fitWidth_tFileOutputExcel_1[3]:18;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(4, nb_line_tFileOutputExcel_1, "fecha_insercion"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>15?fitWidth_tFileOutputExcel_1[4]:15;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(5, nb_line_tFileOutputExcel_1, "fecha_pago"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>10?fitWidth_tFileOutputExcel_1[5]:10;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(6, nb_line_tFileOutputExcel_1, "portafolio_nombre"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>17?fitWidth_tFileOutputExcel_1[6]:17;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(7, nb_line_tFileOutputExcel_1, "sistema_nombre"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>14?fitWidth_tFileOutputExcel_1[7]:14;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(8, nb_line_tFileOutputExcel_1, "cant_contratos"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>14?fitWidth_tFileOutputExcel_1[8]:14;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(9, nb_line_tFileOutputExcel_1, "trader_nombre"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>13?fitWidth_tFileOutputExcel_1[9]:13;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(10, nb_line_tFileOutputExcel_1, "producto_nombre"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>15?fitWidth_tFileOutputExcel_1[10]:15;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(11, nb_line_tFileOutputExcel_1, "tipo_operacion_nombre"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>21?fitWidth_tFileOutputExcel_1[11]:21;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(12, nb_line_tFileOutputExcel_1, "moneda1"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>7?fitWidth_tFileOutputExcel_1[12]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(13, nb_line_tFileOutputExcel_1, "moneda2"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>7?fitWidth_tFileOutputExcel_1[13]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(14, nb_line_tFileOutputExcel_1, "valor_nominal"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[14]=fitWidth_tFileOutputExcel_1[14]>13?fitWidth_tFileOutputExcel_1[14]:13;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(15, nb_line_tFileOutputExcel_1, "contraparte"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[15]=fitWidth_tFileOutputExcel_1[15]>11?fitWidth_tFileOutputExcel_1[15]:11;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(16, nb_line_tFileOutputExcel_1, "precio"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[16]=fitWidth_tFileOutputExcel_1[16]>6?fitWidth_tFileOutputExcel_1[16]:6;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(17, nb_line_tFileOutputExcel_1, "subtipo"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[17]=fitWidth_tFileOutputExcel_1[17]>7?fitWidth_tFileOutputExcel_1[17]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(18, nb_line_tFileOutputExcel_1, "errorMessage"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[18]=fitWidth_tFileOutputExcel_1[18]>12?fitWidth_tFileOutputExcel_1[18]:12;
		nb_line_tFileOutputExcel_1 ++;
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "select * from errores_fut;";
			

            	globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);
		    java.sql.ResultSet rs_tMysqlInput_1 = null;

		    try {
		    	rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    	int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row8.id_operacion = null;
							} else {
	                         		
        	row8.id_operacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row8.estado = null;
							} else {
	                         		
        	row8.estado = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row8.fecha_carga = null;
							} else {
	                         		
        	row8.fecha_carga = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row8.fecha_finalizacion = null;
							} else {
	                         		
        	row8.fecha_finalizacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row8.fecha_insercion = null;
							} else {
	                         		
        	row8.fecha_insercion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row8.fecha_pago = null;
							} else {
	                         		
        	row8.fecha_pago = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row8.portafolio_nombre = null;
							} else {
	                         		
        	row8.portafolio_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row8.sistema_nombre = null;
							} else {
	                         		
        	row8.sistema_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row8.cant_contratos = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(9) != null) {
                row8.cant_contratos = rs_tMysqlInput_1.getInt(9);
            } else {
                    row8.cant_contratos = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row8.trader_nombre = null;
							} else {
	                         		
        	row8.trader_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row8.producto_nombre = null;
							} else {
	                         		
        	row8.producto_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 12) {
								row8.tipo_operacion_nombre = null;
							} else {
	                         		
        	row8.tipo_operacion_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 13) {
								row8.moneda1 = null;
							} else {
	                         		
        	row8.moneda1 = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 14) {
								row8.moneda2 = null;
							} else {
	                         		
        	row8.moneda2 = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 15) {
								row8.valor_nominal = null;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(15) != null) {
                row8.valor_nominal = rs_tMysqlInput_1.getDouble(15);
            } else {
                    row8.valor_nominal = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 16) {
								row8.contraparte = null;
							} else {
	                         		
        	row8.contraparte = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 16, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 17) {
								row8.precio = null;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(17) != null) {
                row8.precio = rs_tMysqlInput_1.getDouble(17);
            } else {
                    row8.precio = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 18) {
								row8.subtipo = null;
							} else {
	                         		
        	row8.subtipo = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 18, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 19) {
								row8.errorMessage = null;
							} else {
	                         		
        	row8.errorMessage = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 19, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */
	
	/**
	 * [tMysqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row8.id_operacion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.id_operacion
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.estado != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.estado
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.fecha_carga != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.fecha_carga
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.fecha_finalizacion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.fecha_finalizacion
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.fecha_insercion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.fecha_insercion
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
							int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>currentWith_4_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[4]:currentWith_4_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.fecha_pago != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.fecha_pago
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
							int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>currentWith_5_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[5]:currentWith_5_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.portafolio_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.portafolio_nombre
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
							int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>currentWith_6_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[6]:currentWith_6_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.sistema_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.sistema_nombre
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
							int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>currentWith_7_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[7]:currentWith_7_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.cant_contratos != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.cant_contratos
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_8_tFileOutputExcel_1);
							int currentWith_8_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_8_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_8_tFileOutputExcel_1=currentWith_8_tFileOutputExcel_1>10?10:currentWith_8_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>currentWith_8_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[8]:currentWith_8_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.trader_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.trader_nombre
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_9_tFileOutputExcel_1);
							int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>currentWith_9_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[9]:currentWith_9_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.producto_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.producto_nombre
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_10_tFileOutputExcel_1);
							int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>currentWith_10_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[10]:currentWith_10_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.tipo_operacion_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.tipo_operacion_nombre
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_11_tFileOutputExcel_1);
							int currentWith_11_tFileOutputExcel_1 = cell_11_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>currentWith_11_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[11]:currentWith_11_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.moneda1 != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.moneda1
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_12_tFileOutputExcel_1);
							int currentWith_12_tFileOutputExcel_1 = cell_12_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>currentWith_12_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[12]:currentWith_12_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.moneda2 != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.moneda2
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_13_tFileOutputExcel_1);
							int currentWith_13_tFileOutputExcel_1 = cell_13_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>currentWith_13_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[13]:currentWith_13_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.valor_nominal != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 14;
					

					
						jxl.write.WritableCell cell_14_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.valor_nominal
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_14_tFileOutputExcel_1);
							int currentWith_14_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_14_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_14_tFileOutputExcel_1=currentWith_14_tFileOutputExcel_1>10?10:currentWith_14_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[14]=fitWidth_tFileOutputExcel_1[14]>currentWith_14_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[14]:currentWith_14_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.contraparte != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 15;
					

					
						jxl.write.WritableCell cell_15_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.contraparte
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_15_tFileOutputExcel_1);
							int currentWith_15_tFileOutputExcel_1 = cell_15_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[15]=fitWidth_tFileOutputExcel_1[15]>currentWith_15_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[15]:currentWith_15_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.precio != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 16;
					

					
						jxl.write.WritableCell cell_16_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.precio
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_16_tFileOutputExcel_1);
							int currentWith_16_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_16_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_16_tFileOutputExcel_1=currentWith_16_tFileOutputExcel_1>10?10:currentWith_16_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[16]=fitWidth_tFileOutputExcel_1[16]>currentWith_16_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[16]:currentWith_16_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.subtipo != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 17;
					

					
						jxl.write.WritableCell cell_17_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.subtipo
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_17_tFileOutputExcel_1);
							int currentWith_17_tFileOutputExcel_1 = cell_17_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[17]=fitWidth_tFileOutputExcel_1[17]>currentWith_17_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[17]:currentWith_17_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row8.errorMessage != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 18;
					

					
						jxl.write.WritableCell cell_18_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row8.errorMessage
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_18_tFileOutputExcel_1);
							int currentWith_18_tFileOutputExcel_1 = cell_18_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[18]=fitWidth_tFileOutputExcel_1[18]>currentWith_18_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[18]:currentWith_18_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Consulta_Errores = new byte[0];
    static byte[] commonByteArray_COMPLETO_Consulta_Errores = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double valor_nominal;

				public Double getValor_nominal () {
					return this.valor_nominal;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Consulta_Errores.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Consulta_Errores.length == 0) {
   					commonByteArray_COMPLETO_Consulta_Errores = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Consulta_Errores = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Consulta_Errores, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Consulta_Errores, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Consulta_Errores) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.valor_nominal = null;
           				} else {
           			    	this.valor_nominal = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.valor_nominal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.valor_nominal);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",valor_nominal="+String.valueOf(valor_nominal));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_2 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_2().limitLog4jByte();


		int columnIndex_tFileOutputExcel_2 = 0;
		
		int nb_line_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="/home/TPVS/TesisTPVS/media/errores_spot.xls";
		java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
		boolean isFileGenerated_tFileOutputExcel_2 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
          if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {
        	
             parentFile_tFileOutputExcel_2.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
		writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)), 
            		true, 
            		workbookSettings_tFileOutputExcel_2);       

        writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_2 == null){
        	writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_2 = new int[19];
		for(int i_tFileOutputExcel_2=0;i_tFileOutputExcel_2<19;i_tFileOutputExcel_2++){
		    int fitCellViewSize_tFileOutputExcel_2=writableSheet_tFileOutputExcel_2.getColumnView(i_tFileOutputExcel_2).getSize();
			fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]=fitCellViewSize_tFileOutputExcel_2/256;
			if(fitCellViewSize_tFileOutputExcel_2%256!=0){
				fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_2 = new jxl.write.WritableFont(jxl.write.WritableFont.ARIAL, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_2  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_2); 
		


		if (startRowNum_tFileOutputExcel_2 == 0){
	//modif end
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(0, nb_line_tFileOutputExcel_2, "id_operacion"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>12?fitWidth_tFileOutputExcel_2[0]:12;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(1, nb_line_tFileOutputExcel_2, "estado"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>6?fitWidth_tFileOutputExcel_2[1]:6;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(2, nb_line_tFileOutputExcel_2, "fecha_carga"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>11?fitWidth_tFileOutputExcel_2[2]:11;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(3, nb_line_tFileOutputExcel_2, "fecha_finalizacion"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[3]=fitWidth_tFileOutputExcel_2[3]>18?fitWidth_tFileOutputExcel_2[3]:18;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(4, nb_line_tFileOutputExcel_2, "fecha_insercion"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[4]=fitWidth_tFileOutputExcel_2[4]>15?fitWidth_tFileOutputExcel_2[4]:15;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(5, nb_line_tFileOutputExcel_2, "fecha_pago"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[5]=fitWidth_tFileOutputExcel_2[5]>10?fitWidth_tFileOutputExcel_2[5]:10;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(6, nb_line_tFileOutputExcel_2, "portafolio_nombre"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[6]=fitWidth_tFileOutputExcel_2[6]>17?fitWidth_tFileOutputExcel_2[6]:17;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(7, nb_line_tFileOutputExcel_2, "sistema_nombre"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[7]=fitWidth_tFileOutputExcel_2[7]>14?fitWidth_tFileOutputExcel_2[7]:14;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(8, nb_line_tFileOutputExcel_2, "cant_contratos"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[8]=fitWidth_tFileOutputExcel_2[8]>14?fitWidth_tFileOutputExcel_2[8]:14;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(9, nb_line_tFileOutputExcel_2, "trader_nombre"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[9]=fitWidth_tFileOutputExcel_2[9]>13?fitWidth_tFileOutputExcel_2[9]:13;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(10, nb_line_tFileOutputExcel_2, "producto_nombre"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[10]=fitWidth_tFileOutputExcel_2[10]>15?fitWidth_tFileOutputExcel_2[10]:15;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(11, nb_line_tFileOutputExcel_2, "tipo_operacion_nombre"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[11]=fitWidth_tFileOutputExcel_2[11]>21?fitWidth_tFileOutputExcel_2[11]:21;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(12, nb_line_tFileOutputExcel_2, "moneda1"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[12]=fitWidth_tFileOutputExcel_2[12]>7?fitWidth_tFileOutputExcel_2[12]:7;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(13, nb_line_tFileOutputExcel_2, "moneda2"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[13]=fitWidth_tFileOutputExcel_2[13]>7?fitWidth_tFileOutputExcel_2[13]:7;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(14, nb_line_tFileOutputExcel_2, "valor_nominal"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[14]=fitWidth_tFileOutputExcel_2[14]>13?fitWidth_tFileOutputExcel_2[14]:13;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(15, nb_line_tFileOutputExcel_2, "contraparte"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[15]=fitWidth_tFileOutputExcel_2[15]>11?fitWidth_tFileOutputExcel_2[15]:11;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(16, nb_line_tFileOutputExcel_2, "precio"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[16]=fitWidth_tFileOutputExcel_2[16]>6?fitWidth_tFileOutputExcel_2[16]:6;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(17, nb_line_tFileOutputExcel_2, "subtipo"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[17]=fitWidth_tFileOutputExcel_2[17]>7?fitWidth_tFileOutputExcel_2[17]:7;
		//modif start
			writableSheet_tFileOutputExcel_2.addCell(new jxl.write.Label(18, nb_line_tFileOutputExcel_2, "errorMessage"
					,format_tFileOutputExcel_2
			));
		//modif end
		fitWidth_tFileOutputExcel_2[18]=fitWidth_tFileOutputExcel_2[18]>12?fitWidth_tFileOutputExcel_2[18]:12;
		nb_line_tFileOutputExcel_2 ++;
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
    	class BytesLimit65535_tDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
			   	String dbUser_tDBInput_1 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
		        
				
				String url_tDBInput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select * from errores_spot;";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.id_operacion = null;
							} else {
	                         		
        	row1.id_operacion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.estado = null;
							} else {
	                         		
        	row1.estado = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.fecha_carga = null;
							} else {
	                         		
        	row1.fecha_carga = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.fecha_finalizacion = null;
							} else {
	                         		
        	row1.fecha_finalizacion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.fecha_insercion = null;
							} else {
	                         		
        	row1.fecha_insercion = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.fecha_pago = null;
							} else {
	                         		
        	row1.fecha_pago = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.portafolio_nombre = null;
							} else {
	                         		
        	row1.portafolio_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.sistema_nombre = null;
							} else {
	                         		
        	row1.sistema_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.cant_contratos = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(9) != null) {
                row1.cant_contratos = rs_tDBInput_1.getInt(9);
            } else {
                    row1.cant_contratos = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.trader_nombre = null;
							} else {
	                         		
        	row1.trader_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.producto_nombre = null;
							} else {
	                         		
        	row1.producto_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.tipo_operacion_nombre = null;
							} else {
	                         		
        	row1.tipo_operacion_nombre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.moneda1 = null;
							} else {
	                         		
        	row1.moneda1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.moneda2 = null;
							} else {
	                         		
        	row1.moneda2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.valor_nominal = null;
							} else {
	                         		
            if(rs_tDBInput_1.getObject(15) != null) {
                row1.valor_nominal = rs_tDBInput_1.getDouble(15);
            } else {
                    row1.valor_nominal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.contraparte = null;
							} else {
	                         		
        	row1.contraparte = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.precio = null;
							} else {
	                         		
            if(rs_tDBInput_1.getObject(17) != null) {
                row1.precio = rs_tDBInput_1.getDouble(17);
            } else {
                    row1.precio = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.subtipo = null;
							} else {
	                         		
        	row1.subtipo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.errorMessage = null;
							} else {
	                         		
        	row1.errorMessage = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row1.id_operacion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.id_operacion
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
							int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>currentWith_0_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[0]:currentWith_0_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.estado != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.estado
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
							int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>currentWith_1_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[1]:currentWith_1_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.fecha_carga != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.fecha_carga
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
							int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>currentWith_2_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[2]:currentWith_2_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.fecha_finalizacion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.fecha_finalizacion
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_3_tFileOutputExcel_2);
							int currentWith_3_tFileOutputExcel_2 = cell_3_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[3]=fitWidth_tFileOutputExcel_2[3]>currentWith_3_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[3]:currentWith_3_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.fecha_insercion != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.fecha_insercion
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_4_tFileOutputExcel_2);
							int currentWith_4_tFileOutputExcel_2 = cell_4_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[4]=fitWidth_tFileOutputExcel_2[4]>currentWith_4_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[4]:currentWith_4_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.fecha_pago != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.fecha_pago
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_5_tFileOutputExcel_2);
							int currentWith_5_tFileOutputExcel_2 = cell_5_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[5]=fitWidth_tFileOutputExcel_2[5]>currentWith_5_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[5]:currentWith_5_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.portafolio_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.portafolio_nombre
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_6_tFileOutputExcel_2);
							int currentWith_6_tFileOutputExcel_2 = cell_6_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[6]=fitWidth_tFileOutputExcel_2[6]>currentWith_6_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[6]:currentWith_6_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.sistema_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.sistema_nombre
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_7_tFileOutputExcel_2);
							int currentWith_7_tFileOutputExcel_2 = cell_7_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[7]=fitWidth_tFileOutputExcel_2[7]>currentWith_7_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[7]:currentWith_7_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.cant_contratos != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_2 = new jxl.write.Number(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.cant_contratos
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_8_tFileOutputExcel_2);
							int currentWith_8_tFileOutputExcel_2 = String.valueOf(((jxl.write.Number)cell_8_tFileOutputExcel_2).getValue()).trim().length();
							currentWith_8_tFileOutputExcel_2=currentWith_8_tFileOutputExcel_2>10?10:currentWith_8_tFileOutputExcel_2;
							fitWidth_tFileOutputExcel_2[8]=fitWidth_tFileOutputExcel_2[8]>currentWith_8_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[8]:currentWith_8_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.trader_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.trader_nombre
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_9_tFileOutputExcel_2);
							int currentWith_9_tFileOutputExcel_2 = cell_9_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[9]=fitWidth_tFileOutputExcel_2[9]>currentWith_9_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[9]:currentWith_9_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.producto_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.producto_nombre
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_10_tFileOutputExcel_2);
							int currentWith_10_tFileOutputExcel_2 = cell_10_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[10]=fitWidth_tFileOutputExcel_2[10]>currentWith_10_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[10]:currentWith_10_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.tipo_operacion_nombre != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.tipo_operacion_nombre
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_11_tFileOutputExcel_2);
							int currentWith_11_tFileOutputExcel_2 = cell_11_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[11]=fitWidth_tFileOutputExcel_2[11]>currentWith_11_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[11]:currentWith_11_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.moneda1 != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.moneda1
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_12_tFileOutputExcel_2);
							int currentWith_12_tFileOutputExcel_2 = cell_12_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[12]=fitWidth_tFileOutputExcel_2[12]>currentWith_12_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[12]:currentWith_12_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.moneda2 != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.moneda2
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_13_tFileOutputExcel_2);
							int currentWith_13_tFileOutputExcel_2 = cell_13_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[13]=fitWidth_tFileOutputExcel_2[13]>currentWith_13_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[13]:currentWith_13_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.valor_nominal != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 14;
					

					
						jxl.write.WritableCell cell_14_tFileOutputExcel_2 = new jxl.write.Number(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.valor_nominal
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_14_tFileOutputExcel_2);
							int currentWith_14_tFileOutputExcel_2 = String.valueOf(((jxl.write.Number)cell_14_tFileOutputExcel_2).getValue()).trim().length();
							currentWith_14_tFileOutputExcel_2=currentWith_14_tFileOutputExcel_2>10?10:currentWith_14_tFileOutputExcel_2;
							fitWidth_tFileOutputExcel_2[14]=fitWidth_tFileOutputExcel_2[14]>currentWith_14_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[14]:currentWith_14_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.contraparte != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 15;
					

					
						jxl.write.WritableCell cell_15_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.contraparte
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_15_tFileOutputExcel_2);
							int currentWith_15_tFileOutputExcel_2 = cell_15_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[15]=fitWidth_tFileOutputExcel_2[15]>currentWith_15_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[15]:currentWith_15_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.precio != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 16;
					

					
						jxl.write.WritableCell cell_16_tFileOutputExcel_2 = new jxl.write.Number(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.precio
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_16_tFileOutputExcel_2);
							int currentWith_16_tFileOutputExcel_2 = String.valueOf(((jxl.write.Number)cell_16_tFileOutputExcel_2).getValue()).trim().length();
							currentWith_16_tFileOutputExcel_2=currentWith_16_tFileOutputExcel_2>10?10:currentWith_16_tFileOutputExcel_2;
							fitWidth_tFileOutputExcel_2[16]=fitWidth_tFileOutputExcel_2[16]>currentWith_16_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[16]:currentWith_16_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.subtipo != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 17;
					

					
						jxl.write.WritableCell cell_17_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.subtipo
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_17_tFileOutputExcel_2);
							int currentWith_17_tFileOutputExcel_2 = cell_17_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[17]=fitWidth_tFileOutputExcel_2[17]>currentWith_17_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[17]:currentWith_17_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(row1.errorMessage != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 18;
					

					
						jxl.write.WritableCell cell_18_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								row1.errorMessage
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_18_tFileOutputExcel_2);
							int currentWith_18_tFileOutputExcel_2 = cell_18_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[18]=fitWidth_tFileOutputExcel_2[18]>currentWith_18_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[18]:currentWith_18_tFileOutputExcel_2+2;
	    				} 
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if(rs_tDBInput_1 !=null){
		rs_tDBInput_1.close();
	}
	stmt_tDBInput_1.close();
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

		writeableWorkbook_tFileOutputExcel_2.write();
		writeableWorkbook_tFileOutputExcel_2.close();
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Consulta_Errores Consulta_ErroresClass = new Consulta_Errores();

        int exitCode = Consulta_ErroresClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Consulta_Errores.class.getClassLoader().getResourceAsStream("completo/consulta_errores_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Consulta_Errores.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Consulta_Errores");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     119359 characters generated by Talend Open Studio for Data Integration 
 *     on the 13 de mayo de 2018 05:06:13 PM COT
 ************************************************************************************************/