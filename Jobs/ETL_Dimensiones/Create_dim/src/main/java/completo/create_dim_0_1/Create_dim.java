// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package completo.create_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Create_dim Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Create_dim implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Create_dim";
	private final String projectName = "COMPLETO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Create_dim.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Create_dim.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_estadoDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sistemaDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_portafolioDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_traderDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_productoDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_contraparteDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_monedaDatamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_moneda2Datamart_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class falt_moneda2Struct implements routines.system.IPersistableRow<falt_moneda2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_moneda2Struct other = (falt_moneda2Struct) obj;
		
						if (this.idMoneda == null) {
							if (other.idMoneda != null)
								return false;
						
						} else if (!this.idMoneda.equals(other.idMoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_moneda2Struct other) {

		other.idMoneda = this.idMoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(falt_moneda2Struct other) {

		other.idMoneda = this.idMoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_moneda2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idMoneda, other.idMoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoMoneda2Struct implements routines.system.IPersistableRow<filtradoMoneda2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoMoneda2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_monedaStruct implements routines.system.IPersistableRow<falt_monedaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_monedaStruct other = (falt_monedaStruct) obj;
		
						if (this.idMoneda == null) {
							if (other.idMoneda != null)
								return false;
						
						} else if (!this.idMoneda.equals(other.idMoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_monedaStruct other) {

		other.idMoneda = this.idMoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(falt_monedaStruct other) {

		other.idMoneda = this.idMoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_monedaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idMoneda, other.idMoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoMoneda1Struct implements routines.system.IPersistableRow<filtradoMoneda1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoMoneda1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_contraparteStruct implements routines.system.IPersistableRow<falt_contraparteStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idContraparte;

				public String getIdContraparte () {
					return this.idContraparte;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idContraparte == null) ? 0 : this.idContraparte.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_contraparteStruct other = (falt_contraparteStruct) obj;
		
						if (this.idContraparte == null) {
							if (other.idContraparte != null)
								return false;
						
						} else if (!this.idContraparte.equals(other.idContraparte))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_contraparteStruct other) {

		other.idContraparte = this.idContraparte;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(falt_contraparteStruct other) {

		other.idContraparte = this.idContraparte;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idContraparte = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idContraparte,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idContraparte="+idContraparte);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_contraparteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idContraparte, other.idContraparte);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoContraparteStruct implements routines.system.IPersistableRow<filtradoContraparteStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idContraparte;

				public String getIdContraparte () {
					return this.idContraparte;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idContraparte = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idContraparte,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idContraparte="+idContraparte);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoContraparteStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_productoStruct implements routines.system.IPersistableRow<falt_productoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String tipo_operacion;

				public String getTipo_operacion () {
					return this.tipo_operacion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idProducto == null) ? 0 : this.idProducto.hashCode());
					
						result = prime * result + ((this.tipo_operacion == null) ? 0 : this.tipo_operacion.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_productoStruct other = (falt_productoStruct) obj;
		
						if (this.idProducto == null) {
							if (other.idProducto != null)
								return false;
						
						} else if (!this.idProducto.equals(other.idProducto))
						
							return false;
					
						if (this.tipo_operacion == null) {
							if (other.tipo_operacion != null)
								return false;
						
						} else if (!this.tipo_operacion.equals(other.tipo_operacion))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_productoStruct other) {

		other.idProducto = this.idProducto;
	            other.nombre = this.nombre;
	            other.tipo_operacion = this.tipo_operacion;
	            
	}

	public void copyKeysDataTo(falt_productoStruct other) {

		other.idProducto = this.idProducto;
	            	other.tipo_operacion = this.tipo_operacion;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idProducto = readString(dis);
					
					this.nombre = readString(dis);
					
					this.tipo_operacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idProducto="+idProducto);
		sb.append(",nombre="+nombre);
		sb.append(",tipo_operacion="+tipo_operacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_productoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idProducto, other.idProducto);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tipo_operacion, other.tipo_operacion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoProductoStruct implements routines.system.IPersistableRow<filtradoProductoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String tipo_operacion;

				public String getTipo_operacion () {
					return this.tipo_operacion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idProducto = readString(dis);
					
					this.nombre = readString(dis);
					
					this.tipo_operacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idProducto="+idProducto);
		sb.append(",nombre="+nombre);
		sb.append(",tipo_operacion="+tipo_operacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoProductoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_portafolioStruct implements routines.system.IPersistableRow<falt_portafolioStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idPortafolio == null) ? 0 : this.idPortafolio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_portafolioStruct other = (falt_portafolioStruct) obj;
		
						if (this.idPortafolio == null) {
							if (other.idPortafolio != null)
								return false;
						
						} else if (!this.idPortafolio.equals(other.idPortafolio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_portafolioStruct other) {

		other.idPortafolio = this.idPortafolio;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(falt_portafolioStruct other) {

		other.idPortafolio = this.idPortafolio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idPortafolio = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idPortafolio,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idPortafolio="+idPortafolio);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_portafolioStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idPortafolio, other.idPortafolio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoPortafolioStruct implements routines.system.IPersistableRow<filtradoPortafolioStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idPortafolio = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idPortafolio,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idPortafolio="+idPortafolio);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoPortafolioStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_sistemaStruct implements routines.system.IPersistableRow<falt_sistemaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idSistema;

				public String getIdSistema () {
					return this.idSistema;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idSistema == null) ? 0 : this.idSistema.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_sistemaStruct other = (falt_sistemaStruct) obj;
		
						if (this.idSistema == null) {
							if (other.idSistema != null)
								return false;
						
						} else if (!this.idSistema.equals(other.idSistema))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_sistemaStruct other) {

		other.idSistema = this.idSistema;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(falt_sistemaStruct other) {

		other.idSistema = this.idSistema;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idSistema = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idSistema,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idSistema="+idSistema);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_sistemaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idSistema, other.idSistema);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoSistemaStruct implements routines.system.IPersistableRow<filtradoSistemaStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idSistema;

				public String getIdSistema () {
					return this.idSistema;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idSistema = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idSistema,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idSistema="+idSistema);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoSistemaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_estadoStruct implements routines.system.IPersistableRow<falt_estadoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idestado;

				public String getIdestado () {
					return this.idestado;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idestado == null) ? 0 : this.idestado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_estadoStruct other = (falt_estadoStruct) obj;
		
						if (this.idestado == null) {
							if (other.idestado != null)
								return false;
						
						} else if (!this.idestado.equals(other.idestado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_estadoStruct other) {

		other.idestado = this.idestado;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(falt_estadoStruct other) {

		other.idestado = this.idestado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idestado = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idestado,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idestado="+idestado);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_estadoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idestado, other.idestado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoEstadoStruct implements routines.system.IPersistableRow<filtradoEstadoStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idestado;

				public String getIdestado () {
					return this.idestado;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idestado = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idestado,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idestado="+idestado);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoEstadoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class falt_traderStruct implements routines.system.IPersistableRow<falt_traderStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String apellido;

				public String getApellido () {
					return this.apellido;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idTrader == null) ? 0 : this.idTrader.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final falt_traderStruct other = (falt_traderStruct) obj;
		
						if (this.idTrader == null) {
							if (other.idTrader != null)
								return false;
						
						} else if (!this.idTrader.equals(other.idTrader))
						
							return false;
					

		return true;
    }

	public void copyDataTo(falt_traderStruct other) {

		other.idTrader = this.idTrader;
	            other.nombre = this.nombre;
	            other.apellido = this.apellido;
	            
	}

	public void copyKeysDataTo(falt_traderStruct other) {

		other.idTrader = this.idTrader;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idTrader = readString(dis);
					
					this.nombre = readString(dis);
					
					this.apellido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idTrader,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.apellido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idTrader="+idTrader);
		sb.append(",nombre="+nombre);
		sb.append(",apellido="+apellido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(falt_traderStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idTrader, other.idTrader);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filtradoTraderStruct implements routines.system.IPersistableRow<filtradoTraderStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String apellido;

				public String getApellido () {
					return this.apellido;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idTrader = readString(dis);
					
					this.nombre = readString(dis);
					
					this.apellido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idTrader,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.apellido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idTrader="+idTrader);
		sb.append(",nombre="+nombre);
		sb.append(",apellido="+apellido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filtradoTraderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TRADERStruct implements routines.system.IPersistableRow<TRADERStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String apellido;

				public String getApellido () {
					return this.apellido;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idTrader == null) ? 0 : this.idTrader.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TRADERStruct other = (TRADERStruct) obj;
		
						if (this.idTrader == null) {
							if (other.idTrader != null)
								return false;
						
						} else if (!this.idTrader.equals(other.idTrader))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TRADERStruct other) {

		other.idTrader = this.idTrader;
	            other.nombre = this.nombre;
	            other.apellido = this.apellido;
	            
	}

	public void copyKeysDataTo(TRADERStruct other) {

		other.idTrader = this.idTrader;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idTrader = readString(dis);
					
					this.nombre = readString(dis);
					
					this.apellido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idTrader,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.apellido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idTrader="+idTrader);
		sb.append(",nombre="+nombre);
		sb.append(",apellido="+apellido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TRADERStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idTrader, other.idTrader);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ESTADOStruct implements routines.system.IPersistableRow<ESTADOStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idestado;

				public String getIdestado () {
					return this.idestado;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idestado == null) ? 0 : this.idestado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ESTADOStruct other = (ESTADOStruct) obj;
		
						if (this.idestado == null) {
							if (other.idestado != null)
								return false;
						
						} else if (!this.idestado.equals(other.idestado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ESTADOStruct other) {

		other.idestado = this.idestado;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(ESTADOStruct other) {

		other.idestado = this.idestado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idestado = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idestado,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idestado="+idestado);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ESTADOStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idestado, other.idestado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SISTEMAStruct implements routines.system.IPersistableRow<SISTEMAStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idSistema;

				public String getIdSistema () {
					return this.idSistema;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idSistema == null) ? 0 : this.idSistema.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SISTEMAStruct other = (SISTEMAStruct) obj;
		
						if (this.idSistema == null) {
							if (other.idSistema != null)
								return false;
						
						} else if (!this.idSistema.equals(other.idSistema))
						
							return false;
					

		return true;
    }

	public void copyDataTo(SISTEMAStruct other) {

		other.idSistema = this.idSistema;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(SISTEMAStruct other) {

		other.idSistema = this.idSistema;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idSistema = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idSistema,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idSistema="+idSistema);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SISTEMAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idSistema, other.idSistema);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PORTAFOLIOStruct implements routines.system.IPersistableRow<PORTAFOLIOStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idPortafolio == null) ? 0 : this.idPortafolio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PORTAFOLIOStruct other = (PORTAFOLIOStruct) obj;
		
						if (this.idPortafolio == null) {
							if (other.idPortafolio != null)
								return false;
						
						} else if (!this.idPortafolio.equals(other.idPortafolio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PORTAFOLIOStruct other) {

		other.idPortafolio = this.idPortafolio;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(PORTAFOLIOStruct other) {

		other.idPortafolio = this.idPortafolio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idPortafolio = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idPortafolio,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idPortafolio="+idPortafolio);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PORTAFOLIOStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idPortafolio, other.idPortafolio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PRODUCTOStruct implements routines.system.IPersistableRow<PRODUCTOStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String tipo_operacion;

				public String getTipo_operacion () {
					return this.tipo_operacion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idProducto == null) ? 0 : this.idProducto.hashCode());
					
						result = prime * result + ((this.tipo_operacion == null) ? 0 : this.tipo_operacion.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PRODUCTOStruct other = (PRODUCTOStruct) obj;
		
						if (this.idProducto == null) {
							if (other.idProducto != null)
								return false;
						
						} else if (!this.idProducto.equals(other.idProducto))
						
							return false;
					
						if (this.tipo_operacion == null) {
							if (other.tipo_operacion != null)
								return false;
						
						} else if (!this.tipo_operacion.equals(other.tipo_operacion))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PRODUCTOStruct other) {

		other.idProducto = this.idProducto;
	            other.nombre = this.nombre;
	            other.tipo_operacion = this.tipo_operacion;
	            
	}

	public void copyKeysDataTo(PRODUCTOStruct other) {

		other.idProducto = this.idProducto;
	            	other.tipo_operacion = this.tipo_operacion;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idProducto = readString(dis);
					
					this.nombre = readString(dis);
					
					this.tipo_operacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idProducto="+idProducto);
		sb.append(",nombre="+nombre);
		sb.append(",tipo_operacion="+tipo_operacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PRODUCTOStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idProducto, other.idProducto);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tipo_operacion, other.tipo_operacion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CONTRAPARTEStruct implements routines.system.IPersistableRow<CONTRAPARTEStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idContraparte;

				public String getIdContraparte () {
					return this.idContraparte;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idContraparte == null) ? 0 : this.idContraparte.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CONTRAPARTEStruct other = (CONTRAPARTEStruct) obj;
		
						if (this.idContraparte == null) {
							if (other.idContraparte != null)
								return false;
						
						} else if (!this.idContraparte.equals(other.idContraparte))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CONTRAPARTEStruct other) {

		other.idContraparte = this.idContraparte;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(CONTRAPARTEStruct other) {

		other.idContraparte = this.idContraparte;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idContraparte = readString(dis);
					
					this.nombre = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idContraparte,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idContraparte="+idContraparte);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CONTRAPARTEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idContraparte, other.idContraparte);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class MON1Struct implements routines.system.IPersistableRow<MON1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MON1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class MON2Struct implements routines.system.IPersistableRow<MON2Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
					this.nombre = readString(dis);
					
					this.descripcion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.descripcion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MON2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public double P_L;

				public double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
			        this.P_L = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// double
				
		            	dos.writeDouble(this.P_L);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMysqlInput_1Struct implements routines.system.IPersistableRow<after_tMysqlInput_1Struct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];

	
			    public String id_operacion;

				public String getId_operacion () {
					return this.id_operacion;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String fecha_carga;

				public String getFecha_carga () {
					return this.fecha_carga;
				}
				
			    public String fecha_finalizacion;

				public String getFecha_finalizacion () {
					return this.fecha_finalizacion;
				}
				
			    public String fecha_insercion;

				public String getFecha_insercion () {
					return this.fecha_insercion;
				}
				
			    public String fecha_pago;

				public String getFecha_pago () {
					return this.fecha_pago;
				}
				
			    public String portafolio_nombre;

				public String getPortafolio_nombre () {
					return this.portafolio_nombre;
				}
				
			    public String sistema_nombre;

				public String getSistema_nombre () {
					return this.sistema_nombre;
				}
				
			    public Integer cant_contratos;

				public Integer getCant_contratos () {
					return this.cant_contratos;
				}
				
			    public String trader_nombre;

				public String getTrader_nombre () {
					return this.trader_nombre;
				}
				
			    public String producto_nombre;

				public String getProducto_nombre () {
					return this.producto_nombre;
				}
				
			    public String tipo_operacion_nombre;

				public String getTipo_operacion_nombre () {
					return this.tipo_operacion_nombre;
				}
				
			    public String moneda1;

				public String getMoneda1 () {
					return this.moneda1;
				}
				
			    public String moneda2;

				public String getMoneda2 () {
					return this.moneda2;
				}
				
			    public Double monto_operacion;

				public Double getMonto_operacion () {
					return this.monto_operacion;
				}
				
			    public String contraparte;

				public String getContraparte () {
					return this.contraparte;
				}
				
			    public Double precio;

				public Double getPrecio () {
					return this.precio;
				}
				
			    public String subtipo;

				public String getSubtipo () {
					return this.subtipo;
				}
				
			    public double P_L;

				public double getP_L () {
					return this.P_L;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.id_operacion = readString(dis);
					
					this.estado = readString(dis);
					
					this.fecha_carga = readString(dis);
					
					this.fecha_finalizacion = readString(dis);
					
					this.fecha_insercion = readString(dis);
					
					this.fecha_pago = readString(dis);
					
					this.portafolio_nombre = readString(dis);
					
					this.sistema_nombre = readString(dis);
					
						this.cant_contratos = readInteger(dis);
					
					this.trader_nombre = readString(dis);
					
					this.producto_nombre = readString(dis);
					
					this.tipo_operacion_nombre = readString(dis);
					
					this.moneda1 = readString(dis);
					
					this.moneda2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.monto_operacion = null;
           				} else {
           			    	this.monto_operacion = dis.readDouble();
           				}
					
					this.contraparte = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.precio = null;
           				} else {
           			    	this.precio = dis.readDouble();
           				}
					
					this.subtipo = readString(dis);
					
			        this.P_L = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_operacion,dos);
					
					// String
				
						writeString(this.estado,dos);
					
					// String
				
						writeString(this.fecha_carga,dos);
					
					// String
				
						writeString(this.fecha_finalizacion,dos);
					
					// String
				
						writeString(this.fecha_insercion,dos);
					
					// String
				
						writeString(this.fecha_pago,dos);
					
					// String
				
						writeString(this.portafolio_nombre,dos);
					
					// String
				
						writeString(this.sistema_nombre,dos);
					
					// Integer
				
						writeInteger(this.cant_contratos,dos);
					
					// String
				
						writeString(this.trader_nombre,dos);
					
					// String
				
						writeString(this.producto_nombre,dos);
					
					// String
				
						writeString(this.tipo_operacion_nombre,dos);
					
					// String
				
						writeString(this.moneda1,dos);
					
					// String
				
						writeString(this.moneda2,dos);
					
					// Double
				
						if(this.monto_operacion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.monto_operacion);
		            	}
					
					// String
				
						writeString(this.contraparte,dos);
					
					// Double
				
						if(this.precio == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.precio);
		            	}
					
					// String
				
						writeString(this.subtipo,dos);
					
					// double
				
		            	dos.writeDouble(this.P_L);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_operacion="+id_operacion);
		sb.append(",estado="+estado);
		sb.append(",fecha_carga="+fecha_carga);
		sb.append(",fecha_finalizacion="+fecha_finalizacion);
		sb.append(",fecha_insercion="+fecha_insercion);
		sb.append(",fecha_pago="+fecha_pago);
		sb.append(",portafolio_nombre="+portafolio_nombre);
		sb.append(",sistema_nombre="+sistema_nombre);
		sb.append(",cant_contratos="+String.valueOf(cant_contratos));
		sb.append(",trader_nombre="+trader_nombre);
		sb.append(",producto_nombre="+producto_nombre);
		sb.append(",tipo_operacion_nombre="+tipo_operacion_nombre);
		sb.append(",moneda1="+moneda1);
		sb.append(",moneda2="+moneda2);
		sb.append(",monto_operacion="+String.valueOf(monto_operacion));
		sb.append(",contraparte="+contraparte);
		sb.append(",precio="+String.valueOf(precio));
		sb.append(",subtipo="+subtipo);
		sb.append(",P_L="+String.valueOf(P_L));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMysqlInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tMysqlInput_3Process(globalMap);
		tMysqlInput_4Process(globalMap);
		tMysqlInput_5Process(globalMap);
		tMysqlInput_2Process(globalMap);
		tMysqlInput_6Process(globalMap);
		tMysqlInput_9Process(globalMap);
		tMysqlInput_7Process(globalMap);
		tMysqlInput_8Process(globalMap);

		row1Struct row1 = new row1Struct();
TRADERStruct TRADER = new TRADERStruct();
filtradoTraderStruct filtradoTrader = new filtradoTraderStruct();
falt_traderStruct falt_trader = new falt_traderStruct();
ESTADOStruct ESTADO = new ESTADOStruct();
filtradoEstadoStruct filtradoEstado = new filtradoEstadoStruct();
falt_estadoStruct falt_estado = new falt_estadoStruct();
SISTEMAStruct SISTEMA = new SISTEMAStruct();
filtradoSistemaStruct filtradoSistema = new filtradoSistemaStruct();
falt_sistemaStruct falt_sistema = new falt_sistemaStruct();
PORTAFOLIOStruct PORTAFOLIO = new PORTAFOLIOStruct();
filtradoPortafolioStruct filtradoPortafolio = new filtradoPortafolioStruct();
falt_portafolioStruct falt_portafolio = new falt_portafolioStruct();
PRODUCTOStruct PRODUCTO = new PRODUCTOStruct();
filtradoProductoStruct filtradoProducto = new filtradoProductoStruct();
falt_productoStruct falt_producto = new falt_productoStruct();
CONTRAPARTEStruct CONTRAPARTE = new CONTRAPARTEStruct();
filtradoContraparteStruct filtradoContraparte = new filtradoContraparteStruct();
falt_contraparteStruct falt_contraparte = new falt_contraparteStruct();
MON1Struct MON1 = new MON1Struct();
filtradoMoneda1Struct filtradoMoneda1 = new filtradoMoneda1Struct();
falt_monedaStruct falt_moneda = new falt_monedaStruct();
MON2Struct MON2 = new MON2Struct();
filtradoMoneda2Struct filtradoMoneda2 = new filtradoMoneda2Struct();
falt_moneda2Struct falt_moneda2 = new falt_moneda2Struct();







	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_trader" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "dimtrader";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "dimtrader" + "` (`idTrader`,`nombre`,`apellido`) VALUES (?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoTrader" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderDatamartStruct> tHash_Lookup_traderDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderDatamartStruct>) 
					globalMap.get( "tHash_Lookup_traderDatamart" ))
					;					
					
	

traderDatamartStruct traderDatamartHashKey = new traderDatamartStruct();
traderDatamartStruct traderDatamartDefault = new traderDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_traderStruct falt_trader_tmp = new falt_traderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("TRADER" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		
    	class BytesLimit65535_tUniqRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_1().limitLog4jByte();

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idTrader;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idTrader == null) ? 0 : this.idTrader.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.idTrader == null) {
										if (other.idTrader != null) 
											return false;
								
									} else if (!this.idTrader.equals(other.idTrader))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_2", false);
		start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_estado" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_2 = 0;
		
    	class BytesLimit65535_tMysqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_2().limitLog4jByte();






int nb_line_tMysqlOutput_2 = 0;
int nb_line_update_tMysqlOutput_2 = 0;
int nb_line_inserted_tMysqlOutput_2 = 0;
int nb_line_deleted_tMysqlOutput_2 = 0;
int nb_line_rejected_tMysqlOutput_2 = 0;

int deletedCount_tMysqlOutput_2=0;
int updatedCount_tMysqlOutput_2=0;
int insertedCount_tMysqlOutput_2=0;

int rejectedCount_tMysqlOutput_2=0;

String tableName_tMysqlOutput_2 = "dimestado";
boolean whetherReject_tMysqlOutput_2 = false;

java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
long date_tMysqlOutput_2;

java.sql.Connection conn_tMysqlOutput_2 = null;
		String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_2 = null;
		if(dbProperties_tMysqlOutput_2 == null || dbProperties_tMysqlOutput_2.trim().length() == 0) {
			url_tMysqlOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_2.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_2;
		}
		String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_2 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
		java.lang.Class.forName(driverClass_tMysqlOutput_2);
		
		conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(url_tMysqlOutput_2, dbUser_tMysqlOutput_2, dbPwd_tMysqlOutput_2);
		
	
	resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
        conn_tMysqlOutput_2.setAutoCommit(false);
        int commitEvery_tMysqlOutput_2 = 10000;
        int commitCounter_tMysqlOutput_2 = 0;

int count_tMysqlOutput_2=0;
    	

				String insert_tMysqlOutput_2 = "INSERT INTO `" + "dimestado" + "` (`idestado`,`nombre`) VALUES (?,?)";
		        int batchSize_tMysqlOutput_2 = 100;
	   			int batchSizeCounter_tMysqlOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2.prepareStatement(insert_tMysqlOutput_2);


 



/**
 * [tMysqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoEstado" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoDatamartStruct> tHash_Lookup_estadoDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoDatamartStruct>) 
					globalMap.get( "tHash_Lookup_estadoDatamart" ))
					;					
					
	

estadoDatamartStruct estadoDatamartHashKey = new estadoDatamartStruct();
estadoDatamartStruct estadoDatamartDefault = new estadoDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_estadoStruct falt_estado_tmp = new falt_estadoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ESTADO" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_2 = 0;
		
    	class BytesLimit65535_tUniqRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_2().limitLog4jByte();

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idestado;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idestado == null) ? 0 : this.idestado.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.idestado == null) {
										if (other.idestado != null) 
											return false;
								
									} else if (!this.idestado.equals(other.idestado))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_3", false);
		start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_sistema" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_3 = 0;
		
    	class BytesLimit65535_tMysqlOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_3().limitLog4jByte();






int nb_line_tMysqlOutput_3 = 0;
int nb_line_update_tMysqlOutput_3 = 0;
int nb_line_inserted_tMysqlOutput_3 = 0;
int nb_line_deleted_tMysqlOutput_3 = 0;
int nb_line_rejected_tMysqlOutput_3 = 0;

int deletedCount_tMysqlOutput_3=0;
int updatedCount_tMysqlOutput_3=0;
int insertedCount_tMysqlOutput_3=0;

int rejectedCount_tMysqlOutput_3=0;

String tableName_tMysqlOutput_3 = "dimsistema";
boolean whetherReject_tMysqlOutput_3 = false;

java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
long date_tMysqlOutput_3;

java.sql.Connection conn_tMysqlOutput_3 = null;
		String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_3 = null;
		if(dbProperties_tMysqlOutput_3 == null || dbProperties_tMysqlOutput_3.trim().length() == 0) {
			url_tMysqlOutput_3 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_3.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_3 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_3;
		}
		String driverClass_tMysqlOutput_3 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_3 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
		java.lang.Class.forName(driverClass_tMysqlOutput_3);
		
		conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(url_tMysqlOutput_3, dbUser_tMysqlOutput_3, dbPwd_tMysqlOutput_3);
		
	
	resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
        conn_tMysqlOutput_3.setAutoCommit(false);
        int commitEvery_tMysqlOutput_3 = 10000;
        int commitCounter_tMysqlOutput_3 = 0;

int count_tMysqlOutput_3=0;
    	

				String insert_tMysqlOutput_3 = "INSERT INTO `" + "dimsistema" + "` (`idSistema`,`nombre`,`descripcion`) VALUES (?,?,?)";
		        int batchSize_tMysqlOutput_3 = 100;
	   			int batchSizeCounter_tMysqlOutput_3=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3.prepareStatement(insert_tMysqlOutput_3);


 



/**
 * [tMysqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoSistema" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaDatamartStruct> tHash_Lookup_sistemaDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaDatamartStruct>) 
					globalMap.get( "tHash_Lookup_sistemaDatamart" ))
					;					
					
	

sistemaDatamartStruct sistemaDatamartHashKey = new sistemaDatamartStruct();
sistemaDatamartStruct sistemaDatamartDefault = new sistemaDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_sistemaStruct falt_sistema_tmp = new falt_sistemaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("SISTEMA" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_3 = 0;
		
    	class BytesLimit65535_tUniqRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_3().limitLog4jByte();

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idSistema;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idSistema == null) ? 0 : this.idSistema.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.idSistema == null) {
										if (other.idSistema != null) 
											return false;
								
									} else if (!this.idSistema.equals(other.idSistema))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_4", false);
		start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_portafolio" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_4 = 0;
		
    	class BytesLimit65535_tMysqlOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_4().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_4 = 1;
        if(updateKeyCount_tMysqlOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_4 = 0;
int nb_line_update_tMysqlOutput_4 = 0;
int nb_line_inserted_tMysqlOutput_4 = 0;
int nb_line_deleted_tMysqlOutput_4 = 0;
int nb_line_rejected_tMysqlOutput_4 = 0;

int deletedCount_tMysqlOutput_4=0;
int updatedCount_tMysqlOutput_4=0;
int insertedCount_tMysqlOutput_4=0;

int rejectedCount_tMysqlOutput_4=0;

String tableName_tMysqlOutput_4 = "dimportafolio";
boolean whetherReject_tMysqlOutput_4 = false;

java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
long date_tMysqlOutput_4;

java.sql.Connection conn_tMysqlOutput_4 = null;
		String dbProperties_tMysqlOutput_4 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_4 = null;
		if(dbProperties_tMysqlOutput_4 == null || dbProperties_tMysqlOutput_4.trim().length() == 0) {
			url_tMysqlOutput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_4 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_4.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_4;
		}
		String driverClass_tMysqlOutput_4 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_4 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;
		java.lang.Class.forName(driverClass_tMysqlOutput_4);
		
		conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(url_tMysqlOutput_4, dbUser_tMysqlOutput_4, dbPwd_tMysqlOutput_4);
		
	
	resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
        conn_tMysqlOutput_4.setAutoCommit(false);
        int commitEvery_tMysqlOutput_4 = 10000;
        int commitCounter_tMysqlOutput_4 = 0;

int count_tMysqlOutput_4=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement("SELECT COUNT(1) FROM `" + "dimportafolio" + "` WHERE `idPortafolio` = ?");
	    String insert_tMysqlOutput_4 = "INSERT INTO `" + "dimportafolio" + "` (`idPortafolio`,`nombre`,`descripcion`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement(insert_tMysqlOutput_4);
	    String update_tMysqlOutput_4 = "UPDATE `" + "dimportafolio" + "` SET `nombre` = ?,`descripcion` = ? WHERE `idPortafolio` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement(update_tMysqlOutput_4);
	    

 



/**
 * [tMysqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoPortafolio" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		
    	class BytesLimit65535_tMap_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_5().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioDatamartStruct> tHash_Lookup_portafolioDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioDatamartStruct>) 
					globalMap.get( "tHash_Lookup_portafolioDatamart" ))
					;					
					
	

portafolioDatamartStruct portafolioDatamartHashKey = new portafolioDatamartStruct();
portafolioDatamartStruct portafolioDatamartDefault = new portafolioDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_portafolioStruct falt_portafolio_tmp = new falt_portafolioStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("PORTAFOLIO" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_4 = 0;
		
    	class BytesLimit65535_tUniqRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_4().limitLog4jByte();

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idPortafolio;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idPortafolio == null) ? 0 : this.idPortafolio.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.idPortafolio == null) {
										if (other.idPortafolio != null) 
											return false;
								
									} else if (!this.idPortafolio.equals(other.idPortafolio))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_5", false);
		start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_producto" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_5 = 0;
		
    	class BytesLimit65535_tMysqlOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_5().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_5 = 2;
        if(updateKeyCount_tMysqlOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_5 = 0;
int nb_line_update_tMysqlOutput_5 = 0;
int nb_line_inserted_tMysqlOutput_5 = 0;
int nb_line_deleted_tMysqlOutput_5 = 0;
int nb_line_rejected_tMysqlOutput_5 = 0;

int deletedCount_tMysqlOutput_5=0;
int updatedCount_tMysqlOutput_5=0;
int insertedCount_tMysqlOutput_5=0;

int rejectedCount_tMysqlOutput_5=0;

String tableName_tMysqlOutput_5 = "dimproducto";
boolean whetherReject_tMysqlOutput_5 = false;

java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
long date_tMysqlOutput_5;

java.sql.Connection conn_tMysqlOutput_5 = null;
		String dbProperties_tMysqlOutput_5 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_5 = null;
		if(dbProperties_tMysqlOutput_5 == null || dbProperties_tMysqlOutput_5.trim().length() == 0) {
			url_tMysqlOutput_5 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_5 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_5.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_5 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_5;
		}
		String driverClass_tMysqlOutput_5 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_5 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_5 = decryptedPassword_tMysqlOutput_5;
		java.lang.Class.forName(driverClass_tMysqlOutput_5);
		
		conn_tMysqlOutput_5 = java.sql.DriverManager.getConnection(url_tMysqlOutput_5, dbUser_tMysqlOutput_5, dbPwd_tMysqlOutput_5);
		
	
	resourceMap.put("conn_tMysqlOutput_5", conn_tMysqlOutput_5);
        conn_tMysqlOutput_5.setAutoCommit(false);
        int commitEvery_tMysqlOutput_5 = 10000;
        int commitCounter_tMysqlOutput_5 = 0;

int count_tMysqlOutput_5=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement("SELECT COUNT(1) FROM `" + "dimproducto" + "` WHERE `idProducto` = ? AND `tipo_operacion` = ?");
	    String insert_tMysqlOutput_5 = "INSERT INTO `" + "dimproducto" + "` (`idProducto`,`nombre`,`tipo_operacion`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement(insert_tMysqlOutput_5);
	    String update_tMysqlOutput_5 = "UPDATE `" + "dimproducto" + "` SET `nombre` = ? WHERE `idProducto` = ? AND `tipo_operacion` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement(update_tMysqlOutput_5);
	    

 



/**
 * [tMysqlOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoProducto" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoDatamartStruct> tHash_Lookup_productoDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoDatamartStruct>) 
					globalMap.get( "tHash_Lookup_productoDatamart" ))
					;					
					
	

productoDatamartStruct productoDatamartHashKey = new productoDatamartStruct();
productoDatamartStruct productoDatamartDefault = new productoDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_productoStruct falt_producto_tmp = new falt_productoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("PRODUCTO" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_5 = 0;
		
    	class BytesLimit65535_tUniqRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_5().limitLog4jByte();

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idProducto;
					String tipo_operacion;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idProducto == null) ? 0 : this.idProducto.hashCode());
								
								result = prime * result + ((this.tipo_operacion == null) ? 0 : this.tipo_operacion.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.idProducto == null) {
										if (other.idProducto != null) 
											return false;
								
									} else if (!this.idProducto.equals(other.idProducto))
								 
										return false;
								
									if (this.tipo_operacion == null) {
										if (other.tipo_operacion != null) 
											return false;
								
									} else if (!this.tipo_operacion.equals(other.tipo_operacion))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_6", false);
		start_Hash.put("tMysqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_contraparte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_6 = 0;
		
    	class BytesLimit65535_tMysqlOutput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_6().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_6 = 1;
        if(updateKeyCount_tMysqlOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_6 = 0;
int nb_line_update_tMysqlOutput_6 = 0;
int nb_line_inserted_tMysqlOutput_6 = 0;
int nb_line_deleted_tMysqlOutput_6 = 0;
int nb_line_rejected_tMysqlOutput_6 = 0;

int deletedCount_tMysqlOutput_6=0;
int updatedCount_tMysqlOutput_6=0;
int insertedCount_tMysqlOutput_6=0;

int rejectedCount_tMysqlOutput_6=0;

String tableName_tMysqlOutput_6 = "dimcontraparte";
boolean whetherReject_tMysqlOutput_6 = false;

java.util.Calendar calendar_tMysqlOutput_6 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
calendar_tMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
long date_tMysqlOutput_6;

java.sql.Connection conn_tMysqlOutput_6 = null;
		String dbProperties_tMysqlOutput_6 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_6 = null;
		if(dbProperties_tMysqlOutput_6 == null || dbProperties_tMysqlOutput_6.trim().length() == 0) {
			url_tMysqlOutput_6 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_6 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_6.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_6 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_6 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_6;
		}
		String driverClass_tMysqlOutput_6 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_6 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_6 = decryptedPassword_tMysqlOutput_6;
		java.lang.Class.forName(driverClass_tMysqlOutput_6);
		
		conn_tMysqlOutput_6 = java.sql.DriverManager.getConnection(url_tMysqlOutput_6, dbUser_tMysqlOutput_6, dbPwd_tMysqlOutput_6);
		
	
	resourceMap.put("conn_tMysqlOutput_6", conn_tMysqlOutput_6);
        conn_tMysqlOutput_6.setAutoCommit(false);
        int commitEvery_tMysqlOutput_6 = 10000;
        int commitCounter_tMysqlOutput_6 = 0;

int count_tMysqlOutput_6=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_6 = conn_tMysqlOutput_6.prepareStatement("SELECT COUNT(1) FROM `" + "dimcontraparte" + "` WHERE `idContraparte` = ?");
	    String insert_tMysqlOutput_6 = "INSERT INTO `" + "dimcontraparte" + "` (`idContraparte`,`nombre`) VALUES (?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_6 = conn_tMysqlOutput_6.prepareStatement(insert_tMysqlOutput_6);
	    String update_tMysqlOutput_6 = "UPDATE `" + "dimcontraparte" + "` SET `nombre` = ? WHERE `idContraparte` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_6 = conn_tMysqlOutput_6.prepareStatement(update_tMysqlOutput_6);
	    

 



/**
 * [tMysqlOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoContraparte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_11 = 0;
		
    	class BytesLimit65535_tMap_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_11().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteDatamartStruct> tHash_Lookup_contraparteDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteDatamartStruct>) 
					globalMap.get( "tHash_Lookup_contraparteDatamart" ))
					;					
					
	

contraparteDatamartStruct contraparteDatamartHashKey = new contraparteDatamartStruct();
contraparteDatamartStruct contraparteDatamartDefault = new contraparteDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_contraparteStruct falt_contraparte_tmp = new falt_contraparteStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("CONTRAPARTE" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_7 = 0;
		
    	class BytesLimit65535_tUniqRow_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_7().limitLog4jByte();

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idContraparte;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idContraparte == null) ? 0 : this.idContraparte.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.idContraparte == null) {
										if (other.idContraparte != null) 
											return false;
								
									} else if (!this.idContraparte.equals(other.idContraparte))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_7", false);
		start_Hash.put("tMysqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_moneda" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_7 = 0;
		
    	class BytesLimit65535_tMysqlOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_7().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_7 = 1;
        if(updateKeyCount_tMysqlOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_7 = 0;
int nb_line_update_tMysqlOutput_7 = 0;
int nb_line_inserted_tMysqlOutput_7 = 0;
int nb_line_deleted_tMysqlOutput_7 = 0;
int nb_line_rejected_tMysqlOutput_7 = 0;

int deletedCount_tMysqlOutput_7=0;
int updatedCount_tMysqlOutput_7=0;
int insertedCount_tMysqlOutput_7=0;

int rejectedCount_tMysqlOutput_7=0;

String tableName_tMysqlOutput_7 = "diminfomoneda";
boolean whetherReject_tMysqlOutput_7 = false;

java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
long date_tMysqlOutput_7;

java.sql.Connection conn_tMysqlOutput_7 = null;
		String dbProperties_tMysqlOutput_7 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_7 = null;
		if(dbProperties_tMysqlOutput_7 == null || dbProperties_tMysqlOutput_7.trim().length() == 0) {
			url_tMysqlOutput_7 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_7 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_7.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_7 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_7 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_7;
		}
		String driverClass_tMysqlOutput_7 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_7 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_7 = decryptedPassword_tMysqlOutput_7;
		java.lang.Class.forName(driverClass_tMysqlOutput_7);
		
		conn_tMysqlOutput_7 = java.sql.DriverManager.getConnection(url_tMysqlOutput_7, dbUser_tMysqlOutput_7, dbPwd_tMysqlOutput_7);
		
	
	resourceMap.put("conn_tMysqlOutput_7", conn_tMysqlOutput_7);
        conn_tMysqlOutput_7.setAutoCommit(false);
        int commitEvery_tMysqlOutput_7 = 10000;
        int commitCounter_tMysqlOutput_7 = 0;

int count_tMysqlOutput_7=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7.prepareStatement("SELECT COUNT(1) FROM `" + "diminfomoneda" + "` WHERE `idMoneda` = ?");
	    String insert_tMysqlOutput_7 = "INSERT INTO `" + "diminfomoneda" + "` (`idMoneda`,`nombre`,`descripcion`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_7 = conn_tMysqlOutput_7.prepareStatement(insert_tMysqlOutput_7);
	    String update_tMysqlOutput_7 = "UPDATE `" + "diminfomoneda" + "` SET `nombre` = ?,`descripcion` = ? WHERE `idMoneda` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_7 = conn_tMysqlOutput_7.prepareStatement(update_tMysqlOutput_7);
	    

 



/**
 * [tMysqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoMoneda1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		
    	class BytesLimit65535_tMap_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_7().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaDatamartStruct> tHash_Lookup_monedaDatamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaDatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaDatamartStruct>) 
					globalMap.get( "tHash_Lookup_monedaDatamart" ))
					;					
					
	

monedaDatamartStruct monedaDatamartHashKey = new monedaDatamartStruct();
monedaDatamartStruct monedaDatamartDefault = new monedaDatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_monedaStruct falt_moneda_tmp = new falt_monedaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("MON1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_8 = 0;
		
    	class BytesLimit65535_tUniqRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_8().limitLog4jByte();

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idMoneda;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.idMoneda == null) {
										if (other.idMoneda != null) 
											return false;
								
									} else if (!this.idMoneda.equals(other.idMoneda))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */






	
	/**
	 * [tMysqlOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_8", false);
		start_Hash.put("tMysqlOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("falt_moneda2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_8 = 0;
		
    	class BytesLimit65535_tMysqlOutput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_8().limitLog4jByte();





        int updateKeyCount_tMysqlOutput_8 = 1;
        if(updateKeyCount_tMysqlOutput_8 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_8 = 0;
int nb_line_update_tMysqlOutput_8 = 0;
int nb_line_inserted_tMysqlOutput_8 = 0;
int nb_line_deleted_tMysqlOutput_8 = 0;
int nb_line_rejected_tMysqlOutput_8 = 0;

int deletedCount_tMysqlOutput_8=0;
int updatedCount_tMysqlOutput_8=0;
int insertedCount_tMysqlOutput_8=0;

int rejectedCount_tMysqlOutput_8=0;

String tableName_tMysqlOutput_8 = "diminfomoneda";
boolean whetherReject_tMysqlOutput_8 = false;

java.util.Calendar calendar_tMysqlOutput_8 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_8.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_8 = calendar_tMysqlOutput_8.getTime().getTime();
calendar_tMysqlOutput_8.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_8 = calendar_tMysqlOutput_8.getTime().getTime();
long date_tMysqlOutput_8;

java.sql.Connection conn_tMysqlOutput_8 = null;
		String dbProperties_tMysqlOutput_8 = "noDatetimeStringSync=true";
		String url_tMysqlOutput_8 = null;
		if(dbProperties_tMysqlOutput_8 == null || dbProperties_tMysqlOutput_8.trim().length() == 0) {
			url_tMysqlOutput_8 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_8 = "noDatetimeStringSync=true";
			if (!properties_tMysqlOutput_8.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_8 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_8 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + properties_tMysqlOutput_8;
		}
		String driverClass_tMysqlOutput_8 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_8 = "tesis";
		

		 
	final String decryptedPassword_tMysqlOutput_8 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");

		String dbPwd_tMysqlOutput_8 = decryptedPassword_tMysqlOutput_8;
		java.lang.Class.forName(driverClass_tMysqlOutput_8);
		
		conn_tMysqlOutput_8 = java.sql.DriverManager.getConnection(url_tMysqlOutput_8, dbUser_tMysqlOutput_8, dbPwd_tMysqlOutput_8);
		
	
	resourceMap.put("conn_tMysqlOutput_8", conn_tMysqlOutput_8);
        conn_tMysqlOutput_8.setAutoCommit(false);
        int commitEvery_tMysqlOutput_8 = 10000;
        int commitCounter_tMysqlOutput_8 = 0;

int count_tMysqlOutput_8=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_8 = conn_tMysqlOutput_8.prepareStatement("SELECT COUNT(1) FROM `" + "diminfomoneda" + "` WHERE `idMoneda` = ?");
	    String insert_tMysqlOutput_8 = "INSERT INTO `" + "diminfomoneda" + "` (`idMoneda`,`nombre`,`descripcion`) VALUES (?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_8 = conn_tMysqlOutput_8.prepareStatement(insert_tMysqlOutput_8);
	    String update_tMysqlOutput_8 = "UPDATE `" + "diminfomoneda" + "` SET `nombre` = ?,`descripcion` = ? WHERE `idMoneda` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_8 = conn_tMysqlOutput_8.prepareStatement(update_tMysqlOutput_8);
	    

 



/**
 * [tMysqlOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("filtradoMoneda2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		
    	class BytesLimit65535_tMap_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_8().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2DatamartStruct> tHash_Lookup_moneda2Datamart = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2DatamartStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2DatamartStruct>) 
					globalMap.get( "tHash_Lookup_moneda2Datamart" ))
					;					
					
	

moneda2DatamartStruct moneda2DatamartHashKey = new moneda2DatamartStruct();
moneda2DatamartStruct moneda2DatamartDefault = new moneda2DatamartStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
falt_moneda2Struct falt_moneda2_tmp = new falt_moneda2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_10", false);
		start_Hash.put("tUniqRow_10", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("MON2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_10 = 0;
		
    	class BytesLimit65535_tUniqRow_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_10().limitLog4jByte();

	
		class KeyStruct_tUniqRow_10 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String idMoneda;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;
				
									if (this.idMoneda == null) {
										if (other.idMoneda != null) 
											return false;
								
									} else if (!this.idMoneda.equals(other.idMoneda))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_10 = 0;
int nb_duplicates_tUniqRow_10 = 0;
KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>(); 

 



/**
 * [tUniqRow_10 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
TRADERStruct TRADER_tmp = new TRADERStruct();
ESTADOStruct ESTADO_tmp = new ESTADOStruct();
SISTEMAStruct SISTEMA_tmp = new SISTEMAStruct();
PORTAFOLIOStruct PORTAFOLIO_tmp = new PORTAFOLIOStruct();
PRODUCTOStruct PRODUCTO_tmp = new PRODUCTOStruct();
CONTRAPARTEStruct CONTRAPARTE_tmp = new CONTRAPARTEStruct();
MON1Struct MON1_tmp = new MON1Struct();
MON2Struct MON2_tmp = new MON2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "stage" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT * FROM stage;";
			

            	globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);
		    java.sql.ResultSet rs_tMysqlInput_1 = null;

		    try {
		    	rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    	int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.id_operacion = null;
							} else {
	                         		
        	row1.id_operacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row1.estado = null;
							} else {
	                         		
        	row1.estado = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row1.fecha_carga = null;
							} else {
	                         		
        	row1.fecha_carga = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row1.fecha_finalizacion = null;
							} else {
	                         		
        	row1.fecha_finalizacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row1.fecha_insercion = null;
							} else {
	                         		
        	row1.fecha_insercion = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row1.fecha_pago = null;
							} else {
	                         		
        	row1.fecha_pago = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row1.portafolio_nombre = null;
							} else {
	                         		
        	row1.portafolio_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row1.sistema_nombre = null;
							} else {
	                         		
        	row1.sistema_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row1.cant_contratos = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(9) != null) {
                row1.cant_contratos = rs_tMysqlInput_1.getInt(9);
            } else {
                    row1.cant_contratos = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row1.trader_nombre = null;
							} else {
	                         		
        	row1.trader_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row1.producto_nombre = null;
							} else {
	                         		
        	row1.producto_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 12) {
								row1.tipo_operacion_nombre = null;
							} else {
	                         		
        	row1.tipo_operacion_nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 13) {
								row1.moneda1 = null;
							} else {
	                         		
        	row1.moneda1 = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 14) {
								row1.moneda2 = null;
							} else {
	                         		
        	row1.moneda2 = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 15) {
								row1.monto_operacion = null;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(15) != null) {
                row1.monto_operacion = rs_tMysqlInput_1.getDouble(15);
            } else {
                    row1.monto_operacion = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 16) {
								row1.contraparte = null;
							} else {
	                         		
        	row1.contraparte = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 16, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 17) {
								row1.precio = null;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(17) != null) {
                row1.precio = rs_tMysqlInput_1.getDouble(17);
            } else {
                    row1.precio = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 18) {
								row1.subtipo = null;
							} else {
	                         		
        	row1.subtipo = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 18, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 19) {
								row1.P_L = 0;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(19) != null) {
                row1.P_L = rs_tMysqlInput_1.getDouble(19);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */
	
	/**
	 * [tMysqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

TRADER = null;
ESTADO = null;
SISTEMA = null;
PORTAFOLIO = null;
PRODUCTO = null;
CONTRAPARTE = null;
MON1 = null;
MON2 = null;


// # Output table : 'TRADER'
TRADER_tmp.idTrader = StringHandling.BTRIM(row1.trader_nombre ) ;
TRADER_tmp.nombre = null;
TRADER_tmp.apellido = null;
TRADER = TRADER_tmp;

// # Output table : 'ESTADO'
ESTADO_tmp.idestado = row1.estado ;
ESTADO_tmp.nombre = null;
ESTADO = ESTADO_tmp;

// # Output table : 'SISTEMA'
SISTEMA_tmp.idSistema = row1.sistema_nombre ;
SISTEMA_tmp.nombre = null;
SISTEMA_tmp.descripcion = null;
SISTEMA = SISTEMA_tmp;

// # Output table : 'PORTAFOLIO'
PORTAFOLIO_tmp.idPortafolio = row1.portafolio_nombre ;
PORTAFOLIO_tmp.nombre = null;
PORTAFOLIO_tmp.descripcion = null;
PORTAFOLIO = PORTAFOLIO_tmp;

// # Output table : 'PRODUCTO'
PRODUCTO_tmp.idProducto = row1.producto_nombre ;
PRODUCTO_tmp.nombre = null;
PRODUCTO_tmp.tipo_operacion = row1.tipo_operacion_nombre ;
PRODUCTO = PRODUCTO_tmp;

// # Output table : 'CONTRAPARTE'
CONTRAPARTE_tmp.idContraparte = row1.contraparte;
CONTRAPARTE_tmp.nombre = null;
CONTRAPARTE = CONTRAPARTE_tmp;

// # Output table : 'MON1'
MON1_tmp.idMoneda = row1.moneda1 ;
MON1_tmp.nombre = null;
MON1_tmp.descripcion = null;
MON1 = MON1_tmp;

// # Output table : 'MON2'
MON2_tmp.idMoneda = row1.moneda2 ;
MON2_tmp.nombre = null;
MON2_tmp.descripcion = null;
MON2 = MON2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "TRADER"
if(TRADER != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//TRADER
			//TRADER


			
				if(execStat){
					runStat.updateStatOnConnection("TRADER"+iterateId,1, 1);
				} 
			

		
filtradoTrader = null;			
if(TRADER.idTrader == null){
	finder_tUniqRow_1.idTrader = null;
}else{
	finder_tUniqRow_1.idTrader = TRADER.idTrader.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(TRADER.idTrader == null){
	new_tUniqRow_1.idTrader = null;
}else{
	new_tUniqRow_1.idTrader = TRADER.idTrader.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(filtradoTrader == null){ 
	
	filtradoTrader = new filtradoTraderStruct();
}filtradoTrader.idTrader = TRADER.idTrader;			filtradoTrader.nombre = TRADER.nombre;			filtradoTrader.apellido = TRADER.apellido;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "filtradoTrader"
if(filtradoTrader != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//filtradoTrader
			//filtradoTrader


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoTrader"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "traderDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptraderDatamart = false;
       		  	    	
       		  	    	
 							traderDatamartStruct traderDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		traderDatamartHashKey.idTrader = filtradoTrader.idTrader ;
                        		    		

								
		                        	traderDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_traderDatamart.lookup( traderDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_traderDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_traderDatamart != null && tHash_Lookup_traderDatamart.getCount(traderDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'traderDatamart' and it contains more one result from keys :  traderDatamart.idTrader = '" + traderDatamartHashKey.idTrader + "'");
								} // G 071
							

							traderDatamartStruct traderDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	traderDatamartStruct fromLookup_traderDatamart = null;
							traderDatamart = traderDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_traderDatamart !=null && tHash_Lookup_traderDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_traderDatamart = tHash_Lookup_traderDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_traderDatamart != null) {
								traderDatamart = fromLookup_traderDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

falt_trader = null;

if(!rejectedInnerJoin_tMap_2 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_trader'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
falt_trader_tmp.idTrader = filtradoTrader.idTrader ;
falt_trader_tmp.nombre = null;
falt_trader_tmp.apellido = null;
falt_trader = falt_trader_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "falt_trader"
if(falt_trader != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//falt_trader
			//falt_trader


			
				if(execStat){
					runStat.updateStatOnConnection("falt_trader"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(falt_trader.idTrader == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, falt_trader.idTrader);
}

                            if(falt_trader.nombre == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, falt_trader.nombre);
}

                            if(falt_trader.apellido == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(3, falt_trader.apellido);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
            if(!whetherReject_tMysqlOutput_1) {
            }
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "falt_trader"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "filtradoTrader"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "TRADER"




// Start of branch "ESTADO"
if(ESTADO != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

			//ESTADO
			//ESTADO


			
				if(execStat){
					runStat.updateStatOnConnection("ESTADO"+iterateId,1, 1);
				} 
			

		
filtradoEstado = null;			
if(ESTADO.idestado == null){
	finder_tUniqRow_2.idestado = null;
}else{
	finder_tUniqRow_2.idestado = ESTADO.idestado.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(ESTADO.idestado == null){
	new_tUniqRow_2.idestado = null;
}else{
	new_tUniqRow_2.idestado = ESTADO.idestado.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(filtradoEstado == null){ 
	
	filtradoEstado = new filtradoEstadoStruct();
}filtradoEstado.idestado = ESTADO.idestado;			filtradoEstado.nombre = ESTADO.nombre;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "filtradoEstado"
if(filtradoEstado != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//filtradoEstado
			//filtradoEstado


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoEstado"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "estadoDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopestadoDatamart = false;
       		  	    	
       		  	    	
 							estadoDatamartStruct estadoDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		estadoDatamartHashKey.idEstado =  filtradoEstado.idestado ;
                        		    		

								
		                        	estadoDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_estadoDatamart.lookup( estadoDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_estadoDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_estadoDatamart != null && tHash_Lookup_estadoDatamart.getCount(estadoDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'estadoDatamart' and it contains more one result from keys :  estadoDatamart.idEstado = '" + estadoDatamartHashKey.idEstado + "'");
								} // G 071
							

							estadoDatamartStruct estadoDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	estadoDatamartStruct fromLookup_estadoDatamart = null;
							estadoDatamart = estadoDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_estadoDatamart !=null && tHash_Lookup_estadoDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_estadoDatamart = tHash_Lookup_estadoDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_estadoDatamart != null) {
								estadoDatamart = fromLookup_estadoDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

falt_estado = null;

if(!rejectedInnerJoin_tMap_3 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_estado'
// # Filter conditions 
if( rejectedInnerJoin_tMap_3 ) {
falt_estado_tmp.idestado = filtradoEstado.idestado ;
falt_estado_tmp.nombre = null;
falt_estado = falt_estado_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "falt_estado"
if(falt_estado != null) { 



	
	/**
	 * [tMysqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

			//falt_estado
			//falt_estado


			
				if(execStat){
					runStat.updateStatOnConnection("falt_estado"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_2 = false;
                            if(falt_estado.idestado == null) {
pstmt_tMysqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(1, falt_estado.idestado);
}

                            if(falt_estado.nombre == null) {
pstmt_tMysqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(2, falt_estado.nombre);
}

                    pstmt_tMysqlOutput_2.addBatch();
                    nb_line_tMysqlOutput_2++;

                      batchSizeCounter_tMysqlOutput_2++;
            if(!whetherReject_tMysqlOutput_2) {
            }
                if ( batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_2 = 0;
            }
                commitCounter_tMysqlOutput_2++;

                if(commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_2.commit();
                    commitCounter_tMysqlOutput_2=0;

                }


 


	tos_count_tMysqlOutput_2++;

/**
 * [tMysqlOutput_2 main ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_end ] stop
 */

} // End of branch "falt_estado"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "filtradoEstado"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "ESTADO"




// Start of branch "SISTEMA"
if(SISTEMA != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

			//SISTEMA
			//SISTEMA


			
				if(execStat){
					runStat.updateStatOnConnection("SISTEMA"+iterateId,1, 1);
				} 
			

		
filtradoSistema = null;			
if(SISTEMA.idSistema == null){
	finder_tUniqRow_3.idSistema = null;
}else{
	finder_tUniqRow_3.idSistema = SISTEMA.idSistema.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(SISTEMA.idSistema == null){
	new_tUniqRow_3.idSistema = null;
}else{
	new_tUniqRow_3.idSistema = SISTEMA.idSistema.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(filtradoSistema == null){ 
	
	filtradoSistema = new filtradoSistemaStruct();
}filtradoSistema.idSistema = SISTEMA.idSistema;			filtradoSistema.nombre = SISTEMA.nombre;			filtradoSistema.descripcion = SISTEMA.descripcion;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "filtradoSistema"
if(filtradoSistema != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//filtradoSistema
			//filtradoSistema


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoSistema"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sistemaDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsistemaDatamart = false;
       		  	    	
       		  	    	
 							sistemaDatamartStruct sistemaDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		sistemaDatamartHashKey.idEstado = filtradoSistema.idSistema ;
                        		    		

								
		                        	sistemaDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sistemaDatamart.lookup( sistemaDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_sistemaDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sistemaDatamart != null && tHash_Lookup_sistemaDatamart.getCount(sistemaDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sistemaDatamart' and it contains more one result from keys :  sistemaDatamart.idEstado = '" + sistemaDatamartHashKey.idEstado + "'");
								} // G 071
							

							sistemaDatamartStruct sistemaDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	sistemaDatamartStruct fromLookup_sistemaDatamart = null;
							sistemaDatamart = sistemaDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sistemaDatamart !=null && tHash_Lookup_sistemaDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_sistemaDatamart = tHash_Lookup_sistemaDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_sistemaDatamart != null) {
								sistemaDatamart = fromLookup_sistemaDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

falt_sistema = null;

if(!rejectedInnerJoin_tMap_4 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_sistema'
// # Filter conditions 
if( rejectedInnerJoin_tMap_4 ) {
falt_sistema_tmp.idSistema = filtradoSistema.idSistema ;
falt_sistema_tmp.nombre = null;
falt_sistema_tmp.descripcion = null;
falt_sistema = falt_sistema_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "falt_sistema"
if(falt_sistema != null) { 



	
	/**
	 * [tMysqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

			//falt_sistema
			//falt_sistema


			
				if(execStat){
					runStat.updateStatOnConnection("falt_sistema"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_3 = false;
                            if(falt_sistema.idSistema == null) {
pstmt_tMysqlOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(1, falt_sistema.idSistema);
}

                            if(falt_sistema.nombre == null) {
pstmt_tMysqlOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(2, falt_sistema.nombre);
}

                            if(falt_sistema.descripcion == null) {
pstmt_tMysqlOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(3, falt_sistema.descripcion);
}

                    pstmt_tMysqlOutput_3.addBatch();
                    nb_line_tMysqlOutput_3++;

                      batchSizeCounter_tMysqlOutput_3++;
            if(!whetherReject_tMysqlOutput_3) {
            }
                if ( batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
                try {
                        int countSum_tMysqlOutput_3 = 0;
                        for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
                            countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_3 = 0;
                    for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                    }
                    insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_3 = 0;
            }
                commitCounter_tMysqlOutput_3++;

                if(commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

                try {
                        int countSum_tMysqlOutput_3 = 0;
                        for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
                            countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_3 = 0;
                    for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                    }
                    insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_3.commit();
                    commitCounter_tMysqlOutput_3=0;

                }


 


	tos_count_tMysqlOutput_3++;

/**
 * [tMysqlOutput_3 main ] stop
 */
	
	/**
	 * [tMysqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

 



/**
 * [tMysqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

 



/**
 * [tMysqlOutput_3 process_data_end ] stop
 */

} // End of branch "falt_sistema"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "filtradoSistema"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "SISTEMA"




// Start of branch "PORTAFOLIO"
if(PORTAFOLIO != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

			//PORTAFOLIO
			//PORTAFOLIO


			
				if(execStat){
					runStat.updateStatOnConnection("PORTAFOLIO"+iterateId,1, 1);
				} 
			

		
filtradoPortafolio = null;			
if(PORTAFOLIO.idPortafolio == null){
	finder_tUniqRow_4.idPortafolio = null;
}else{
	finder_tUniqRow_4.idPortafolio = PORTAFOLIO.idPortafolio.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(PORTAFOLIO.idPortafolio == null){
	new_tUniqRow_4.idPortafolio = null;
}else{
	new_tUniqRow_4.idPortafolio = PORTAFOLIO.idPortafolio.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(filtradoPortafolio == null){ 
	
	filtradoPortafolio = new filtradoPortafolioStruct();
}filtradoPortafolio.idPortafolio = PORTAFOLIO.idPortafolio;			filtradoPortafolio.nombre = PORTAFOLIO.nombre;			filtradoPortafolio.descripcion = PORTAFOLIO.descripcion;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "filtradoPortafolio"
if(filtradoPortafolio != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//filtradoPortafolio
			//filtradoPortafolio


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoPortafolio"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "portafolioDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopportafolioDatamart = false;
       		  	    	
       		  	    	
 							portafolioDatamartStruct portafolioDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		portafolioDatamartHashKey.idPortafolio = filtradoPortafolio.idPortafolio ;
                        		    		

								
		                        	portafolioDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_portafolioDatamart.lookup( portafolioDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_portafolioDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_portafolioDatamart != null && tHash_Lookup_portafolioDatamart.getCount(portafolioDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'portafolioDatamart' and it contains more one result from keys :  portafolioDatamart.idPortafolio = '" + portafolioDatamartHashKey.idPortafolio + "'");
								} // G 071
							

							portafolioDatamartStruct portafolioDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	portafolioDatamartStruct fromLookup_portafolioDatamart = null;
							portafolioDatamart = portafolioDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_portafolioDatamart !=null && tHash_Lookup_portafolioDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_portafolioDatamart = tHash_Lookup_portafolioDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_portafolioDatamart != null) {
								portafolioDatamart = fromLookup_portafolioDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

falt_portafolio = null;

if(!rejectedInnerJoin_tMap_5 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_portafolio'
// # Filter conditions 
if( rejectedInnerJoin_tMap_5 ) {
falt_portafolio_tmp.idPortafolio = filtradoPortafolio.idPortafolio ;
falt_portafolio_tmp.nombre = null;
falt_portafolio_tmp.descripcion = null;
falt_portafolio = falt_portafolio_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "falt_portafolio"
if(falt_portafolio != null) { 



	
	/**
	 * [tMysqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

			//falt_portafolio
			//falt_portafolio


			
				if(execStat){
					runStat.updateStatOnConnection("falt_portafolio"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_4 = false;
                    if(falt_portafolio.idPortafolio == null) {
pstmt_tMysqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(1, falt_portafolio.idPortafolio);
}


            java.sql.ResultSet rs_tMysqlOutput_4 = pstmt_tMysqlOutput_4.executeQuery();
            int checkCount_tMysqlOutput_4 = -1;
            while(rs_tMysqlOutput_4.next()) {
                checkCount_tMysqlOutput_4 = rs_tMysqlOutput_4.getInt(1);
            }
            if(checkCount_tMysqlOutput_4 > 0) {
                        if(falt_portafolio.nombre == null) {
pstmtUpdate_tMysqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_4.setString(1, falt_portafolio.nombre);
}

                        if(falt_portafolio.descripcion == null) {
pstmtUpdate_tMysqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_4.setString(2, falt_portafolio.descripcion);
}

                        if(falt_portafolio.idPortafolio == null) {
pstmtUpdate_tMysqlOutput_4.setNull(3 + count_tMysqlOutput_4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_4.setString(3 + count_tMysqlOutput_4, falt_portafolio.idPortafolio);
}

                try {
                    updatedCount_tMysqlOutput_4 = updatedCount_tMysqlOutput_4 + pstmtUpdate_tMysqlOutput_4.executeUpdate();
                    nb_line_tMysqlOutput_4++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_4 = true;
                        nb_line_tMysqlOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(falt_portafolio.idPortafolio == null) {
pstmtInsert_tMysqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_4.setString(1, falt_portafolio.idPortafolio);
}

                        if(falt_portafolio.nombre == null) {
pstmtInsert_tMysqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_4.setString(2, falt_portafolio.nombre);
}

                        if(falt_portafolio.descripcion == null) {
pstmtInsert_tMysqlOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_4.setString(3, falt_portafolio.descripcion);
}

                try {
                    insertedCount_tMysqlOutput_4 = insertedCount_tMysqlOutput_4 + pstmtInsert_tMysqlOutput_4.executeUpdate();
                    nb_line_tMysqlOutput_4++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_4 = true;
                        nb_line_tMysqlOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_4) {
            }
                commitCounter_tMysqlOutput_4++;

                if(commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

                    conn_tMysqlOutput_4.commit();
                    commitCounter_tMysqlOutput_4=0;

                }


 


	tos_count_tMysqlOutput_4++;

/**
 * [tMysqlOutput_4 main ] stop
 */
	
	/**
	 * [tMysqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_end ] stop
 */

} // End of branch "falt_portafolio"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "filtradoPortafolio"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "PORTAFOLIO"




// Start of branch "PRODUCTO"
if(PRODUCTO != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

			//PRODUCTO
			//PRODUCTO


			
				if(execStat){
					runStat.updateStatOnConnection("PRODUCTO"+iterateId,1, 1);
				} 
			

		
filtradoProducto = null;			
if(PRODUCTO.idProducto == null){
	finder_tUniqRow_5.idProducto = null;
}else{
	finder_tUniqRow_5.idProducto = PRODUCTO.idProducto.toLowerCase();
}
if(PRODUCTO.tipo_operacion == null){
	finder_tUniqRow_5.tipo_operacion = null;
}else{
	finder_tUniqRow_5.tipo_operacion = PRODUCTO.tipo_operacion.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(PRODUCTO.idProducto == null){
	new_tUniqRow_5.idProducto = null;
}else{
	new_tUniqRow_5.idProducto = PRODUCTO.idProducto.toLowerCase();
}
if(PRODUCTO.tipo_operacion == null){
	new_tUniqRow_5.tipo_operacion = null;
}else{
	new_tUniqRow_5.tipo_operacion = PRODUCTO.tipo_operacion.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(filtradoProducto == null){ 
	
	filtradoProducto = new filtradoProductoStruct();
}filtradoProducto.idProducto = PRODUCTO.idProducto;			filtradoProducto.nombre = PRODUCTO.nombre;			filtradoProducto.tipo_operacion = PRODUCTO.tipo_operacion;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "filtradoProducto"
if(filtradoProducto != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//filtradoProducto
			//filtradoProducto


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoProducto"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "productoDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopproductoDatamart = false;
       		  	    	
       		  	    	
 							productoDatamartStruct productoDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		productoDatamartHashKey.idProducto = filtradoProducto.idProducto ;
                        		    		
                        		    		productoDatamartHashKey.tipo_operacion = filtradoProducto.tipo_operacion ;
                        		    		

								
		                        	productoDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_productoDatamart.lookup( productoDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_productoDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_productoDatamart != null && tHash_Lookup_productoDatamart.getCount(productoDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'productoDatamart' and it contains more one result from keys :  productoDatamart.idProducto = '" + productoDatamartHashKey.idProducto + "', productoDatamart.tipo_operacion = '" + productoDatamartHashKey.tipo_operacion + "'");
								} // G 071
							

							productoDatamartStruct productoDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	productoDatamartStruct fromLookup_productoDatamart = null;
							productoDatamart = productoDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_productoDatamart !=null && tHash_Lookup_productoDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_productoDatamart = tHash_Lookup_productoDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_productoDatamart != null) {
								productoDatamart = fromLookup_productoDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

falt_producto = null;

if(!rejectedInnerJoin_tMap_6 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_producto'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
falt_producto_tmp.idProducto = filtradoProducto.idProducto ;
falt_producto_tmp.nombre = null;
falt_producto_tmp.tipo_operacion = filtradoProducto.tipo_operacion ;
falt_producto = falt_producto_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "falt_producto"
if(falt_producto != null) { 



	
	/**
	 * [tMysqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

			//falt_producto
			//falt_producto


			
				if(execStat){
					runStat.updateStatOnConnection("falt_producto"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_5 = false;
                    if(falt_producto.idProducto == null) {
pstmt_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_5.setString(1, falt_producto.idProducto);
}

                    if(falt_producto.tipo_operacion == null) {
pstmt_tMysqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_5.setString(2, falt_producto.tipo_operacion);
}


            java.sql.ResultSet rs_tMysqlOutput_5 = pstmt_tMysqlOutput_5.executeQuery();
            int checkCount_tMysqlOutput_5 = -1;
            while(rs_tMysqlOutput_5.next()) {
                checkCount_tMysqlOutput_5 = rs_tMysqlOutput_5.getInt(1);
            }
            if(checkCount_tMysqlOutput_5 > 0) {
                        if(falt_producto.nombre == null) {
pstmtUpdate_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(1, falt_producto.nombre);
}

                        if(falt_producto.idProducto == null) {
pstmtUpdate_tMysqlOutput_5.setNull(2 + count_tMysqlOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(2 + count_tMysqlOutput_5, falt_producto.idProducto);
}

                        if(falt_producto.tipo_operacion == null) {
pstmtUpdate_tMysqlOutput_5.setNull(3 + count_tMysqlOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_5.setString(3 + count_tMysqlOutput_5, falt_producto.tipo_operacion);
}

                try {
                    updatedCount_tMysqlOutput_5 = updatedCount_tMysqlOutput_5 + pstmtUpdate_tMysqlOutput_5.executeUpdate();
                    nb_line_tMysqlOutput_5++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_5 = true;
                        nb_line_tMysqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(falt_producto.idProducto == null) {
pstmtInsert_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(1, falt_producto.idProducto);
}

                        if(falt_producto.nombre == null) {
pstmtInsert_tMysqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(2, falt_producto.nombre);
}

                        if(falt_producto.tipo_operacion == null) {
pstmtInsert_tMysqlOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_5.setString(3, falt_producto.tipo_operacion);
}

                try {
                    insertedCount_tMysqlOutput_5 = insertedCount_tMysqlOutput_5 + pstmtInsert_tMysqlOutput_5.executeUpdate();
                    nb_line_tMysqlOutput_5++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_5 = true;
                        nb_line_tMysqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_5) {
            }
                commitCounter_tMysqlOutput_5++;

                if(commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

                    conn_tMysqlOutput_5.commit();
                    commitCounter_tMysqlOutput_5=0;

                }


 


	tos_count_tMysqlOutput_5++;

/**
 * [tMysqlOutput_5 main ] stop
 */
	
	/**
	 * [tMysqlOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

 



/**
 * [tMysqlOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

 



/**
 * [tMysqlOutput_5 process_data_end ] stop
 */

} // End of branch "falt_producto"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "filtradoProducto"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "PRODUCTO"




// Start of branch "CONTRAPARTE"
if(CONTRAPARTE != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

			//CONTRAPARTE
			//CONTRAPARTE


			
				if(execStat){
					runStat.updateStatOnConnection("CONTRAPARTE"+iterateId,1, 1);
				} 
			

		
filtradoContraparte = null;			
if(CONTRAPARTE.idContraparte == null){
	finder_tUniqRow_7.idContraparte = null;
}else{
	finder_tUniqRow_7.idContraparte = CONTRAPARTE.idContraparte.toLowerCase();
}	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
if(CONTRAPARTE.idContraparte == null){
	new_tUniqRow_7.idContraparte = null;
}else{
	new_tUniqRow_7.idContraparte = CONTRAPARTE.idContraparte.toLowerCase();
}
		
		keystUniqRow_7.add(new_tUniqRow_7);if(filtradoContraparte == null){ 
	
	filtradoContraparte = new filtradoContraparteStruct();
}filtradoContraparte.idContraparte = CONTRAPARTE.idContraparte;			filtradoContraparte.nombre = CONTRAPARTE.nombre;					
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "filtradoContraparte"
if(filtradoContraparte != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

			//filtradoContraparte
			//filtradoContraparte


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoContraparte"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "contraparteDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcontraparteDatamart = false;
       		  	    	
       		  	    	
 							contraparteDatamartStruct contraparteDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		contraparteDatamartHashKey.idContraparte = filtradoContraparte.idContraparte ;
                        		    		

								
		                        	contraparteDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_contraparteDatamart.lookup( contraparteDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_contraparteDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_contraparteDatamart != null && tHash_Lookup_contraparteDatamart.getCount(contraparteDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'contraparteDatamart' and it contains more one result from keys :  contraparteDatamart.idContraparte = '" + contraparteDatamartHashKey.idContraparte + "'");
								} // G 071
							

							contraparteDatamartStruct contraparteDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	contraparteDatamartStruct fromLookup_contraparteDatamart = null;
							contraparteDatamart = contraparteDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_contraparteDatamart !=null && tHash_Lookup_contraparteDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_contraparteDatamart = tHash_Lookup_contraparteDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_contraparteDatamart != null) {
								contraparteDatamart = fromLookup_contraparteDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

falt_contraparte = null;

if(!rejectedInnerJoin_tMap_11 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_contraparte'
// # Filter conditions 
if( rejectedInnerJoin_tMap_11 ) {
falt_contraparte_tmp.idContraparte = filtradoContraparte.idContraparte ;
falt_contraparte_tmp.nombre = null;
falt_contraparte = falt_contraparte_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "falt_contraparte"
if(falt_contraparte != null) { 



	
	/**
	 * [tMysqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

			//falt_contraparte
			//falt_contraparte


			
				if(execStat){
					runStat.updateStatOnConnection("falt_contraparte"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_6 = false;
                    if(falt_contraparte.idContraparte == null) {
pstmt_tMysqlOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_6.setString(1, falt_contraparte.idContraparte);
}


            java.sql.ResultSet rs_tMysqlOutput_6 = pstmt_tMysqlOutput_6.executeQuery();
            int checkCount_tMysqlOutput_6 = -1;
            while(rs_tMysqlOutput_6.next()) {
                checkCount_tMysqlOutput_6 = rs_tMysqlOutput_6.getInt(1);
            }
            if(checkCount_tMysqlOutput_6 > 0) {
                        if(falt_contraparte.nombre == null) {
pstmtUpdate_tMysqlOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_6.setString(1, falt_contraparte.nombre);
}

                        if(falt_contraparte.idContraparte == null) {
pstmtUpdate_tMysqlOutput_6.setNull(2 + count_tMysqlOutput_6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_6.setString(2 + count_tMysqlOutput_6, falt_contraparte.idContraparte);
}

                try {
                    updatedCount_tMysqlOutput_6 = updatedCount_tMysqlOutput_6 + pstmtUpdate_tMysqlOutput_6.executeUpdate();
                    nb_line_tMysqlOutput_6++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_6 = true;
                        nb_line_tMysqlOutput_6++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(falt_contraparte.idContraparte == null) {
pstmtInsert_tMysqlOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_6.setString(1, falt_contraparte.idContraparte);
}

                        if(falt_contraparte.nombre == null) {
pstmtInsert_tMysqlOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_6.setString(2, falt_contraparte.nombre);
}

                try {
                    insertedCount_tMysqlOutput_6 = insertedCount_tMysqlOutput_6 + pstmtInsert_tMysqlOutput_6.executeUpdate();
                    nb_line_tMysqlOutput_6++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_6 = true;
                        nb_line_tMysqlOutput_6++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_6) {
            }
                commitCounter_tMysqlOutput_6++;

                if(commitEvery_tMysqlOutput_6 <= commitCounter_tMysqlOutput_6) {

                    conn_tMysqlOutput_6.commit();
                    commitCounter_tMysqlOutput_6=0;

                }


 


	tos_count_tMysqlOutput_6++;

/**
 * [tMysqlOutput_6 main ] stop
 */
	
	/**
	 * [tMysqlOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

 



/**
 * [tMysqlOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

 



/**
 * [tMysqlOutput_6 process_data_end ] stop
 */

} // End of branch "falt_contraparte"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "filtradoContraparte"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "CONTRAPARTE"




// Start of branch "MON1"
if(MON1 != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

			//MON1
			//MON1


			
				if(execStat){
					runStat.updateStatOnConnection("MON1"+iterateId,1, 1);
				} 
			

		
filtradoMoneda1 = null;			
if(MON1.idMoneda == null){
	finder_tUniqRow_8.idMoneda = null;
}else{
	finder_tUniqRow_8.idMoneda = MON1.idMoneda.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(MON1.idMoneda == null){
	new_tUniqRow_8.idMoneda = null;
}else{
	new_tUniqRow_8.idMoneda = MON1.idMoneda.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(filtradoMoneda1 == null){ 
	
	filtradoMoneda1 = new filtradoMoneda1Struct();
}filtradoMoneda1.idMoneda = MON1.idMoneda;			filtradoMoneda1.nombre = MON1.nombre;			filtradoMoneda1.descripcion = MON1.descripcion;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "filtradoMoneda1"
if(filtradoMoneda1 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//filtradoMoneda1
			//filtradoMoneda1


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoMoneda1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "monedaDatamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopmonedaDatamart = false;
       		  	    	
       		  	    	
 							monedaDatamartStruct monedaDatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		monedaDatamartHashKey.idMoneda = filtradoMoneda1.idMoneda ;
                        		    		

								
		                        	monedaDatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_monedaDatamart.lookup( monedaDatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_monedaDatamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_monedaDatamart != null && tHash_Lookup_monedaDatamart.getCount(monedaDatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'monedaDatamart' and it contains more one result from keys :  monedaDatamart.idMoneda = '" + monedaDatamartHashKey.idMoneda + "'");
								} // G 071
							

							monedaDatamartStruct monedaDatamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	monedaDatamartStruct fromLookup_monedaDatamart = null;
							monedaDatamart = monedaDatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_monedaDatamart !=null && tHash_Lookup_monedaDatamart.hasNext()) { // G 099
								
							
								
								fromLookup_monedaDatamart = tHash_Lookup_monedaDatamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_monedaDatamart != null) {
								monedaDatamart = fromLookup_monedaDatamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

falt_moneda = null;

if(!rejectedInnerJoin_tMap_7 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_moneda'
// # Filter conditions 
if( rejectedInnerJoin_tMap_7 ) {
falt_moneda_tmp.idMoneda = filtradoMoneda1.idMoneda ;
falt_moneda_tmp.nombre = null;
falt_moneda_tmp.descripcion = null;
falt_moneda = falt_moneda_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "falt_moneda"
if(falt_moneda != null) { 



	
	/**
	 * [tMysqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

			//falt_moneda
			//falt_moneda


			
				if(execStat){
					runStat.updateStatOnConnection("falt_moneda"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_7 = false;
                    if(falt_moneda.idMoneda == null) {
pstmt_tMysqlOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_7.setString(1, falt_moneda.idMoneda);
}


            java.sql.ResultSet rs_tMysqlOutput_7 = pstmt_tMysqlOutput_7.executeQuery();
            int checkCount_tMysqlOutput_7 = -1;
            while(rs_tMysqlOutput_7.next()) {
                checkCount_tMysqlOutput_7 = rs_tMysqlOutput_7.getInt(1);
            }
            if(checkCount_tMysqlOutput_7 > 0) {
                        if(falt_moneda.nombre == null) {
pstmtUpdate_tMysqlOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_7.setString(1, falt_moneda.nombre);
}

                        if(falt_moneda.descripcion == null) {
pstmtUpdate_tMysqlOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_7.setString(2, falt_moneda.descripcion);
}

                        if(falt_moneda.idMoneda == null) {
pstmtUpdate_tMysqlOutput_7.setNull(3 + count_tMysqlOutput_7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_7.setString(3 + count_tMysqlOutput_7, falt_moneda.idMoneda);
}

                try {
                    updatedCount_tMysqlOutput_7 = updatedCount_tMysqlOutput_7 + pstmtUpdate_tMysqlOutput_7.executeUpdate();
                    nb_line_tMysqlOutput_7++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_7 = true;
                        nb_line_tMysqlOutput_7++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(falt_moneda.idMoneda == null) {
pstmtInsert_tMysqlOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_7.setString(1, falt_moneda.idMoneda);
}

                        if(falt_moneda.nombre == null) {
pstmtInsert_tMysqlOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_7.setString(2, falt_moneda.nombre);
}

                        if(falt_moneda.descripcion == null) {
pstmtInsert_tMysqlOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_7.setString(3, falt_moneda.descripcion);
}

                try {
                    insertedCount_tMysqlOutput_7 = insertedCount_tMysqlOutput_7 + pstmtInsert_tMysqlOutput_7.executeUpdate();
                    nb_line_tMysqlOutput_7++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_7 = true;
                        nb_line_tMysqlOutput_7++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_7) {
            }
                commitCounter_tMysqlOutput_7++;

                if(commitEvery_tMysqlOutput_7 <= commitCounter_tMysqlOutput_7) {

                    conn_tMysqlOutput_7.commit();
                    commitCounter_tMysqlOutput_7=0;

                }


 


	tos_count_tMysqlOutput_7++;

/**
 * [tMysqlOutput_7 main ] stop
 */
	
	/**
	 * [tMysqlOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

 



/**
 * [tMysqlOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

 



/**
 * [tMysqlOutput_7 process_data_end ] stop
 */

} // End of branch "falt_moneda"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "filtradoMoneda1"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "MON1"




// Start of branch "MON2"
if(MON2 != null) { 



	
	/**
	 * [tUniqRow_10 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

			//MON2
			//MON2


			
				if(execStat){
					runStat.updateStatOnConnection("MON2"+iterateId,1, 1);
				} 
			

		
filtradoMoneda2 = null;			
if(MON2.idMoneda == null){
	finder_tUniqRow_10.idMoneda = null;
}else{
	finder_tUniqRow_10.idMoneda = MON2.idMoneda.toLowerCase();
}	
finder_tUniqRow_10.hashCodeDirty = true;
if (!keystUniqRow_10.contains(finder_tUniqRow_10)) {
		KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

		
if(MON2.idMoneda == null){
	new_tUniqRow_10.idMoneda = null;
}else{
	new_tUniqRow_10.idMoneda = MON2.idMoneda.toLowerCase();
}
		
		keystUniqRow_10.add(new_tUniqRow_10);if(filtradoMoneda2 == null){ 
	
	filtradoMoneda2 = new filtradoMoneda2Struct();
}filtradoMoneda2.idMoneda = MON2.idMoneda;			filtradoMoneda2.nombre = MON2.nombre;			filtradoMoneda2.descripcion = MON2.descripcion;					
		nb_uniques_tUniqRow_10++;
	} else {
	  nb_duplicates_tUniqRow_10++;
	}

 


	tos_count_tUniqRow_10++;

/**
 * [tUniqRow_10 main ] stop
 */
	
	/**
	 * [tUniqRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_begin ] stop
 */
// Start of branch "filtradoMoneda2"
if(filtradoMoneda2 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//filtradoMoneda2
			//filtradoMoneda2


			
				if(execStat){
					runStat.updateStatOnConnection("filtradoMoneda2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "moneda2Datamart" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopmoneda2Datamart = false;
       		  	    	
       		  	    	
 							moneda2DatamartStruct moneda2DatamartObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		moneda2DatamartHashKey.idMoneda = filtradoMoneda2.idMoneda ;
                        		    		

								
		                        	moneda2DatamartHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_moneda2Datamart.lookup( moneda2DatamartHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_moneda2Datamart.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_moneda2Datamart != null && tHash_Lookup_moneda2Datamart.getCount(moneda2DatamartHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'moneda2Datamart' and it contains more one result from keys :  moneda2Datamart.idMoneda = '" + moneda2DatamartHashKey.idMoneda + "'");
								} // G 071
							

							moneda2DatamartStruct moneda2Datamart = null;
                    		  	 
							   
                    		  	 
	       		  	    	moneda2DatamartStruct fromLookup_moneda2Datamart = null;
							moneda2Datamart = moneda2DatamartDefault;
										 
							
								 
							
							
								if (tHash_Lookup_moneda2Datamart !=null && tHash_Lookup_moneda2Datamart.hasNext()) { // G 099
								
							
								
								fromLookup_moneda2Datamart = tHash_Lookup_moneda2Datamart.next();

							
							
								} // G 099
							
							

							if(fromLookup_moneda2Datamart != null) {
								moneda2Datamart = fromLookup_moneda2Datamart;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

falt_moneda2 = null;

if(!rejectedInnerJoin_tMap_8 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'falt_moneda2'
// # Filter conditions 
if( rejectedInnerJoin_tMap_8 ) {
falt_moneda2_tmp.idMoneda = filtradoMoneda2.idMoneda ;
falt_moneda2_tmp.nombre = null;
falt_moneda2_tmp.descripcion = null;
falt_moneda2 = falt_moneda2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "falt_moneda2"
if(falt_moneda2 != null) { 



	
	/**
	 * [tMysqlOutput_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	

			//falt_moneda2
			//falt_moneda2


			
				if(execStat){
					runStat.updateStatOnConnection("falt_moneda2"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_8 = false;
                    if(falt_moneda2.idMoneda == null) {
pstmt_tMysqlOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_8.setString(1, falt_moneda2.idMoneda);
}


            java.sql.ResultSet rs_tMysqlOutput_8 = pstmt_tMysqlOutput_8.executeQuery();
            int checkCount_tMysqlOutput_8 = -1;
            while(rs_tMysqlOutput_8.next()) {
                checkCount_tMysqlOutput_8 = rs_tMysqlOutput_8.getInt(1);
            }
            if(checkCount_tMysqlOutput_8 > 0) {
                        if(falt_moneda2.nombre == null) {
pstmtUpdate_tMysqlOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_8.setString(1, falt_moneda2.nombre);
}

                        if(falt_moneda2.descripcion == null) {
pstmtUpdate_tMysqlOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_8.setString(2, falt_moneda2.descripcion);
}

                        if(falt_moneda2.idMoneda == null) {
pstmtUpdate_tMysqlOutput_8.setNull(3 + count_tMysqlOutput_8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_8.setString(3 + count_tMysqlOutput_8, falt_moneda2.idMoneda);
}

                try {
                    updatedCount_tMysqlOutput_8 = updatedCount_tMysqlOutput_8 + pstmtUpdate_tMysqlOutput_8.executeUpdate();
                    nb_line_tMysqlOutput_8++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_8 = true;
                        nb_line_tMysqlOutput_8++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(falt_moneda2.idMoneda == null) {
pstmtInsert_tMysqlOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_8.setString(1, falt_moneda2.idMoneda);
}

                        if(falt_moneda2.nombre == null) {
pstmtInsert_tMysqlOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_8.setString(2, falt_moneda2.nombre);
}

                        if(falt_moneda2.descripcion == null) {
pstmtInsert_tMysqlOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_8.setString(3, falt_moneda2.descripcion);
}

                try {
                    insertedCount_tMysqlOutput_8 = insertedCount_tMysqlOutput_8 + pstmtInsert_tMysqlOutput_8.executeUpdate();
                    nb_line_tMysqlOutput_8++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_8 = true;
                        nb_line_tMysqlOutput_8++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_8) {
            }
                commitCounter_tMysqlOutput_8++;

                if(commitEvery_tMysqlOutput_8 <= commitCounter_tMysqlOutput_8) {

                    conn_tMysqlOutput_8.commit();
                    commitCounter_tMysqlOutput_8=0;

                }


 


	tos_count_tMysqlOutput_8++;

/**
 * [tMysqlOutput_8 main ] stop
 */
	
	/**
	 * [tMysqlOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	

 



/**
 * [tMysqlOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	

 



/**
 * [tMysqlOutput_8 process_data_end ] stop
 */

} // End of branch "falt_moneda2"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "filtradoMoneda2"




	
	/**
	 * [tUniqRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_end ] stop
 */

} // End of branch "MON2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("TRADER"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_traderDatamart != null) {
						tHash_Lookup_traderDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_traderDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoTrader"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_trader"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_1 end ] stop
 */










	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ESTADO"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_estadoDatamart != null) {
						tHash_Lookup_estadoDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_estadoDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoEstado"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMysqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_2 != 0) {
							int countSum_tMysqlOutput_2 = 0;
							
							for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
								countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_2 = 0;
					for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
					}
					
            	    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_2 = 0;
    		
	

        if(pstmt_tMysqlOutput_2 != null) {
			
				pstmt_tMysqlOutput_2.close();
			
        }

    	if (commitCounter_tMysqlOutput_2 > 0) {
    		
    		conn_tMysqlOutput_2.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_2 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_2", true);
    	

	nb_line_deleted_tMysqlOutput_2=nb_line_deleted_tMysqlOutput_2+ deletedCount_tMysqlOutput_2;
	nb_line_update_tMysqlOutput_2=nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
	nb_line_inserted_tMysqlOutput_2=nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
	nb_line_rejected_tMysqlOutput_2=nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;
	
        globalMap.put("tMysqlOutput_2_NB_LINE",nb_line_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_estado"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_2", true);
end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_2 end ] stop
 */










	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("SISTEMA"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sistemaDatamart != null) {
						tHash_Lookup_sistemaDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_sistemaDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoSistema"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMysqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_3 != 0) {
							int countSum_tMysqlOutput_3 = 0;
							
							for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
								countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_3 = 0;
					for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
					}
					
            	    insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_3 = 0;
    		
	

        if(pstmt_tMysqlOutput_3 != null) {
			
				pstmt_tMysqlOutput_3.close();
			
        }

    	if (commitCounter_tMysqlOutput_3 > 0) {
    		
    		conn_tMysqlOutput_3.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_3 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_3", true);
    	

	nb_line_deleted_tMysqlOutput_3=nb_line_deleted_tMysqlOutput_3+ deletedCount_tMysqlOutput_3;
	nb_line_update_tMysqlOutput_3=nb_line_update_tMysqlOutput_3 + updatedCount_tMysqlOutput_3;
	nb_line_inserted_tMysqlOutput_3=nb_line_inserted_tMysqlOutput_3 + insertedCount_tMysqlOutput_3;
	nb_line_rejected_tMysqlOutput_3=nb_line_rejected_tMysqlOutput_3 + rejectedCount_tMysqlOutput_3;
	
        globalMap.put("tMysqlOutput_3_NB_LINE",nb_line_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_3);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_sistema"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_3", true);
end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_3 end ] stop
 */










	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("PORTAFOLIO"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_portafolioDatamart != null) {
						tHash_Lookup_portafolioDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_portafolioDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoPortafolio"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMysqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



        if(pstmtUpdate_tMysqlOutput_4 != null){

            pstmtUpdate_tMysqlOutput_4.close();

        }
        if(pstmtInsert_tMysqlOutput_4 != null){

            pstmtInsert_tMysqlOutput_4.close();

        }
        if(pstmt_tMysqlOutput_4 != null) {

            pstmt_tMysqlOutput_4.close();

        }

    	if (commitCounter_tMysqlOutput_4 > 0) {
    		
    		conn_tMysqlOutput_4.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_4 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_4", true);
    	

	nb_line_deleted_tMysqlOutput_4=nb_line_deleted_tMysqlOutput_4+ deletedCount_tMysqlOutput_4;
	nb_line_update_tMysqlOutput_4=nb_line_update_tMysqlOutput_4 + updatedCount_tMysqlOutput_4;
	nb_line_inserted_tMysqlOutput_4=nb_line_inserted_tMysqlOutput_4 + insertedCount_tMysqlOutput_4;
	nb_line_rejected_tMysqlOutput_4=nb_line_rejected_tMysqlOutput_4 + rejectedCount_tMysqlOutput_4;
	
        globalMap.put("tMysqlOutput_4_NB_LINE",nb_line_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_4);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_portafolio"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_4", true);
end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_4 end ] stop
 */










	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("PRODUCTO"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_productoDatamart != null) {
						tHash_Lookup_productoDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_productoDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoProducto"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMysqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



        if(pstmtUpdate_tMysqlOutput_5 != null){

            pstmtUpdate_tMysqlOutput_5.close();

        }
        if(pstmtInsert_tMysqlOutput_5 != null){

            pstmtInsert_tMysqlOutput_5.close();

        }
        if(pstmt_tMysqlOutput_5 != null) {

            pstmt_tMysqlOutput_5.close();

        }

    	if (commitCounter_tMysqlOutput_5 > 0) {
    		
    		conn_tMysqlOutput_5.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_5 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_5", true);
    	

	nb_line_deleted_tMysqlOutput_5=nb_line_deleted_tMysqlOutput_5+ deletedCount_tMysqlOutput_5;
	nb_line_update_tMysqlOutput_5=nb_line_update_tMysqlOutput_5 + updatedCount_tMysqlOutput_5;
	nb_line_inserted_tMysqlOutput_5=nb_line_inserted_tMysqlOutput_5 + insertedCount_tMysqlOutput_5;
	nb_line_rejected_tMysqlOutput_5=nb_line_rejected_tMysqlOutput_5 + rejectedCount_tMysqlOutput_5;
	
        globalMap.put("tMysqlOutput_5_NB_LINE",nb_line_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_5);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_producto"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_5", true);
end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_5 end ] stop
 */










	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("CONTRAPARTE"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_contraparteDatamart != null) {
						tHash_Lookup_contraparteDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_contraparteDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoContraparte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMysqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



        if(pstmtUpdate_tMysqlOutput_6 != null){

            pstmtUpdate_tMysqlOutput_6.close();

        }
        if(pstmtInsert_tMysqlOutput_6 != null){

            pstmtInsert_tMysqlOutput_6.close();

        }
        if(pstmt_tMysqlOutput_6 != null) {

            pstmt_tMysqlOutput_6.close();

        }

    	if (commitCounter_tMysqlOutput_6 > 0) {
    		
    		conn_tMysqlOutput_6.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_6 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_6", true);
    	

	nb_line_deleted_tMysqlOutput_6=nb_line_deleted_tMysqlOutput_6+ deletedCount_tMysqlOutput_6;
	nb_line_update_tMysqlOutput_6=nb_line_update_tMysqlOutput_6 + updatedCount_tMysqlOutput_6;
	nb_line_inserted_tMysqlOutput_6=nb_line_inserted_tMysqlOutput_6 + insertedCount_tMysqlOutput_6;
	nb_line_rejected_tMysqlOutput_6=nb_line_rejected_tMysqlOutput_6 + rejectedCount_tMysqlOutput_6;
	
        globalMap.put("tMysqlOutput_6_NB_LINE",nb_line_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_6);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_contraparte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_6", true);
end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_6 end ] stop
 */










	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("MON1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_monedaDatamart != null) {
						tHash_Lookup_monedaDatamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_monedaDatamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoMoneda1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMysqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



        if(pstmtUpdate_tMysqlOutput_7 != null){

            pstmtUpdate_tMysqlOutput_7.close();

        }
        if(pstmtInsert_tMysqlOutput_7 != null){

            pstmtInsert_tMysqlOutput_7.close();

        }
        if(pstmt_tMysqlOutput_7 != null) {

            pstmt_tMysqlOutput_7.close();

        }

    	if (commitCounter_tMysqlOutput_7 > 0) {
    		
    		conn_tMysqlOutput_7.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_7 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_7", true);
    	

	nb_line_deleted_tMysqlOutput_7=nb_line_deleted_tMysqlOutput_7+ deletedCount_tMysqlOutput_7;
	nb_line_update_tMysqlOutput_7=nb_line_update_tMysqlOutput_7 + updatedCount_tMysqlOutput_7;
	nb_line_inserted_tMysqlOutput_7=nb_line_inserted_tMysqlOutput_7 + insertedCount_tMysqlOutput_7;
	nb_line_rejected_tMysqlOutput_7=nb_line_rejected_tMysqlOutput_7 + rejectedCount_tMysqlOutput_7;
	
        globalMap.put("tMysqlOutput_7_NB_LINE",nb_line_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_7);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_moneda"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_7", true);
end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_7 end ] stop
 */










	
	/**
	 * [tUniqRow_10 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

globalMap.put("tUniqRow_10_NB_UNIQUES",nb_uniques_tUniqRow_10);
globalMap.put("tUniqRow_10_NB_DUPLICATES",nb_duplicates_tUniqRow_10);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("MON2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_10", true);
end_Hash.put("tUniqRow_10", System.currentTimeMillis());




/**
 * [tUniqRow_10 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_moneda2Datamart != null) {
						tHash_Lookup_moneda2Datamart.endGet();
					}
					globalMap.remove( "tHash_Lookup_moneda2Datamart" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("filtradoMoneda2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMysqlOutput_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	



        if(pstmtUpdate_tMysqlOutput_8 != null){

            pstmtUpdate_tMysqlOutput_8.close();

        }
        if(pstmtInsert_tMysqlOutput_8 != null){

            pstmtInsert_tMysqlOutput_8.close();

        }
        if(pstmt_tMysqlOutput_8 != null) {

            pstmt_tMysqlOutput_8.close();

        }

    	if (commitCounter_tMysqlOutput_8 > 0) {
    		
    		conn_tMysqlOutput_8.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_8 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_8", true);
    	

	nb_line_deleted_tMysqlOutput_8=nb_line_deleted_tMysqlOutput_8+ deletedCount_tMysqlOutput_8;
	nb_line_update_tMysqlOutput_8=nb_line_update_tMysqlOutput_8 + updatedCount_tMysqlOutput_8;
	nb_line_inserted_tMysqlOutput_8=nb_line_inserted_tMysqlOutput_8 + insertedCount_tMysqlOutput_8;
	nb_line_rejected_tMysqlOutput_8=nb_line_rejected_tMysqlOutput_8 + rejectedCount_tMysqlOutput_8;
	
        globalMap.put("tMysqlOutput_8_NB_LINE",nb_line_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_8);
        globalMap.put("tMysqlOutput_8_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_8);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("falt_moneda2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_8", true);
end_Hash.put("tMysqlOutput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tMysqlOutput_8 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_moneda2Datamart"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_monedaDatamart"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_contraparteDatamart"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_productoDatamart"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_portafolioDatamart"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_sistemaDatamart"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_estadoDatamart"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_traderDatamart"); 
				     			
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */










	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	
		if(resourceMap.get("finish_tMysqlOutput_2")==null){
			if(resourceMap.get("conn_tMysqlOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_2");
					
					
            		
					ctn_tMysqlOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
					String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :" + sqlEx_tMysqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_2);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_2 finally ] stop
 */










	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



	
		if(resourceMap.get("finish_tMysqlOutput_3")==null){
			if(resourceMap.get("conn_tMysqlOutput_3")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_3 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_3");
					
					
            		
					ctn_tMysqlOutput_3.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
					String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :" + sqlEx_tMysqlOutput_3.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_3);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_3 finally ] stop
 */










	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



	
		if(resourceMap.get("finish_tMysqlOutput_4")==null){
			if(resourceMap.get("conn_tMysqlOutput_4")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_4 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_4");
					
					
            		
					ctn_tMysqlOutput_4.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
					String errorMessage_tMysqlOutput_4 = "failed to close the connection in tMysqlOutput_4 :" + sqlEx_tMysqlOutput_4.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_4);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



	
		if(resourceMap.get("finish_tMysqlOutput_5")==null){
			if(resourceMap.get("conn_tMysqlOutput_5")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_5 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_5");
					
					
            		
					ctn_tMysqlOutput_5.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_5) {
					String errorMessage_tMysqlOutput_5 = "failed to close the connection in tMysqlOutput_5 :" + sqlEx_tMysqlOutput_5.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_5);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_5 finally ] stop
 */










	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



	
		if(resourceMap.get("finish_tMysqlOutput_6")==null){
			if(resourceMap.get("conn_tMysqlOutput_6")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_6 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_6");
					
					
            		
					ctn_tMysqlOutput_6.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_6) {
					String errorMessage_tMysqlOutput_6 = "failed to close the connection in tMysqlOutput_6 :" + sqlEx_tMysqlOutput_6.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_6);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_6 finally ] stop
 */










	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



	
		if(resourceMap.get("finish_tMysqlOutput_7")==null){
			if(resourceMap.get("conn_tMysqlOutput_7")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_7 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_7");
					
					
            		
					ctn_tMysqlOutput_7.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_7) {
					String errorMessage_tMysqlOutput_7 = "failed to close the connection in tMysqlOutput_7 :" + sqlEx_tMysqlOutput_7.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_7);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_7 finally ] stop
 */










	
	/**
	 * [tUniqRow_10 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_8";

	



	
		if(resourceMap.get("finish_tMysqlOutput_8")==null){
			if(resourceMap.get("conn_tMysqlOutput_8")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_8 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_8");
					
					
            		
					ctn_tMysqlOutput_8.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_8) {
					String errorMessage_tMysqlOutput_8 = "failed to close the connection in tMysqlOutput_8 :" + sqlEx_tMysqlOutput_8.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_8);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_8 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		completo.create_fact_0_1.Create_fact childJob_tRunJob_1 = new completo.create_fact_0_1.Create_fact();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getException().getClass().getName() + ": " + childJob_tRunJob_1.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class estadoDatamartStruct implements routines.system.IPersistableComparableLookupRow<estadoDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idEstado;

				public String getIdEstado () {
					return this.idEstado;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idEstado == null) ? 0 : this.idEstado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final estadoDatamartStruct other = (estadoDatamartStruct) obj;
		
						if (this.idEstado == null) {
							if (other.idEstado != null)
								return false;
						
						} else if (!this.idEstado.equals(other.idEstado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(estadoDatamartStruct other) {

		other.idEstado = this.idEstado;
	            
	}

	public void copyKeysDataTo(estadoDatamartStruct other) {

		other.idEstado = this.idEstado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idEstado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idEstado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idEstado="+idEstado);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(estadoDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idEstado, other.idEstado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		estadoDatamartStruct estadoDatamart = new estadoDatamartStruct();




	
	/**
	 * [tAdvancedHash_estadoDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_estadoDatamart", false);
		start_Hash.put("tAdvancedHash_estadoDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_estadoDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("estadoDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_estadoDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_estadoDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_estadoDatamart().limitLog4jByte();

			   		// connection name:estadoDatamart
			   		// source node:tMysqlInput_3 - inputs:(after_tMysqlInput_1) outputs:(estadoDatamart,estadoDatamart) | target node:tAdvancedHash_estadoDatamart - inputs:(estadoDatamart) outputs:()
			   		// linked node: tMap_3 - inputs:(filtradoEstado,estadoDatamart) outputs:(falt_estado)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_estadoDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<estadoDatamartStruct> tHash_Lookup_estadoDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<estadoDatamartStruct>getLookup(matchingModeEnum_estadoDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_estadoDatamart", tHash_Lookup_estadoDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_estadoDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
    	class BytesLimit65535_tMysqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_3);
			   	String dbUser_tMysqlInput_3 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
		        
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "select idestado from dimestado";
			

            	globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);
		    java.sql.ResultSet rs_tMysqlInput_3 = null;

		    try {
		    	rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    	int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								estadoDatamart.idEstado = null;
							} else {
	                         		
        	estadoDatamart.idEstado = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */
	
	/**
	 * [tMysqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_estadoDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estadoDatamart";

	

			//estadoDatamart
			//estadoDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("estadoDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					estadoDatamartStruct estadoDatamart_HashRow = new estadoDatamartStruct();
		   	   	   
				
				estadoDatamart_HashRow.idEstado = estadoDatamart.idEstado;
				
			tHash_Lookup_estadoDatamart.put(estadoDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_estadoDatamart++;

/**
 * [tAdvancedHash_estadoDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_estadoDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estadoDatamart";

	

 



/**
 * [tAdvancedHash_estadoDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_estadoDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estadoDatamart";

	

 



/**
 * [tAdvancedHash_estadoDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if(rs_tMysqlInput_3 !=null){
		rs_tMysqlInput_3.close();
	}
	stmt_tMysqlInput_3.close();
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_estadoDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estadoDatamart";

	

tHash_Lookup_estadoDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("estadoDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_estadoDatamart", true);
end_Hash.put("tAdvancedHash_estadoDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_estadoDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_estadoDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_estadoDatamart";

	

 



/**
 * [tAdvancedHash_estadoDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class sistemaDatamartStruct implements routines.system.IPersistableComparableLookupRow<sistemaDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idEstado;

				public String getIdEstado () {
					return this.idEstado;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idEstado == null) ? 0 : this.idEstado.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sistemaDatamartStruct other = (sistemaDatamartStruct) obj;
		
						if (this.idEstado == null) {
							if (other.idEstado != null)
								return false;
						
						} else if (!this.idEstado.equals(other.idEstado))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sistemaDatamartStruct other) {

		other.idEstado = this.idEstado;
	            
	}

	public void copyKeysDataTo(sistemaDatamartStruct other) {

		other.idEstado = this.idEstado;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idEstado = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idEstado,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idEstado="+idEstado);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sistemaDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idEstado, other.idEstado);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		sistemaDatamartStruct sistemaDatamart = new sistemaDatamartStruct();




	
	/**
	 * [tAdvancedHash_sistemaDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sistemaDatamart", false);
		start_Hash.put("tAdvancedHash_sistemaDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("sistemaDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_sistemaDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_sistemaDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_sistemaDatamart().limitLog4jByte();

			   		// connection name:sistemaDatamart
			   		// source node:tMysqlInput_4 - inputs:(after_tMysqlInput_1) outputs:(sistemaDatamart,sistemaDatamart) | target node:tAdvancedHash_sistemaDatamart - inputs:(sistemaDatamart) outputs:()
			   		// linked node: tMap_4 - inputs:(filtradoSistema,sistemaDatamart) outputs:(falt_sistema)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sistemaDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sistemaDatamartStruct> tHash_Lookup_sistemaDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sistemaDatamartStruct>getLookup(matchingModeEnum_sistemaDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sistemaDatamart", tHash_Lookup_sistemaDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sistemaDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_4", false);
		start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_4";

	
		int tos_count_tMysqlInput_4 = 0;
		
    	class BytesLimit65535_tMysqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_4().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
		    int nb_line_tMysqlInput_4 = 0;
		    java.sql.Connection conn_tMysqlInput_4 = null;
				String driverClass_tMysqlInput_4 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_4);
			   	String dbUser_tMysqlInput_4 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;
		        
				
				String url_tMysqlInput_4 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(url_tMysqlInput_4,dbUser_tMysqlInput_4,dbPwd_tMysqlInput_4);
		        
		    
			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

		    String dbquery_tMysqlInput_4 = "select idsistema from dimsistema";
			

            	globalMap.put("tMysqlInput_4_QUERY",dbquery_tMysqlInput_4);
		    java.sql.ResultSet rs_tMysqlInput_4 = null;

		    try {
		    	rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
		    	int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

		    String tmpContent_tMysqlInput_4 = null;
		    
		    
		    while (rs_tMysqlInput_4.next()) {
		        nb_line_tMysqlInput_4++;
		        
							if(colQtyInRs_tMysqlInput_4 < 1) {
								sistemaDatamart.idEstado = null;
							} else {
	                         		
        	sistemaDatamart.idEstado = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_4 begin ] stop
 */
	
	/**
	 * [tMysqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 


	tos_count_tMysqlInput_4++;

/**
 * [tMysqlInput_4 main ] stop
 */
	
	/**
	 * [tMysqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_sistemaDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	

			//sistemaDatamart
			//sistemaDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("sistemaDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					sistemaDatamartStruct sistemaDatamart_HashRow = new sistemaDatamartStruct();
		   	   	   
				
				sistemaDatamart_HashRow.idEstado = sistemaDatamart.idEstado;
				
			tHash_Lookup_sistemaDatamart.put(sistemaDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_sistemaDatamart++;

/**
 * [tAdvancedHash_sistemaDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_sistemaDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	

 



/**
 * [tAdvancedHash_sistemaDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sistemaDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	

 



/**
 * [tAdvancedHash_sistemaDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

	}
}finally{
	if(rs_tMysqlInput_4 !=null){
		rs_tMysqlInput_4.close();
	}
	stmt_tMysqlInput_4.close();
		if(conn_tMysqlInput_4 != null && !conn_tMysqlInput_4.isClosed()) {
			
			conn_tMysqlInput_4.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_4_NB_LINE",nb_line_tMysqlInput_4);
		


 

ok_Hash.put("tMysqlInput_4", true);
end_Hash.put("tMysqlInput_4", System.currentTimeMillis());




/**
 * [tMysqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sistemaDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	

tHash_Lookup_sistemaDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("sistemaDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_sistemaDatamart", true);
end_Hash.put("tAdvancedHash_sistemaDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_sistemaDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sistemaDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sistemaDatamart";

	

 



/**
 * [tAdvancedHash_sistemaDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class portafolioDatamartStruct implements routines.system.IPersistableComparableLookupRow<portafolioDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idPortafolio;

				public String getIdPortafolio () {
					return this.idPortafolio;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idPortafolio == null) ? 0 : this.idPortafolio.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final portafolioDatamartStruct other = (portafolioDatamartStruct) obj;
		
						if (this.idPortafolio == null) {
							if (other.idPortafolio != null)
								return false;
						
						} else if (!this.idPortafolio.equals(other.idPortafolio))
						
							return false;
					

		return true;
    }

	public void copyDataTo(portafolioDatamartStruct other) {

		other.idPortafolio = this.idPortafolio;
	            
	}

	public void copyKeysDataTo(portafolioDatamartStruct other) {

		other.idPortafolio = this.idPortafolio;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idPortafolio = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idPortafolio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idPortafolio="+idPortafolio);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(portafolioDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idPortafolio, other.idPortafolio);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		portafolioDatamartStruct portafolioDatamart = new portafolioDatamartStruct();




	
	/**
	 * [tAdvancedHash_portafolioDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_portafolioDatamart", false);
		start_Hash.put("tAdvancedHash_portafolioDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("portafolioDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_portafolioDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_portafolioDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_portafolioDatamart().limitLog4jByte();

			   		// connection name:portafolioDatamart
			   		// source node:tMysqlInput_5 - inputs:(after_tMysqlInput_1) outputs:(portafolioDatamart,portafolioDatamart) | target node:tAdvancedHash_portafolioDatamart - inputs:(portafolioDatamart) outputs:()
			   		// linked node: tMap_5 - inputs:(filtradoPortafolio,portafolioDatamart) outputs:(falt_portafolio)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_portafolioDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<portafolioDatamartStruct> tHash_Lookup_portafolioDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<portafolioDatamartStruct>getLookup(matchingModeEnum_portafolioDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_portafolioDatamart", tHash_Lookup_portafolioDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_portafolioDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_5", false);
		start_Hash.put("tMysqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_5";

	
		int tos_count_tMysqlInput_5 = 0;
		
    	class BytesLimit65535_tMysqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_5().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5.getTime();
		    int nb_line_tMysqlInput_5 = 0;
		    java.sql.Connection conn_tMysqlInput_5 = null;
				String driverClass_tMysqlInput_5 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_5);
			   	String dbUser_tMysqlInput_5 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;
		        
				
				String url_tMysqlInput_5 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(url_tMysqlInput_5,dbUser_tMysqlInput_5,dbPwd_tMysqlInput_5);
		        
		    
			java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5.createStatement();

		    String dbquery_tMysqlInput_5 = "select idportafolio from dimportafolio";
			

            	globalMap.put("tMysqlInput_5_QUERY",dbquery_tMysqlInput_5);
		    java.sql.ResultSet rs_tMysqlInput_5 = null;

		    try {
		    	rs_tMysqlInput_5 = stmt_tMysqlInput_5.executeQuery(dbquery_tMysqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5.getMetaData();
		    	int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5.getColumnCount();

		    String tmpContent_tMysqlInput_5 = null;
		    
		    
		    while (rs_tMysqlInput_5.next()) {
		        nb_line_tMysqlInput_5++;
		        
							if(colQtyInRs_tMysqlInput_5 < 1) {
								portafolioDatamart.idPortafolio = null;
							} else {
	                         		
        	portafolioDatamart.idPortafolio = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_5 begin ] stop
 */
	
	/**
	 * [tMysqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 


	tos_count_tMysqlInput_5++;

/**
 * [tMysqlInput_5 main ] stop
 */
	
	/**
	 * [tMysqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolioDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	

			//portafolioDatamart
			//portafolioDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("portafolioDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					portafolioDatamartStruct portafolioDatamart_HashRow = new portafolioDatamartStruct();
		   	   	   
				
				portafolioDatamart_HashRow.idPortafolio = portafolioDatamart.idPortafolio;
				
			tHash_Lookup_portafolioDatamart.put(portafolioDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_portafolioDatamart++;

/**
 * [tAdvancedHash_portafolioDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_portafolioDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	

 



/**
 * [tAdvancedHash_portafolioDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_portafolioDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	

 



/**
 * [tAdvancedHash_portafolioDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

	}
}finally{
	if(rs_tMysqlInput_5 !=null){
		rs_tMysqlInput_5.close();
	}
	stmt_tMysqlInput_5.close();
		if(conn_tMysqlInput_5 != null && !conn_tMysqlInput_5.isClosed()) {
			
			conn_tMysqlInput_5.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_5_NB_LINE",nb_line_tMysqlInput_5);
		


 

ok_Hash.put("tMysqlInput_5", true);
end_Hash.put("tMysqlInput_5", System.currentTimeMillis());




/**
 * [tMysqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolioDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	

tHash_Lookup_portafolioDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("portafolioDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_portafolioDatamart", true);
end_Hash.put("tAdvancedHash_portafolioDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_portafolioDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_portafolioDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_portafolioDatamart";

	

 



/**
 * [tAdvancedHash_portafolioDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class traderDatamartStruct implements routines.system.IPersistableComparableLookupRow<traderDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idTrader;

				public String getIdTrader () {
					return this.idTrader;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idTrader == null) ? 0 : this.idTrader.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final traderDatamartStruct other = (traderDatamartStruct) obj;
		
						if (this.idTrader == null) {
							if (other.idTrader != null)
								return false;
						
						} else if (!this.idTrader.equals(other.idTrader))
						
							return false;
					

		return true;
    }

	public void copyDataTo(traderDatamartStruct other) {

		other.idTrader = this.idTrader;
	            
	}

	public void copyKeysDataTo(traderDatamartStruct other) {

		other.idTrader = this.idTrader;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idTrader = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idTrader,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idTrader="+idTrader);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(traderDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idTrader, other.idTrader);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		traderDatamartStruct traderDatamart = new traderDatamartStruct();




	
	/**
	 * [tAdvancedHash_traderDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_traderDatamart", false);
		start_Hash.put("tAdvancedHash_traderDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_traderDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("traderDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_traderDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_traderDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_traderDatamart().limitLog4jByte();

			   		// connection name:traderDatamart
			   		// source node:tMysqlInput_2 - inputs:(after_tMysqlInput_1) outputs:(traderDatamart,traderDatamart) | target node:tAdvancedHash_traderDatamart - inputs:(traderDatamart) outputs:()
			   		// linked node: tMap_2 - inputs:(filtradoTrader,traderDatamart) outputs:(falt_trader)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_traderDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<traderDatamartStruct> tHash_Lookup_traderDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<traderDatamartStruct>getLookup(matchingModeEnum_traderDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_traderDatamart", tHash_Lookup_traderDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_traderDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
    	class BytesLimit65535_tMysqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_2);
			   	String dbUser_tMysqlInput_2 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
		        
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "select idtrader from dimtrader";
			

            	globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);
		    java.sql.ResultSet rs_tMysqlInput_2 = null;

		    try {
		    	rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    	int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								traderDatamart.idTrader = null;
							} else {
	                         		
        	traderDatamart.idTrader = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */
	
	/**
	 * [tMysqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_traderDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_traderDatamart";

	

			//traderDatamart
			//traderDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("traderDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					traderDatamartStruct traderDatamart_HashRow = new traderDatamartStruct();
		   	   	   
				
				traderDatamart_HashRow.idTrader = traderDatamart.idTrader;
				
			tHash_Lookup_traderDatamart.put(traderDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_traderDatamart++;

/**
 * [tAdvancedHash_traderDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_traderDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_traderDatamart";

	

 



/**
 * [tAdvancedHash_traderDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_traderDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_traderDatamart";

	

 



/**
 * [tAdvancedHash_traderDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if(rs_tMysqlInput_2 !=null){
		rs_tMysqlInput_2.close();
	}
	stmt_tMysqlInput_2.close();
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_traderDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_traderDatamart";

	

tHash_Lookup_traderDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("traderDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_traderDatamart", true);
end_Hash.put("tAdvancedHash_traderDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_traderDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_traderDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_traderDatamart";

	

 



/**
 * [tAdvancedHash_traderDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class productoDatamartStruct implements routines.system.IPersistableComparableLookupRow<productoDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idProducto;

				public String getIdProducto () {
					return this.idProducto;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String tipo_operacion;

				public String getTipo_operacion () {
					return this.tipo_operacion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idProducto == null) ? 0 : this.idProducto.hashCode());
					
						result = prime * result + ((this.tipo_operacion == null) ? 0 : this.tipo_operacion.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final productoDatamartStruct other = (productoDatamartStruct) obj;
		
						if (this.idProducto == null) {
							if (other.idProducto != null)
								return false;
						
						} else if (!this.idProducto.equals(other.idProducto))
						
							return false;
					
						if (this.tipo_operacion == null) {
							if (other.tipo_operacion != null)
								return false;
						
						} else if (!this.tipo_operacion.equals(other.tipo_operacion))
						
							return false;
					

		return true;
    }

	public void copyDataTo(productoDatamartStruct other) {

		other.idProducto = this.idProducto;
	            other.nombre = this.nombre;
	            other.tipo_operacion = this.tipo_operacion;
	            
	}

	public void copyKeysDataTo(productoDatamartStruct other) {

		other.idProducto = this.idProducto;
	            	other.tipo_operacion = this.tipo_operacion;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idProducto = readString(dis);
					
					this.tipo_operacion = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idProducto,dos);
					
					// String
				
						writeString(this.tipo_operacion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idProducto="+idProducto);
		sb.append(",nombre="+nombre);
		sb.append(",tipo_operacion="+tipo_operacion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(productoDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idProducto, other.idProducto);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tipo_operacion, other.tipo_operacion);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		productoDatamartStruct productoDatamart = new productoDatamartStruct();




	
	/**
	 * [tAdvancedHash_productoDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_productoDatamart", false);
		start_Hash.put("tAdvancedHash_productoDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_productoDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("productoDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_productoDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_productoDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_productoDatamart().limitLog4jByte();

			   		// connection name:productoDatamart
			   		// source node:tMysqlInput_6 - inputs:(after_tMysqlInput_1) outputs:(productoDatamart,productoDatamart) | target node:tAdvancedHash_productoDatamart - inputs:(productoDatamart) outputs:()
			   		// linked node: tMap_6 - inputs:(filtradoProducto,productoDatamart) outputs:(falt_producto)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_productoDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<productoDatamartStruct> tHash_Lookup_productoDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<productoDatamartStruct>getLookup(matchingModeEnum_productoDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_productoDatamart", tHash_Lookup_productoDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_productoDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_6", false);
		start_Hash.put("tMysqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_6";

	
		int tos_count_tMysqlInput_6 = 0;
		
    	class BytesLimit65535_tMysqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_6().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6.getTime();
		    int nb_line_tMysqlInput_6 = 0;
		    java.sql.Connection conn_tMysqlInput_6 = null;
				String driverClass_tMysqlInput_6 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_6);
			   	String dbUser_tMysqlInput_6 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;
		        
				
				String url_tMysqlInput_6 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(url_tMysqlInput_6,dbUser_tMysqlInput_6,dbPwd_tMysqlInput_6);
		        
		    
			java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6.createStatement();

		    String dbquery_tMysqlInput_6 = "select * from dimproducto";
			

            	globalMap.put("tMysqlInput_6_QUERY",dbquery_tMysqlInput_6);
		    java.sql.ResultSet rs_tMysqlInput_6 = null;

		    try {
		    	rs_tMysqlInput_6 = stmt_tMysqlInput_6.executeQuery(dbquery_tMysqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6.getMetaData();
		    	int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6.getColumnCount();

		    String tmpContent_tMysqlInput_6 = null;
		    
		    
		    while (rs_tMysqlInput_6.next()) {
		        nb_line_tMysqlInput_6++;
		        
							if(colQtyInRs_tMysqlInput_6 < 1) {
								productoDatamart.idProducto = null;
							} else {
	                         		
        	productoDatamart.idProducto = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 2) {
								productoDatamart.nombre = null;
							} else {
	                         		
        	productoDatamart.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_6 < 3) {
								productoDatamart.tipo_operacion = null;
							} else {
	                         		
        	productoDatamart.tipo_operacion = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_6 begin ] stop
 */
	
	/**
	 * [tMysqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 


	tos_count_tMysqlInput_6++;

/**
 * [tMysqlInput_6 main ] stop
 */
	
	/**
	 * [tMysqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_productoDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_productoDatamart";

	

			//productoDatamart
			//productoDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("productoDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					productoDatamartStruct productoDatamart_HashRow = new productoDatamartStruct();
		   	   	   
				
				productoDatamart_HashRow.idProducto = productoDatamart.idProducto;
				
				productoDatamart_HashRow.nombre = productoDatamart.nombre;
				
				productoDatamart_HashRow.tipo_operacion = productoDatamart.tipo_operacion;
				
			tHash_Lookup_productoDatamart.put(productoDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_productoDatamart++;

/**
 * [tAdvancedHash_productoDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_productoDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_productoDatamart";

	

 



/**
 * [tAdvancedHash_productoDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_productoDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_productoDatamart";

	

 



/**
 * [tAdvancedHash_productoDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

	}
}finally{
	if(rs_tMysqlInput_6 !=null){
		rs_tMysqlInput_6.close();
	}
	stmt_tMysqlInput_6.close();
		if(conn_tMysqlInput_6 != null && !conn_tMysqlInput_6.isClosed()) {
			
			conn_tMysqlInput_6.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_6_NB_LINE",nb_line_tMysqlInput_6);
		


 

ok_Hash.put("tMysqlInput_6", true);
end_Hash.put("tMysqlInput_6", System.currentTimeMillis());




/**
 * [tMysqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_productoDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_productoDatamart";

	

tHash_Lookup_productoDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("productoDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_productoDatamart", true);
end_Hash.put("tAdvancedHash_productoDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_productoDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_productoDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_productoDatamart";

	

 



/**
 * [tAdvancedHash_productoDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class contraparteDatamartStruct implements routines.system.IPersistableComparableLookupRow<contraparteDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idContraparte;

				public String getIdContraparte () {
					return this.idContraparte;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idContraparte == null) ? 0 : this.idContraparte.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final contraparteDatamartStruct other = (contraparteDatamartStruct) obj;
		
						if (this.idContraparte == null) {
							if (other.idContraparte != null)
								return false;
						
						} else if (!this.idContraparte.equals(other.idContraparte))
						
							return false;
					

		return true;
    }

	public void copyDataTo(contraparteDatamartStruct other) {

		other.idContraparte = this.idContraparte;
	            other.nombre = this.nombre;
	            
	}

	public void copyKeysDataTo(contraparteDatamartStruct other) {

		other.idContraparte = this.idContraparte;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idContraparte = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idContraparte,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idContraparte="+idContraparte);
		sb.append(",nombre="+nombre);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(contraparteDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idContraparte, other.idContraparte);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		contraparteDatamartStruct contraparteDatamart = new contraparteDatamartStruct();




	
	/**
	 * [tAdvancedHash_contraparteDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_contraparteDatamart", false);
		start_Hash.put("tAdvancedHash_contraparteDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("contraparteDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_contraparteDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_contraparteDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_contraparteDatamart().limitLog4jByte();

			   		// connection name:contraparteDatamart
			   		// source node:tMysqlInput_9 - inputs:(after_tMysqlInput_1) outputs:(contraparteDatamart,contraparteDatamart) | target node:tAdvancedHash_contraparteDatamart - inputs:(contraparteDatamart) outputs:()
			   		// linked node: tMap_11 - inputs:(filtradoContraparte,contraparteDatamart) outputs:(falt_contraparte)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_contraparteDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<contraparteDatamartStruct> tHash_Lookup_contraparteDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<contraparteDatamartStruct>getLookup(matchingModeEnum_contraparteDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_contraparteDatamart", tHash_Lookup_contraparteDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_contraparteDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_9", false);
		start_Hash.put("tMysqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_9";

	
		int tos_count_tMysqlInput_9 = 0;
		
    	class BytesLimit65535_tMysqlInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_9().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_9 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_9.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_9 = calendar_tMysqlInput_9.getTime();
		    int nb_line_tMysqlInput_9 = 0;
		    java.sql.Connection conn_tMysqlInput_9 = null;
				String driverClass_tMysqlInput_9 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_9);
			   	String dbUser_tMysqlInput_9 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_9 = decryptedPassword_tMysqlInput_9;
		        
				
				String url_tMysqlInput_9 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_9 = java.sql.DriverManager.getConnection(url_tMysqlInput_9,dbUser_tMysqlInput_9,dbPwd_tMysqlInput_9);
		        
		    
			java.sql.Statement stmt_tMysqlInput_9 = conn_tMysqlInput_9.createStatement();

		    String dbquery_tMysqlInput_9 = "select * from dimcontraparte";
			

            	globalMap.put("tMysqlInput_9_QUERY",dbquery_tMysqlInput_9);
		    java.sql.ResultSet rs_tMysqlInput_9 = null;

		    try {
		    	rs_tMysqlInput_9 = stmt_tMysqlInput_9.executeQuery(dbquery_tMysqlInput_9);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_9 = rs_tMysqlInput_9.getMetaData();
		    	int colQtyInRs_tMysqlInput_9 = rsmd_tMysqlInput_9.getColumnCount();

		    String tmpContent_tMysqlInput_9 = null;
		    
		    
		    while (rs_tMysqlInput_9.next()) {
		        nb_line_tMysqlInput_9++;
		        
							if(colQtyInRs_tMysqlInput_9 < 1) {
								contraparteDatamart.idContraparte = null;
							} else {
	                         		
        	contraparteDatamart.idContraparte = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_9 < 2) {
								contraparteDatamart.nombre = null;
							} else {
	                         		
        	contraparteDatamart.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_9, 2, false);
		                    }
					

 



/**
 * [tMysqlInput_9 begin ] stop
 */
	
	/**
	 * [tMysqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 


	tos_count_tMysqlInput_9++;

/**
 * [tMysqlInput_9 main ] stop
 */
	
	/**
	 * [tMysqlInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparteDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	

			//contraparteDatamart
			//contraparteDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("contraparteDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					contraparteDatamartStruct contraparteDatamart_HashRow = new contraparteDatamartStruct();
		   	   	   
				
				contraparteDatamart_HashRow.idContraparte = contraparteDatamart.idContraparte;
				
				contraparteDatamart_HashRow.nombre = contraparteDatamart.nombre;
				
			tHash_Lookup_contraparteDatamart.put(contraparteDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_contraparteDatamart++;

/**
 * [tAdvancedHash_contraparteDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_contraparteDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	

 



/**
 * [tAdvancedHash_contraparteDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_contraparteDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	

 



/**
 * [tAdvancedHash_contraparteDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

	}
}finally{
	if(rs_tMysqlInput_9 !=null){
		rs_tMysqlInput_9.close();
	}
	stmt_tMysqlInput_9.close();
		if(conn_tMysqlInput_9 != null && !conn_tMysqlInput_9.isClosed()) {
			
			conn_tMysqlInput_9.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_9_NB_LINE",nb_line_tMysqlInput_9);
		


 

ok_Hash.put("tMysqlInput_9", true);
end_Hash.put("tMysqlInput_9", System.currentTimeMillis());




/**
 * [tMysqlInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparteDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	

tHash_Lookup_contraparteDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("contraparteDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_contraparteDatamart", true);
end_Hash.put("tAdvancedHash_contraparteDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_contraparteDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_9";

	

 



/**
 * [tMysqlInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_contraparteDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_contraparteDatamart";

	

 



/**
 * [tAdvancedHash_contraparteDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class monedaDatamartStruct implements routines.system.IPersistableComparableLookupRow<monedaDatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final monedaDatamartStruct other = (monedaDatamartStruct) obj;
		
						if (this.idMoneda == null) {
							if (other.idMoneda != null)
								return false;
						
						} else if (!this.idMoneda.equals(other.idMoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(monedaDatamartStruct other) {

		other.idMoneda = this.idMoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(monedaDatamartStruct other) {

		other.idMoneda = this.idMoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(monedaDatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idMoneda, other.idMoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		monedaDatamartStruct monedaDatamart = new monedaDatamartStruct();




	
	/**
	 * [tAdvancedHash_monedaDatamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_monedaDatamart", false);
		start_Hash.put("tAdvancedHash_monedaDatamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_monedaDatamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("monedaDatamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_monedaDatamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_monedaDatamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_monedaDatamart().limitLog4jByte();

			   		// connection name:monedaDatamart
			   		// source node:tMysqlInput_7 - inputs:(after_tMysqlInput_1) outputs:(monedaDatamart,monedaDatamart) | target node:tAdvancedHash_monedaDatamart - inputs:(monedaDatamart) outputs:()
			   		// linked node: tMap_7 - inputs:(filtradoMoneda1,monedaDatamart) outputs:(falt_moneda)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_monedaDatamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<monedaDatamartStruct> tHash_Lookup_monedaDatamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<monedaDatamartStruct>getLookup(matchingModeEnum_monedaDatamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_monedaDatamart", tHash_Lookup_monedaDatamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_monedaDatamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_7", false);
		start_Hash.put("tMysqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_7";

	
		int tos_count_tMysqlInput_7 = 0;
		
    	class BytesLimit65535_tMysqlInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_7().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7.getTime();
		    int nb_line_tMysqlInput_7 = 0;
		    java.sql.Connection conn_tMysqlInput_7 = null;
				String driverClass_tMysqlInput_7 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_7);
			   	String dbUser_tMysqlInput_7 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_7 = decryptedPassword_tMysqlInput_7;
		        
				
				String url_tMysqlInput_7 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(url_tMysqlInput_7,dbUser_tMysqlInput_7,dbPwd_tMysqlInput_7);
		        
		    
			java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7.createStatement();

		    String dbquery_tMysqlInput_7 = "select * from diminfomoneda";
			

            	globalMap.put("tMysqlInput_7_QUERY",dbquery_tMysqlInput_7);
		    java.sql.ResultSet rs_tMysqlInput_7 = null;

		    try {
		    	rs_tMysqlInput_7 = stmt_tMysqlInput_7.executeQuery(dbquery_tMysqlInput_7);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7.getMetaData();
		    	int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7.getColumnCount();

		    String tmpContent_tMysqlInput_7 = null;
		    
		    
		    while (rs_tMysqlInput_7.next()) {
		        nb_line_tMysqlInput_7++;
		        
							if(colQtyInRs_tMysqlInput_7 < 1) {
								monedaDatamart.idMoneda = null;
							} else {
	                         		
        	monedaDatamart.idMoneda = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 2) {
								monedaDatamart.nombre = null;
							} else {
	                         		
        	monedaDatamart.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_7 < 3) {
								monedaDatamart.descripcion = null;
							} else {
	                         		
        	monedaDatamart.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_7 begin ] stop
 */
	
	/**
	 * [tMysqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 


	tos_count_tMysqlInput_7++;

/**
 * [tMysqlInput_7 main ] stop
 */
	
	/**
	 * [tMysqlInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_monedaDatamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_monedaDatamart";

	

			//monedaDatamart
			//monedaDatamart


			
				if(execStat){
					runStat.updateStatOnConnection("monedaDatamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					monedaDatamartStruct monedaDatamart_HashRow = new monedaDatamartStruct();
		   	   	   
				
				monedaDatamart_HashRow.idMoneda = monedaDatamart.idMoneda;
				
				monedaDatamart_HashRow.nombre = monedaDatamart.nombre;
				
				monedaDatamart_HashRow.descripcion = monedaDatamart.descripcion;
				
			tHash_Lookup_monedaDatamart.put(monedaDatamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_monedaDatamart++;

/**
 * [tAdvancedHash_monedaDatamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_monedaDatamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_monedaDatamart";

	

 



/**
 * [tAdvancedHash_monedaDatamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_monedaDatamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_monedaDatamart";

	

 



/**
 * [tAdvancedHash_monedaDatamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

	}
}finally{
	if(rs_tMysqlInput_7 !=null){
		rs_tMysqlInput_7.close();
	}
	stmt_tMysqlInput_7.close();
		if(conn_tMysqlInput_7 != null && !conn_tMysqlInput_7.isClosed()) {
			
			conn_tMysqlInput_7.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_7_NB_LINE",nb_line_tMysqlInput_7);
		


 

ok_Hash.put("tMysqlInput_7", true);
end_Hash.put("tMysqlInput_7", System.currentTimeMillis());




/**
 * [tMysqlInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_monedaDatamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_monedaDatamart";

	

tHash_Lookup_monedaDatamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("monedaDatamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_monedaDatamart", true);
end_Hash.put("tAdvancedHash_monedaDatamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_monedaDatamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_monedaDatamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_monedaDatamart";

	

 



/**
 * [tAdvancedHash_monedaDatamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class moneda2DatamartStruct implements routines.system.IPersistableComparableLookupRow<moneda2DatamartStruct> {
    final static byte[] commonByteArrayLock_COMPLETO_Create_dim = new byte[0];
    static byte[] commonByteArray_COMPLETO_Create_dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String idMoneda;

				public String getIdMoneda () {
					return this.idMoneda;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String descripcion;

				public String getDescripcion () {
					return this.descripcion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.idMoneda == null) ? 0 : this.idMoneda.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final moneda2DatamartStruct other = (moneda2DatamartStruct) obj;
		
						if (this.idMoneda == null) {
							if (other.idMoneda != null)
								return false;
						
						} else if (!this.idMoneda.equals(other.idMoneda))
						
							return false;
					

		return true;
    }

	public void copyDataTo(moneda2DatamartStruct other) {

		other.idMoneda = this.idMoneda;
	            other.nombre = this.nombre;
	            other.descripcion = this.descripcion;
	            
	}

	public void copyKeysDataTo(moneda2DatamartStruct other) {

		other.idMoneda = this.idMoneda;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_COMPLETO_Create_dim.length) {
				if(length < 1024 && commonByteArray_COMPLETO_Create_dim.length == 0) {
   					commonByteArray_COMPLETO_Create_dim = new byte[1024];
				} else {
   					commonByteArray_COMPLETO_Create_dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_COMPLETO_Create_dim, 0, length);
			strReturn = new String(commonByteArray_COMPLETO_Create_dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_COMPLETO_Create_dim) {

        	try {

        		int length = 0;
		
					this.idMoneda = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.idMoneda,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nombre = readString(dis,ois);
					
						this.descripcion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nombre, dos, oos);
					
						writeString(this.descripcion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMoneda="+idMoneda);
		sb.append(",nombre="+nombre);
		sb.append(",descripcion="+descripcion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(moneda2DatamartStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.idMoneda, other.idMoneda);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		moneda2DatamartStruct moneda2Datamart = new moneda2DatamartStruct();




	
	/**
	 * [tAdvancedHash_moneda2Datamart begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_moneda2Datamart", false);
		start_Hash.put("tAdvancedHash_moneda2Datamart", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("moneda2Datamart" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_moneda2Datamart = 0;
		
    	class BytesLimit65535_tAdvancedHash_moneda2Datamart{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_moneda2Datamart().limitLog4jByte();

			   		// connection name:moneda2Datamart
			   		// source node:tMysqlInput_8 - inputs:(after_tMysqlInput_1) outputs:(moneda2Datamart,moneda2Datamart) | target node:tAdvancedHash_moneda2Datamart - inputs:(moneda2Datamart) outputs:()
			   		// linked node: tMap_8 - inputs:(filtradoMoneda2,moneda2Datamart) outputs:(falt_moneda2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_moneda2Datamart = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moneda2DatamartStruct> tHash_Lookup_moneda2Datamart =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<moneda2DatamartStruct>getLookup(matchingModeEnum_moneda2Datamart);
	   						   
		   	   	   globalMap.put("tHash_Lookup_moneda2Datamart", tHash_Lookup_moneda2Datamart);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_moneda2Datamart begin ] stop
 */



	
	/**
	 * [tMysqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_8", false);
		start_Hash.put("tMysqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_8";

	
		int tos_count_tMysqlInput_8 = 0;
		
    	class BytesLimit65535_tMysqlInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_8().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_8 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_8.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_8 = calendar_tMysqlInput_8.getTime();
		    int nb_line_tMysqlInput_8 = 0;
		    java.sql.Connection conn_tMysqlInput_8 = null;
				String driverClass_tMysqlInput_8 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_8);
			   	String dbUser_tMysqlInput_8 = "tesis";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("edb6ac47853dddd4f4f7aba1746784ea");
			   	
		        String dbPwd_tMysqlInput_8 = decryptedPassword_tMysqlInput_8;
		        
				
				String url_tMysqlInput_8 = "jdbc:mysql://" + "167.99.147.146" + ":" + "3306" + "/" + "datamart" + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_8 = java.sql.DriverManager.getConnection(url_tMysqlInput_8,dbUser_tMysqlInput_8,dbPwd_tMysqlInput_8);
		        
		    
			java.sql.Statement stmt_tMysqlInput_8 = conn_tMysqlInput_8.createStatement();

		    String dbquery_tMysqlInput_8 = "select * from diminfomoneda";
			

            	globalMap.put("tMysqlInput_8_QUERY",dbquery_tMysqlInput_8);
		    java.sql.ResultSet rs_tMysqlInput_8 = null;

		    try {
		    	rs_tMysqlInput_8 = stmt_tMysqlInput_8.executeQuery(dbquery_tMysqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_8 = rs_tMysqlInput_8.getMetaData();
		    	int colQtyInRs_tMysqlInput_8 = rsmd_tMysqlInput_8.getColumnCount();

		    String tmpContent_tMysqlInput_8 = null;
		    
		    
		    while (rs_tMysqlInput_8.next()) {
		        nb_line_tMysqlInput_8++;
		        
							if(colQtyInRs_tMysqlInput_8 < 1) {
								moneda2Datamart.idMoneda = null;
							} else {
	                         		
        	moneda2Datamart.idMoneda = routines.system.JDBCUtil.getString(rs_tMysqlInput_8, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_8 < 2) {
								moneda2Datamart.nombre = null;
							} else {
	                         		
        	moneda2Datamart.nombre = routines.system.JDBCUtil.getString(rs_tMysqlInput_8, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_8 < 3) {
								moneda2Datamart.descripcion = null;
							} else {
	                         		
        	moneda2Datamart.descripcion = routines.system.JDBCUtil.getString(rs_tMysqlInput_8, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_8 begin ] stop
 */
	
	/**
	 * [tMysqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 


	tos_count_tMysqlInput_8++;

/**
 * [tMysqlInput_8 main ] stop
 */
	
	/**
	 * [tMysqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2Datamart main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	

			//moneda2Datamart
			//moneda2Datamart


			
				if(execStat){
					runStat.updateStatOnConnection("moneda2Datamart"+iterateId,1, 1);
				} 
			

		


			   
			   

					moneda2DatamartStruct moneda2Datamart_HashRow = new moneda2DatamartStruct();
		   	   	   
				
				moneda2Datamart_HashRow.idMoneda = moneda2Datamart.idMoneda;
				
				moneda2Datamart_HashRow.nombre = moneda2Datamart.nombre;
				
				moneda2Datamart_HashRow.descripcion = moneda2Datamart.descripcion;
				
			tHash_Lookup_moneda2Datamart.put(moneda2Datamart_HashRow);
			
            




 


	tos_count_tAdvancedHash_moneda2Datamart++;

/**
 * [tAdvancedHash_moneda2Datamart main ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda2Datamart process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	

 



/**
 * [tAdvancedHash_moneda2Datamart process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_moneda2Datamart process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	

 



/**
 * [tAdvancedHash_moneda2Datamart process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

	}
}finally{
	if(rs_tMysqlInput_8 !=null){
		rs_tMysqlInput_8.close();
	}
	stmt_tMysqlInput_8.close();
		if(conn_tMysqlInput_8 != null && !conn_tMysqlInput_8.isClosed()) {
			
			conn_tMysqlInput_8.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_8_NB_LINE",nb_line_tMysqlInput_8);
		


 

ok_Hash.put("tMysqlInput_8", true);
end_Hash.put("tMysqlInput_8", System.currentTimeMillis());




/**
 * [tMysqlInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2Datamart end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	

tHash_Lookup_moneda2Datamart.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("moneda2Datamart"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_moneda2Datamart", true);
end_Hash.put("tAdvancedHash_moneda2Datamart", System.currentTimeMillis());




/**
 * [tAdvancedHash_moneda2Datamart end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_moneda2Datamart finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_moneda2Datamart";

	

 



/**
 * [tAdvancedHash_moneda2Datamart finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Create_dim Create_dimClass = new Create_dim();

        int exitCode = Create_dimClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Create_dim.class.getClassLoader().getResourceAsStream("completo/create_dim_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Create_dim.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Create_dim");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     488830 characters generated by Talend Open Studio for Data Integration 
 *     on the 9 de mayo de 2018 02:41:23 AM COT
 ************************************************************************************************/